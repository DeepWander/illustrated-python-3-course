{
  "course_id": 12,
  "course_title": "Python 3, an illustrated tour",
  "chapters": [
    {
      "chapter_id": 12001,
      "chapter_title": "Welcome to the course",
      "lectures": [
        {
          "lecture_id": 120101,
          "lecture_title": "Course Introduction",
          "vimeo_id": 7111116972249486,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Welcome to Python 3, An Illustrated Tour."
            },
            {
              "seconds": 2,
              "text": "I'm Matt Harrison and I'll be your host"
            },
            {
              "seconds": 4,
              "text": "through this nice trip on the new features of Python 3."
            },
            {
              "seconds": 7,
              "text": "Let me just give you an introduction"
            },
            {
              "seconds": 9,
              "text": "about what we're going to cover in this course."
            },
            {
              "seconds": 11,
              "text": "We're going to talk about the changes and new features in Python 3."
            },
            {
              "seconds": 14,
              "text": "So if you've been using Python 2 for a while and transitioned to 3"
            },
            {
              "seconds": 18,
              "text": "or you've started using 3, but aren't aware"
            },
            {
              "seconds": 21,
              "text": "of all the new features, this course is for you."
            },
            {
              "seconds": 24,
              "text": "Let me tell you a little bit about myself."
            },
            {
              "seconds": 26,
              "text": "I am the author of various Python books."
            },
            {
              "seconds": 28,
              "text": "I wrote the best-selling Illustrated Guide to Python 3."
            },
            {
              "seconds": 31,
              "text": "I have books on Pandas as well as the Tiny Python Notebook."
            },
            {
              "seconds": 34,
              "text": "I run a company called MetaSnake and I do Consulting and training for them."
            },
            {
              "seconds": 38,
              "text": "So I've trained companies big and small"
            },
            {
              "seconds": 41,
              "text": "and I'm really used to seeing how people cope with Python"
            },
            {
              "seconds": 44,
              "text": "and how people cope with the new features."
            },
            {
              "seconds": 46,
              "text": "I ran the Utah Python user group for five years."
            },
            {
              "seconds": 49,
              "text": "I've been using python since 2000"
            },
            {
              "seconds": 52,
              "text": "and I tweet about Python with my username @_ _mharrison_ _."
            },
            {
              "seconds": 56,
              "text": "Who is this course for?"
            },
            {
              "seconds": 58,
              "text": "Well, it's for old Python programmers"
            },
            {
              "seconds": 60,
              "text": "or those who have been using Python 2"
            },
            {
              "seconds": 62,
              "text": "and maybe have transitioned a Python 3"
            },
            {
              "seconds": 64,
              "text": "but are still programming it as if it were Python 2."
            },
            {
              "seconds": 67,
              "text": "It's also for new Python programmers, those who are just getting started"
            },
            {
              "seconds": 70,
              "text": "and want to sort of understand better the features"
            },
            {
              "seconds": 73,
              "text": "and cool syntax and benefits that Python 3 provides."
            },
            {
              "seconds": 77,
              "text": "So in general, this course is aimed for all those"
            },
            {
              "seconds": 79,
              "text": "who want to leverage the latest features of Python."
            },
            {
              "seconds": 82,
              "text": "Let's talk about what we're going to cover in this course."
            },
            {
              "seconds": 85,
              "text": "We're going to talk virtual environments"
            },
            {
              "seconds": 87,
              "text": "how you can make use of Pipenv in a Windows or Unix environment."
            },
            {
              "seconds": 91,
              "text": "We'll also be talking about Fstrings and how you can take advantage of those,"
            },
            {
              "seconds": 95,
              "text": "great new feature in Python 3."
            },
            {
              "seconds": 97,
              "text": "We'll also talk about what has changed in numbers since Python 2"
            },
            {
              "seconds": 101,
              "text": "some of the things that are happening under the covers"
            },
            {
              "seconds": 103,
              "text": "as well as some other features that you can take advantage of."
            },
            {
              "seconds": 106,
              "text": "We'll talk about classes, we'll dive into Super and learn how that works."
            },
            {
              "seconds": 111,
              "text": "We'll also talk about some of the new dunder methods in classes."
            },
            {
              "seconds": 114,
              "text": "We'll talk about functions, we'll talk about keyword only arguments"
            },
            {
              "seconds": 117,
              "text": "and we'll get into some of the fun stuff there."
            },
            {
              "seconds": 120,
              "text": "We'll look into the standard libraries"
            },
            {
              "seconds": 122,
              "text": "some of the new libraries in the standard library,"
            },
            {
              "seconds": 124,
              "text": "we'll look at the statistics module, we'll look at the enom module."
            },
            {
              "seconds": 127,
              "text": "We'll look at the pathlib module and show some examples from those."
            },
            {
              "seconds": 131,
              "text": "We'll also talk about some of the new syntax in Python 3"
            },
            {
              "seconds": 134,
              "text": "that isn't available and why you might want to use that."
            },
            {
              "seconds": 138,
              "text": "We'll look at the new async library,"
            },
            {
              "seconds": 140,
              "text": "we'll talk about how that functions under the covers, the mechanisms that that's using"
            },
            {
              "seconds": 144,
              "text": "and we'll look at cool things like asynchronous context managers,"
            },
            {
              "seconds": 147,
              "text": "asynchronous iterators and asynchronous generators."
            },
            {
              "seconds": 150,
              "text": "We'll also dive into annotations and see how you can take advantage"
            },
            {
              "seconds": 153,
              "text": "of this cool new feature to make your code more robust."
            },
            {
              "seconds": 157,
              "text": "In addition, we'll look at unicode,"
            },
            {
              "seconds": 159,
              "text": "this is native in Python 3"
            },
            {
              "seconds": 161,
              "text": "and we'll see some of the features that Python 3 supports"
            },
            {
              "seconds": 164,
              "text": "and allows you to do with the new Unicode functionality."
            },
            {
              "seconds": 167,
              "text": "We'll also look at some of the new annotation tools"
            },
            {
              "seconds": 170,
              "text": "that allow you to take advantage of the annotation syntax."
            },
            {
              "seconds": 173,
              "text": "And we'll also talk about the new features like generalized unpacking"
            },
            {
              "seconds": 178,
              "text": "and show some examples of that."
            },
            {
              "seconds": 180,
              "text": "So in addition to content, which I think is pretty good,"
            },
            {
              "seconds": 183,
              "text": "there's also a lot of labs for all these concepts"
            },
            {
              "seconds": 187,
              "text": "and you get to try your hand at these Labs"
            },
            {
              "seconds": 190,
              "text": "there are some cool self-correcting assignments that you'll get to do."
            },
            {
              "seconds": 193,
              "text": "And in addition, there are content walks through all the solutions to those"
            },
            {
              "seconds": 197,
              "text": "as well as the walks through common errors that people have"
            },
            {
              "seconds": 200,
              "text": "when they come across these things."
            },
            {
              "seconds": 202,
              "text": "It's a great way to try your hand out"
            },
            {
              "seconds": 204,
              "text": "and learn these new things and take advantage of them."
            },
            {
              "seconds": 206,
              "text": "I hope you enjoy this class and I hope that it makes your Python code"
            },
            {
              "seconds": 211,
              "text": "much cleaner, easier to read and more robust."
            },
            {
              "seconds": 214,
              "text": "Enjoy."
            }
          ]
        },
        {
          "lecture_id": 120102,
          "lecture_title": "Course resources and source code",
          "vimeo_id": 7111530185483682,
          "subtitles": [
            {
              "seconds": 1,
              "text": "I just want to share with you some motivation and some resources."
            },
            {
              "seconds": 5,
              "text": "I've taught a bunch of people Python over the years"
            },
            {
              "seconds": 7,
              "text": "and I've found that most people learn best when they can"
            },
            {
              "seconds": 10,
              "text": "in addition to just listening or watching, they can try something out."
            },
            {
              "seconds": 13,
              "text": "And so included with the course are a bunch of labs or assignments"
            },
            {
              "seconds": 16,
              "text": "for you to try out what we've talked about."
            },
            {
              "seconds": 18,
              "text": "I would advise you not to look at the solution videos"
            },
            {
              "seconds": 21,
              "text": "which are included in the course until you've tried out the labs,"
            },
            {
              "seconds": 24,
              "text": "that's going to help you get the most out of the course."
            },
            {
              "seconds": 28,
              "text": "Also, I want to give you this GitHub link here."
            },
            {
              "seconds": 30,
              "text": "This will give you all the resources for the course."
            },
            {
              "seconds": 33,
              "text": "So keep this handy while you're going through the course."
            }
          ]
        },
        {
          "lecture_id": 120103,
          "lecture_title": "Installing Python on Windows",
          "vimeo_id": 7111785294791504,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this screencast, we're going to look at how to install Python 3 on Windows 10."
            },
            {
              "seconds": 5,
              "text": "Typically, when I use Python in Windows,"
            },
            {
              "seconds": 7,
              "text": "I like to make sure that I understand how to use the prompt."
            },
            {
              "seconds": 10,
              "text": "So in order to launch the prompt you're going to go down"
            },
            {
              "seconds": 12,
              "text": "to the bottom of your taskbar"
            },
            {
              "seconds": 15,
              "text": "and where it says type here to search you can just type CMD"
            },
            {
              "seconds": 17,
              "text": "and then we'll pull up command prompt and you can run that."
            },
            {
              "seconds": 21,
              "text": "Now, you'll note here that when I type Python"
            },
            {
              "seconds": 23,
              "text": "it currently says the Python is not installed, so we want to remedy that."
            },
            {
              "seconds": 27,
              "text": "Let's go to the Python website and download Python 3."
            },
            {
              "seconds": 31,
              "text": "We're at the Python website and you can see if you scroll down a little bit"
            },
            {
              "seconds": 35,
              "text": "that there is a download link."
            },
            {
              "seconds": 38,
              "text": "We're going to click Python 3.6.4 which is the current version"
            },
            {
              "seconds": 41,
              "text": "at the time of this recording, you'll want to use"
            },
            {
              "seconds": 44,
              "text": "whatever Python 3 version is listed there below."
            },
            {
              "seconds": 48,
              "text": "Inside of here, you'll see a bunch of things listing peps and whatnot"
            },
            {
              "seconds": 53,
              "text": "and you can scroll down and we'll get the files here at the bottom."
            },
            {
              "seconds": 58,
              "text": "And typically, you'll probably want to either install"
            },
            {
              "seconds": 60,
              "text": "a Windows 64-bit or Windows 32-bit, I am going to do a window 64-bit."
            },
            {
              "seconds": 66,
              "text": "That should work on most modern machines."
            },
            {
              "seconds": 69,
              "text": "There's a couple of different versions here."
            },
            {
              "seconds": 71,
              "text": "There's what they call an embeddable zip file."
            },
            {
              "seconds": 73,
              "text": "There's an executable installer and there's a web-based installer."
            },
            {
              "seconds": 76,
              "text": "I'm going to download the executable installer."
            },
            {
              "seconds": 79,
              "text": "So just click on that and download it."
            },
            {
              "seconds": 81,
              "text": "This will download for a minute."
            },
            {
              "seconds": 84,
              "text": "After that's downloaded, you'll see that there's a file here"
            },
            {
              "seconds": 86,
              "text": "called Python 3.6.4 AMD we'll just double click on that"
            },
            {
              "seconds": 89,
              "text": "and that should install Python for us."
            },
            {
              "seconds": 92,
              "text": "Now, this is where you want to be careful."
            },
            {
              "seconds": 94,
              "text": "You'll see that there are various ways to install it"
            },
            {
              "seconds": 96,
              "text": "and one thing that you need to make sure is"
            },
            {
              "seconds": 98,
              "text": "that you click this add python 3.6 to path."
            },
            {
              "seconds": 101,
              "text": "If you don't click that, when I type Python at the command prompt, it won't find it."
            },
            {
              "seconds": 105,
              "text": "So I'm going to click that."
            },
            {
              "seconds": 107,
              "text": "I'm also going to choose customized installation"
            },
            {
              "seconds": 109,
              "text": "note that the normal installation is going to put it in this"
            },
            {
              "seconds": 111,
              "text": "C:\\Users\\matt\\AppData\\Local\\Pograms\\Python\\Python36 directory"
            },
            {
              "seconds": 115,
              "text": "and I'm just going to say customize and I'm going to install for all users."
            },
            {
              "seconds": 120,
              "text": "So it will put it in the C:\\Program Files\\Python36"
            },
            {
              "seconds": 126,
              "text": "it's going to ask if I want to install it, I'll say yes,"
            },
            {
              "seconds": 132,
              "text": "it will think for a little bit and install Python."
            },
            {
              "seconds": 136,
              "text": "Okay, it looks like it's installed. I'm just going to close this."
            },
            {
              "seconds": 141,
              "text": "Let's go back to our prompt here."
            },
            {
              "seconds": 146,
              "text": "Remember type CMD down there and let's type Python."
            },
            {
              "seconds": 149,
              "text": "You can see that after I type Python it's now put me in the Python interpreter"
            },
            {
              "seconds": 153,
              "text": "where I can execute Python code,"
            },
            {
              "seconds": 155,
              "text": "to get out of this, I type quit and that will put me back into the prompt. 02:39 Note that I can also do things such as type python -m idlelib.idle"
            },
            {
              "seconds": 165,
              "text": "and it will launch idle, this is a Python editor that comes with Python."
            },
            {
              "seconds": 171,
              "text": "Note that a couple other things that it will do"
            },
            {
              "seconds": 174,
              "text": "is that if you scroll down here you'll see that there is a Python directory here"
            },
            {
              "seconds": 180,
              "text": "and you can click on this idle here to launch idle,"
            },
            {
              "seconds": 184,
              "text": "which will launch idle that way,"
            },
            {
              "seconds": 187,
              "text": "alternatively you can launch Python by clicking this as well."
            },
            {
              "seconds": 193,
              "text": "This will open a command prompt with Python,"
            },
            {
              "seconds": 196,
              "text": "but I really prefer just to go down here and type CMD to launch Python here"
            },
            {
              "seconds": 202,
              "text": "and note that we'll talk about virtual environments."
            },
            {
              "seconds": 206,
              "text": "When I launch Idle from the launcher here, we're using the system idle"
            },
            {
              "seconds": 210,
              "text": "and when we start using virtual environments"
            },
            {
              "seconds": 213,
              "text": "we'll probably want to launch idle"
            },
            {
              "seconds": 215,
              "text": "or other programs from our virtual environment."
            },
            {
              "seconds": 217,
              "text": "So rather than launch it from there,"
            },
            {
              "seconds": 220,
              "text": "I prefer using this Python -m idlelib.idle to launch idle."
            },
            {
              "seconds": 226,
              "text": "Great, hopefully after you've done this"
            },
            {
              "seconds": 228,
              "text": "you've been able to get Python on your Windows 10 machine working."
            }
          ]
        },
        {
          "lecture_id": 120104,
          "lecture_title": "Video player: A quick feature tour",
          "vimeo_id": 232533419,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Welcome to your course i want to take just a quick moment to take you on"
            },
            {
              "seconds": 4,
              "text": "a tour, the video player in all of its features so that you get the"
            },
            {
              "seconds": 7,
              "text": "most out of this entire course and all the courses you take with us so you'll"
            },
            {
              "seconds": 11,
              "text": "start your course page of course,"
            },
            {
              "seconds": 12,
              "text": "and you can see that it graze out and collapses the work they've already done so"
            },
            {
              "seconds": 17,
              "text": "let's, go to the next video here opens up this separate player and you could"
            },
            {
              "seconds": 21,
              "text": "see it a standard video player stuff you can pause for play you can actually skip"
            },
            {
              "seconds": 27,
              "text": "back a few seconds or skip forward a few more you can jump to the next"
            },
            {
              "seconds": 31,
              "text": "or previous lecture things like that shows you which chapter in which lecture topic you're learning"
            },
            {
              "seconds": 36,
              "text": "right now and as other cool stuff like take me to the course page,"
            },
            {
              "seconds": 39,
              "text": "show me the full transcript dialogue for this lecture take me to get home repo where"
            },
            {
              "seconds": 44,
              "text": "the source code for this course lives and even do full text search and when we"
            },
            {
              "seconds": 48,
              "text": "have transcripts that's searching every spoken word in the entire video not just titles and description"
            },
            {
              "seconds": 55,
              "text": "that things like that also some social media stuff up there as well."
            },
            {
              "seconds": 59,
              "text": "For those of you who have a hard time hearing or don't speak english is your"
            },
            {
              "seconds": 64,
              "text": "first language we have subtitles from the transcripts,"
            },
            {
              "seconds": 67,
              "text": "so if you turn on subtitles right here,"
            },
            {
              "seconds": 70,
              "text": "you'll be able to follow along as this words are spoken on the screen."
            },
            {
              "seconds": 74,
              "text": "I know that could be a big help to some of you just cause this is"
            },
            {
              "seconds": 76,
              "text": "a web app doesn't mean you can't use your keyboard."
            },
            {
              "seconds": 78,
              "text": "You want a pause and play?"
            },
            {
              "seconds": 80,
              "text": "Use your space bar to top of that,"
            },
            {
              "seconds": 82,
              "text": "you want to skip ahead or backwards left arrow,"
            },
            {
              "seconds": 84,
              "text": "right? Our next lecture shift left shift,"
            },
            {
              "seconds": 87,
              "text": "right went to toggle subtitles just hit s and if you wonder what all the hockey"
            },
            {
              "seconds": 91,
              "text": "star and click this little thing right here,"
            },
            {
              "seconds": 93,
              "text": "it'll bring up a dialogue with all the hockey options."
            },
            {
              "seconds": 96,
              "text": "Finally, you may be watching this on a tablet or even a phone,"
            },
            {
              "seconds": 99,
              "text": "hopefully a big phone, but you might be watching this in some sort of touch"
            },
            {
              "seconds": 102,
              "text": "screen device. If that's true,"
            },
            {
              "seconds": 104,
              "text": "you're probably holding with your thumb,"
            },
            {
              "seconds": 106,
              "text": "so you click right here. Seek back ten seconds right there to seek ahead thirty"
            },
            {
              "seconds": 109,
              "text": "and, of course, click in the middle to toggle play or pause now on"
            },
            {
              "seconds": 113,
              "text": "ios because the way i was works,"
            },
            {
              "seconds": 116,
              "text": "they don't let you auto start playing videos,"
            },
            {
              "seconds": 118,
              "text": "so you may have to click right in the middle here."
            },
            {
              "seconds": 120,
              "text": "Start each lecture on iowa's that's a player now go enjoy that core."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12002,
      "chapter_title": "Virtual Environments",
      "lectures": [
        {
          "lecture_id": 120201,
          "lecture_title": "Installing Pipenv on Windows",
          "vimeo_id": 7111968730331063,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video, we're going to look at how to install the tool pipenv,"
            },
            {
              "seconds": 3,
              "text": "which is the recommended way to install Python packages"
            },
            {
              "seconds": 6,
              "text": "and create virtual environments in Python 3."
            },
            {
              "seconds": 9,
              "text": "This is kind of tricky to install on windows, so I'll show you how we do it."
            },
            {
              "seconds": 13,
              "text": "First let's launch a command prompt by typing cmd into the search box here"
            },
            {
              "seconds": 17,
              "text": "and we'll see that we don't have access to pipenv right now,"
            },
            {
              "seconds": 21,
              "text": "but we do have access to Python."
            },
            {
              "seconds": 23,
              "text": "Okay, so we have Python installed, but we don't have pipenv installed."
            },
            {
              "seconds": 27,
              "text": "So let's install pipenv."
            },
            {
              "seconds": 30,
              "text": "Pipenv wraps virtual environment creation"
            },
            {
              "seconds": 32,
              "text": "and pip utility into one nice little command line tool"
            },
            {
              "seconds": 38,
              "text": "and in order to use it, we have to install it"
            },
            {
              "seconds": 41,
              "text": "so we can install it using Python and saying -m I want to run the module pip"
            },
            {
              "seconds": 47,
              "text": "install pipenv and we'll try and install it here."
            },
            {
              "seconds": 51,
              "text": "When I'm running this command, it's installing it into the system Python."
            },
            {
              "seconds": 55,
              "text": "It's going to think for a while but it's going to give me an error"
            },
            {
              "seconds": 58,
              "text": "because it couldn't install it into a certain directory"
            },
            {
              "seconds": 60,
              "text": "because it doesn't have access to do that,"
            },
            {
              "seconds": 62,
              "text": "and that might seem annoying or problematic"
            },
            {
              "seconds": 65,
              "text": "but it can be okay as well because what it allows us to do is"
            },
            {
              "seconds": 69,
              "text": "sandbox our system install and not have any user trampling on top of it."
            },
            {
              "seconds": 76,
              "text": "I want to install it, instead it's doing what's called a user install."
            },
            {
              "seconds": 79,
              "text": "So I'll show you how to do that."
            },
            {
              "seconds": 81,
              "text": "Rather than saying python -m pip install pipenv,"
            },
            {
              "seconds": 85,
              "text": "I'm going to add a --user option here"
            },
            {
              "seconds": 88,
              "text": "and this is going to try and install it again."
            },
            {
              "seconds": 94,
              "text": "And it looks like it worked this time."
            },
            {
              "seconds": 95,
              "text": "Let's try and run pipenv and we can see that pipenv did not run."
            },
            {
              "seconds": 99,
              "text": "Why didn't it run? It's because our path can't find it,"
            },
            {
              "seconds": 103,
              "text": "because we did a user install the directory"
            },
            {
              "seconds": 105,
              "text": "where a user install binary is installed is not in our path."
            },
            {
              "seconds": 109,
              "text": "We can look at our path by saying echo %path%"
            },
            {
              "seconds": 113,
              "text": "and we can see also where the path that the user install goes in"
            },
            {
              "seconds": 117,
              "text": "by saying Python -m site --user-base."
            },
            {
              "seconds": 123,
              "text": "So inside of this app data roaming Python"
            },
            {
              "seconds": 126,
              "text": "is a directory that has our new pipenv guy, let's look at that."
            },
            {
              "seconds": 131,
              "text": "It's going to say dir app data roaming Python"
            },
            {
              "seconds": 135,
              "text": "and inside of Python there's a Python 3.6 directory"
            },
            {
              "seconds": 137,
              "text": "and inside that, there's a scripts directory"
            },
            {
              "seconds": 140,
              "text": "and that's where our pipenv executable is."
            },
            {
              "seconds": 142,
              "text": "So what I want to do is copy this directory right here"
            },
            {
              "seconds": 145,
              "text": "I'll just highlight it and hit enter and if I go down here into my search box"
            },
            {
              "seconds": 149,
              "text": "and type env, that will allow me to update my environment variable."
            },
            {
              "seconds": 153,
              "text": "I'll just click at the bottom there, environment variable"
            },
            {
              "seconds": 155,
              "text": "click on path and say edit"
            },
            {
              "seconds": 158,
              "text": "and I'm going to say new I want to add a new environment variable path"
            },
            {
              "seconds": 162,
              "text": "and just paste in what I copied there."
            },
            {
              "seconds": 164,
              "text": "I can say edit. Okay. Okay. Okay,"
            },
            {
              "seconds": 167,
              "text": "now note that pipenv will not work in this command prompt."
            },
            {
              "seconds": 170,
              "text": "So I'm going to close it, but I'll launch another one here"
            },
            {
              "seconds": 173,
              "text": "by typing cmd into the search box."
            },
            {
              "seconds": 175,
              "text": "I should have access to pipenv now."
            },
            {
              "seconds": 178,
              "text": "So this video showed you how to install pip in a local install"
            },
            {
              "seconds": 182,
              "text": "and how to update your path"
            },
            {
              "seconds": 184,
              "text": "so that you have access to it from the command prompt."
            }
          ]
        },
        {
          "lecture_id": 120202,
          "lecture_title": "Virtual Environments and Pip",
          "vimeo_id": 7111746103414074,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about virtual environments and pip."
            },
            {
              "seconds": 3,
              "text": "A virtual environment is a mechanism that Python provides"
            },
            {
              "seconds": 7,
              "text": "to allow per project dependency."
            },
            {
              "seconds": 10,
              "text": "When we install Python, we get what we call the system Python installed"
            },
            {
              "seconds": 13,
              "text": "or if you have a machine that comes shipped with Python"
            },
            {
              "seconds": 16,
              "text": "there is a version of Python installed and you can install packages into that,"
            },
            {
              "seconds": 20,
              "text": "but you probably don't want to and we'll explain why."
            },
            {
              "seconds": 23,
              "text": "Virtual environment allows us to isolate our dependencies based on a project,"
            },
            {
              "seconds": 28,
              "text": "and it allows us to easily install and upgrade those dependencies."
            },
            {
              "seconds": 32,
              "text": "One example of why we might not want"
            },
            {
              "seconds": 34,
              "text": "to use our system Python is illustrated here"
            },
            {
              "seconds": 38,
              "text": "assume that I'm working on a project that requires Django 2.0"
            },
            {
              "seconds": 42,
              "text": "and later a year or so after that, my boss comes in and tells me"
            },
            {
              "seconds": 46,
              "text": "he wants me to work on a new project"
            },
            {
              "seconds": 48,
              "text": "and I want to use Django 3.4 the current version of Django at the time."
            },
            {
              "seconds": 53,
              "text": "If I've installed Django 2 on my system environment."
            },
            {
              "seconds": 55,
              "text": "I now need to install Django 3.4 on top of that"
            },
            {
              "seconds": 59,
              "text": "and that can bring in the whole bunch of dependencies and whatnot"
            },
            {
              "seconds": 62,
              "text": "essentially making it so my old project won't work anymore,"
            },
            {
              "seconds": 66,
              "text": "which could be fine, if I'm working on a new project."
            },
            {
              "seconds": 68,
              "text": "But what happens when my boss says,"
            },
            {
              "seconds": 70,
              "text": "oh, I need you to fix that bug in the old project."
            },
            {
              "seconds": 73,
              "text": "Well, then you've got to go in and uninstall Django 3"
            },
            {
              "seconds": 75,
              "text": "and all the dependencies and install Django 2,"
            },
            {
              "seconds": 78,
              "text": "it turns into somewhat of a headache."
            },
            {
              "seconds": 80,
              "text": "So solution to that is to use these virtual environments"
            },
            {
              "seconds": 82,
              "text": "and that allows us to on a per project basis"
            },
            {
              "seconds": 85,
              "text": "create an environment for Python and so we can have"
            },
            {
              "seconds": 88,
              "text": "one for our old Django 2.0 project and have another one for our new one"
            },
            {
              "seconds": 93,
              "text": "that our boss tells us to create."
            },
            {
              "seconds": 95,
              "text": "Using these virtual environments we can easily switch"
            },
            {
              "seconds": 97,
              "text": "between these two different versions and use the appropriate one very easily."
            },
            {
              "seconds": 102,
              "text": "Here's how we create a virtual environment."
            },
            {
              "seconds": 104,
              "text": "I'm going to run Python with -m switch,"
            },
            {
              "seconds": 108,
              "text": "the -m swicth allows me to run a module that's included"
            },
            {
              "seconds": 111,
              "text": "in the standard library in the Python path,"
            },
            {
              "seconds": 113,
              "text": "in this case it's going to run the venv module."
            },
            {
              "seconds": 116,
              "text": "And we're going to pass in a path where we want the virtual environment to live."
            },
            {
              "seconds": 121,
              "text": "This can be any path and I like to put it in a directory called .venv"
            },
            {
              "seconds": 129,
              "text": "in the same directory as my project, I'll tell you why in a minute."
            },
            {
              "seconds": 135,
              "text": "After we've created this virtual environment, it might take a while."
            },
            {
              "seconds": 138,
              "text": "What Python is going to do is it's going to make"
            },
            {
              "seconds": 140,
              "text": "a directory structure in there that has a binary directory"
            },
            {
              "seconds": 144,
              "text": "where there's a Python and a pip in there"
            },
            {
              "seconds": 147,
              "text": "and it's going to make a library directory"
            },
            {
              "seconds": 150,
              "text": "and it's going to also give us a tool that allows us to activate our virtual environment"
            },
            {
              "seconds": 154,
              "text": "and when we activate it, what it's going to do,"
            },
            {
              "seconds": 156,
              "text": "it's going to shim in our path where our new binaries are found into our path variable."
            },
            {
              "seconds": 161,
              "text": "So when you run Python, we're no longer running the system Python,"
            },
            {
              "seconds": 164,
              "text": "but we're running the Python in a virtual environment."
            },
            {
              "seconds": 167,
              "text": "And you can see on bash systems when we run this"
            },
            {
              "seconds": 169,
              "text": "command source with the path to this new environment"
            },
            {
              "seconds": 173,
              "text": "and then there's an activate script in there"
            },
            {
              "seconds": 176,
              "text": "when we run that, we can see that our shell"
            },
            {
              "seconds": 178,
              "text": "will tell us the name of the virtual environment we are in."
            },
            {
              "seconds": 181,
              "text": "In this case, we can see that the env matches the env"
            },
            {
              "seconds": 186,
              "text": "that we passed in to the command line."
            },
            {
              "seconds": 188,
              "text": "On Windows, we do a similar thing, we can pass in the full path."
            },
            {
              "seconds": 191,
              "text": "If you have multiple versions of Python installed"
            },
            {
              "seconds": 194,
              "text": "you can use the full path to Python."
            },
            {
              "seconds": 196,
              "text": "And again, we're going to do the -m with the venv module,"
            },
            {
              "seconds": 199,
              "text": "and we give it the path to where we want to create our virtual environment."
            },
            {
              "seconds": 203,
              "text": "Once we've created that virtual environment in Windows,"
            },
            {
              "seconds": 206,
              "text": "because we don't have source we run this bat file here,"
            },
            {
              "seconds": 211,
              "text": "which is in a scripts directory."
            },
            {
              "seconds": 213,
              "text": "And if you run that, you'll see that that updates your prompt as well."
            },
            {
              "seconds": 216,
              "text": "Just to clarify the -m swich, this will execute a module"
            },
            {
              "seconds": 219,
              "text": "that's found in your Python path,"
            },
            {
              "seconds": 222,
              "text": "why we use this instead of using a pip executable or virtual env executable"
            },
            {
              "seconds": 227,
              "text": "is it allows us to make sure that we know"
            },
            {
              "seconds": 230,
              "text": "which version of Python we're using to create our virtual environment"
            },
            {
              "seconds": 233,
              "text": "on systems where you might have multiple versions installed."
            },
            {
              "seconds": 236,
              "text": "this can be pretty handy."
            },
            {
              "seconds": 238,
              "text": "Once we have a virtual environment what we do inside of it?"
            },
            {
              "seconds": 240,
              "text": "Typically we install things, so there's a couple commands"
            },
            {
              "seconds": 243,
              "text": "we can say pip install foo to install package foo,"
            },
            {
              "seconds": 246,
              "text": "we can create a requirements file if we want to"
            },
            {
              "seconds": 249,
              "text": "we can say install -e and that will install our package in edit mode,"
            },
            {
              "seconds": 253,
              "text": "it allows us to have our package in the Python path, but also update it"
            },
            {
              "seconds": 257,
              "text": "and when we update it will get live code essentially in our Python path."
            },
            {
              "seconds": 262,
              "text": "We can also say pip freeze and that will list"
            },
            {
              "seconds": 264,
              "text": "all of the packages that are installed in a virtual environment"
            },
            {
              "seconds": 267,
              "text": "and we can also uninstall libraries, which can be nice."
            },
            {
              "seconds": 270,
              "text": "One thing to be aware of is if you've created a virtual environment"
            },
            {
              "seconds": 273,
              "text": "just running pip doesn't ensure that you're going to install something"
            },
            {
              "seconds": 277,
              "text": "into that virtual environment,"
            },
            {
              "seconds": 279,
              "text": "you either need to be using the pip that's located in the virtual environment"
            },
            {
              "seconds": 282,
              "text": "or have your virtual environment activated"
            },
            {
              "seconds": 285,
              "text": "so that the pip for that virtual environment is shimmed in the path"
            },
            {
              "seconds": 288,
              "text": "and that's what's getting called when you call pip,"
            },
            {
              "seconds": 291,
              "text": "so just make sure that you know which pip you're running."
            },
            {
              "seconds": 293,
              "text": "Let's talk about a tool called pipenv,"
            },
            {
              "seconds": 298,
              "text": "as of post Python 3.6 pipenv is now"
            },
            {
              "seconds": 300,
              "text": "according to the Python.org documentation"
            },
            {
              "seconds": 302,
              "text": "the recommended tool for managing dependencies."
            },
            {
              "seconds": 305,
              "text": "What is pipenv?"
            },
            {
              "seconds": 307,
              "text": "Pipenv is a tool that basically allows you to do virtual env"
            },
            {
              "seconds": 311,
              "text": "and pip in one command line, we'll see some examples of that."
            },
            {
              "seconds": 315,
              "text": "Now this is a third party tool, so it's not included in Python 3.6."
            },
            {
              "seconds": 320,
              "text": "So you need to install it, again, we're going to use this -m module"
            },
            {
              "seconds": 325,
              "text": "we're going to say Python 3 -m pip install"
            },
            {
              "seconds": 329,
              "text": "and we're going to also use a --user option on the command line here"
            },
            {
              "seconds": 333,
              "text": "what the -- user option says, is it says I want you to install this package,"
            },
            {
              "seconds": 338,
              "text": "but I don't want you to install it into the system Python"
            },
            {
              "seconds": 341,
              "text": "I want you to install it into a user directory that your user has access to"
            },
            {
              "seconds": 347,
              "text": "but other users might not have access to."
            },
            {
              "seconds": 349,
              "text": "It allows you to get around having to be root to install packages."
            },
            {
              "seconds": 352,
              "text": "Now that might be problematic,"
            },
            {
              "seconds": 355,
              "text": "because probably wherever Python is going to install this pipenv"
            },
            {
              "seconds": 361,
              "text": "user package is not going to be in your path"
            },
            {
              "seconds": 365,
              "text": "and you want the pipenv tool to be in your path."
            },
            {
              "seconds": 368,
              "text": "So you're going to have to do some things after that."
            },
            {
              "seconds": 370,
              "text": "Yeah, this is a little bit more convoluted and not quite as easy as it could be"
            },
            {
              "seconds": 374,
              "text": "but bear with me and you'll only have to do this once."
            },
            {
              "seconds": 378,
              "text": "You want to know where your user base is or where this user path is"
            },
            {
              "seconds": 382,
              "text": "you can run this command here Python 3 -m site -- user-base"
            },
            {
              "seconds": 386,
              "text": "and that will tell you the directory of where your user base is"
            },
            {
              "seconds": 390,
              "text": "and on Unix systems, if you add bin to that"
            },
            {
              "seconds": 394,
              "text": "or on Windows systems, if you add Python 3.6 scripts to that"
            },
            {
              "seconds": 397,
              "text": "that will be the path where pipenv will be located."
            },
            {
              "seconds": 401,
              "text": "So you'll need to do something like this"
            },
            {
              "seconds": 403,
              "text": "on a Unix system in your .bash profile file,"
            },
            {
              "seconds": 406,
              "text": "you'll need to update that and add into the path this new directory here"
            },
            {
              "seconds": 411,
              "text": "and then you can source that and you'll have access to your user pipenv."
            },
            {
              "seconds": 416,
              "text": "On Windows systems, it's a similar process"
            },
            {
              "seconds": 419,
              "text": "though typically not done through editing files."
            },
            {
              "seconds": 422,
              "text": "You need to go down to your search box and type env in there"
            },
            {
              "seconds": 426,
              "text": "in the path environment variable, you want to update that"
            },
            {
              "seconds": 429,
              "text": "and add the user base with the addition of Python 3.6"
            },
            {
              "seconds": 433,
              "text": "and scripts on the end of that."
            },
            {
              "seconds": 435,
              "text": "That point, if you relaunch the command prompt by typing cmd in the search box,"
            },
            {
              "seconds": 437,
              "text": "you should be able to type pipenv and have access to it."
            },
            {
              "seconds": 441,
              "text": "Here's an example of using pipenv."
            },
            {
              "seconds": 443,
              "text": "I've created a directory called blockchain,"
            },
            {
              "seconds": 445,
              "text": "this is on Unix, but you can do similar things on Windows."
            },
            {
              "seconds": 448,
              "text": "I'm going to change into that directory,"
            },
            {
              "seconds": 451,
              "text": "and now, inside of that directory, I'm going to say pipenv install py.test"
            },
            {
              "seconds": 455,
              "text": "what that does, is it goes out and because I called pipenv"
            },
            {
              "seconds": 458,
              "text": "it's going to create a virtual environment for me"
            },
            {
              "seconds": 461,
              "text": "and it's going to install py.test into that virtual environment."
            },
            {
              "seconds": 465,
              "text": "If I look in the current directory after I run this,"
            },
            {
              "seconds": 468,
              "text": "this directory was brand-new, I just created it,"
            },
            {
              "seconds": 471,
              "text": "I'll see two files, I'll see a file called pipfile and the file called pipfile. lock."
            },
            {
              "seconds": 475,
              "text": "That's what pipenv has created for me."
            },
            {
              "seconds": 477,
              "text": "It's also done some other things behind the scenes."
            },
            {
              "seconds": 479,
              "text": "It's created a virtual environment for me."
            },
            {
              "seconds": 481,
              "text": "Let's talk about pipfile. Pipfile is a new way of specifying dependencies."
            },
            {
              "seconds": 486,
              "text": "It supersedes the old requirements.txt file."
            },
            {
              "seconds": 490,
              "text": "One of the nice things about pipfile"
            },
            {
              "seconds": 492,
              "text": "is that it allows you to support a dev environment"
            },
            {
              "seconds": 495,
              "text": "and a default or production environment in a single pipfile"
            },
            {
              "seconds": 499,
              "text": "and this basically says if you're developing this library,"
            },
            {
              "seconds": 503,
              "text": "then you'll want to install the dev dependencies."
            },
            {
              "seconds": 506,
              "text": "If you're deploying it for production or whatnot,"
            },
            {
              "seconds": 508,
              "text": "you'll just want the default dependencies."
            },
            {
              "seconds": 510,
              "text": "There's the other file there, the pipfile.lock"
            },
            {
              "seconds": 512,
              "text": "and that stores the installation details about what libraries you have"
            },
            {
              "seconds": 517,
              "text": "and it has hashes and versions in there, so you can make sure"
            },
            {
              "seconds": 520,
              "text": "that when you recreate a virtual environment using this file"
            },
            {
              "seconds": 523,
              "text": "that you have the exact same libraries installed."
            },
            {
              "seconds": 527,
              "text": "When you run this pipenv tool, it's also going to create a virtual environment"
            },
            {
              "seconds": 531,
              "text": "and on my system, it threw it into this .local\\ share\\ virtualenvs directory"
            },
            {
              "seconds": 536,
              "text": "and inside of there, it created a directory called blockchain"
            },
            {
              "seconds": 540,
              "text": "with a unique identifier after it."
            },
            {
              "seconds": 543,
              "text": "If you want to have pip recognize another directory,"
            },
            {
              "seconds": 546,
              "text": "it will recognize a .venv directory that is in your current project,"
            },
            {
              "seconds": 551,
              "text": "if you have this environment variable pipenv_venv in project set"
            },
            {
              "seconds": 557,
              "text": "so you can set that using the set command in Windows"
            },
            {
              "seconds": 561,
              "text": "or you can just say pipenv_venv_in_projet=1"
            },
            {
              "seconds": 568,
              "text": "right before your pipenv command and it will"
            },
            {
              "seconds": 571,
              "text": "recognize .venv virtual environment if you've got one."
            },
            {
              "seconds": 575,
              "text": "A couple commands for using pipenv"
            },
            {
              "seconds": 577,
              "text": "you can say pipenv run python and note that"
            },
            {
              "seconds": 580,
              "text": "my environment here is not activated, my virtual environment,"
            },
            {
              "seconds": 584,
              "text": "but because I'm using pipenv, pipenv has some logic to know"
            },
            {
              "seconds": 588,
              "text": "that I am in a directory that has a virtual environment associated with it"
            },
            {
              "seconds": 592,
              "text": "and so will launch the right Python there."
            },
            {
              "seconds": 595,
              "text": "If I want to activate my virtual environment,"
            },
            {
              "seconds": 597,
              "text": "I can say pipenv shell and that will activate it,"
            },
            {
              "seconds": 599,
              "text": "note that this command will work in Unix and Windows."
            },
            {
              "seconds": 603,
              "text": "A couple of other commands that we can do with pipenv,"
            },
            {
              "seconds": 605,
              "text": "we can say pipenv --venv and that will give us the location"
            },
            {
              "seconds": 609,
              "text": "of where our virtual environment is."
            },
            {
              "seconds": 611,
              "text": "We can say --py and that tells us which Python it's going to run"
            },
            {
              "seconds": 615,
              "text": "we can install a package and we can install it"
            },
            {
              "seconds": 618,
              "text": "with a dev dependency by putting --dev after it."
            },
            {
              "seconds": 621,
              "text": "Cool thing that we can do with pipenv is we can say graph"
            },
            {
              "seconds": 623,
              "text": "and that will create a dependency graph to tell us"
            },
            {
              "seconds": 626,
              "text": "what our dependencies depend on,"
            },
            {
              "seconds": 628,
              "text": "we can lock our dependencies by calling pipenv lock."
            },
            {
              "seconds": 631,
              "text": "And we can uninstall package as well."
            },
            {
              "seconds": 634,
              "text": "I hope that you've learned a little bit more"
            },
            {
              "seconds": 636,
              "text": "about virtual environments and pip and pipenv."
            },
            {
              "seconds": 639,
              "text": "If you haven't tried using these tools, please try them."
            },
            {
              "seconds": 642,
              "text": "Again, as I said, pipenv is now the recommended tool"
            },
            {
              "seconds": 645,
              "text": "to use moving forward so you should get used to using that tool."
            }
          ]
        },
        {
          "lecture_id": 120203,
          "lecture_title": "Walk-through: Virtual Environments and Pip (Windows)",
          "vimeo_id": 7111910502405065,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video, we're going to look at the venv_test assignment."
            },
            {
              "seconds": 4,
              "text": "I'm on Windows, so I'm going to start a command prompt"
            },
            {
              "seconds": 7,
              "text": "and I'm going to change into the directory where I have my Python files installed here."
            },
            {
              "seconds": 14,
              "text": "I've got a labs directory here."
            },
            {
              "seconds": 17,
              "text": "We're going to do venv_tests so let's just look and see what that says."
            },
            {
              "seconds": 21,
              "text": "It says use pipenv to create a virtual environment"
            },
            {
              "seconds": 25,
              "text": "and install pytest, run pytest on this file."
            },
            {
              "seconds": 29,
              "text": "Right now I can't even run pytest because it's not installed"
            },
            {
              "seconds": 33,
              "text": "and I want to create a virtual environment to do that."
            },
            {
              "seconds": 36,
              "text": "One of the things that I like to do"
            },
            {
              "seconds": 38,
              "text": "is to put the virtual environment in the same directory,"
            },
            {
              "seconds": 40,
              "text": "and if you want to do that, you have to name your virtual environment .venv"
            },
            {
              "seconds": 45,
              "text": "I can use either virtual env or I can use pipenv to do this."
            },
            {
              "seconds": 49,
              "text": "I'll show you how to do it with pipenv."
            },
            {
              "seconds": 52,
              "text": "So in order to do it with pipenv, we need to create an environment variable"
            },
            {
              "seconds": 54,
              "text": "and the environment variable is pipenv_venv_in_project."
            },
            {
              "seconds": 61,
              "text": "So we're just going to say that set that equal to 1, if we want to inspect that"
            },
            {
              "seconds": 65,
              "text": "we can say echo %pipenv_venv_in_project and we can see that that is now set."
            },
            {
              "seconds": 72,
              "text": "And since I have pipenv installed, I can say pipenv install py.test"
            },
            {
              "seconds": 78,
              "text": "and it will think for a minute and it will create a virtual environment and then install py.test."
            },
            {
              "seconds": 84,
              "text": "Okay, so it looks like it worked."
            },
            {
              "seconds": 87,
              "text": "If you recall one of the things we can do is we can take pipenv --venv"
            },
            {
              "seconds": 92,
              "text": "and it will tell us where our environment is and it says it's in this current directory."
            },
            {
              "seconds": 96,
              "text": "Awesome. If we want to activate it we can say pipenv shell and now we are activated,"
            },
            {
              "seconds": 103,
              "text": "we're in our environment here, let's just type pytest venv_test.py"
            },
            {
              "seconds": 116,
              "text": "and we can see that it now succeeds, it ran."
            },
            {
              "seconds": 120,
              "text": "I will also show you that I should be able to import pytest and it seems to work here"
            },
            {
              "seconds": 126,
              "text": "if I exit out of this guy and I say Python and I say import pytest"
            },
            {
              "seconds": 133,
              "text": "I get no module named pytest,"
            },
            {
              "seconds": 137,
              "text": "this is because I'm now using the system Python,"
            },
            {
              "seconds": 139,
              "text": "I'm not using the virtual Python."
            },
            {
              "seconds": 141,
              "text": "And we can see that we have created in our directory, I need to type dir,"
            },
            {
              "seconds": 149,
              "text": "we have created in here a virtual environment in our directory called .venv"
            },
            {
              "seconds": 153,
              "text": "simply by setting that environment variable"
            },
            {
              "seconds": 156,
              "text": "and that's all there is to do for this assignment."
            },
            {
              "seconds": 158,
              "text": "You just need to make sure that it runs, it doesn't give you any errors"
            },
            {
              "seconds": 162,
              "text": "and we have done that so we're good to go."
            }
          ]
        },
        {
          "lecture_id": 120204,
          "lecture_title": "Walk-through: Virtual Environments and Pip (Unix)",
          "vimeo_id": 7111240473707772,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at the venv test assignment"
            },
            {
              "seconds": 3,
              "text": "and we're going to do on Unix system so that'll work on Linux or Mac systems."
            },
            {
              "seconds": 8,
              "text": "I've got the files downloaded from the labs here."
            },
            {
              "seconds": 12,
              "text": "Let's look at the venv test lab"
            },
            {
              "seconds": 15,
              "text": "and you can see there's the assignment in that comment"
            },
            {
              "seconds": 17,
              "text": "under the test venv function that says"
            },
            {
              "seconds": 20,
              "text": "use pipenv to create a virtual environment and install pytest"
            },
            {
              "seconds": 22,
              "text": "activate your virtual environment and run pytest on this file"
            },
            {
              "seconds": 26,
              "text": "by invoking python venv test.py"
            },
            {
              "seconds": 30,
              "text": "You'll note that this will run pytest because at the bottom there"
            },
            {
              "seconds": 34,
              "text": "we've got the check for if the __name__ attribute is the string __main__"
            },
            {
              "seconds": 37,
              "text": "import pytest and invoke pytest.main on the file."
            },
            {
              "seconds": 41,
              "text": "So let's do that, I'm going to create what's called a user install."
            },
            {
              "seconds": 46,
              "text": "If you don't have access right to your system or install into your system python,"
            },
            {
              "seconds": 51,
              "text": "you might need to do a user install, it has a few more steps, so this is how we do it."
            },
            {
              "seconds": 55,
              "text": "We say Python 3 -m pip install --user and we're going to install pipenv."
            },
            {
              "seconds": 63,
              "text": "Okay, it looks like that installed."
            },
            {
              "seconds": 67,
              "text": "Now what I need to do is be able to access the pipenv command-line utility"
            },
            {
              "seconds": 72,
              "text": "and because I installed that in a user install, python installed in a certain place,"
            },
            {
              "seconds": 77,
              "text": "I'll show you where it came. Python -m I'm going to invoke the site module"
            },
            {
              "seconds": 81,
              "text": "and say user-base, that says that it put it in my home directory"
            },
            {
              "seconds": 88,
              "text": "in library Python 3."
            },
            {
              "seconds": 90,
              "text": "So in there, I should see a bin pipenv executable."
            },
            {
              "seconds": 95,
              "text": "Let's see if that exists in the bin directory and there is a pipenv."
            },
            {
              "seconds": 101,
              "text": "So now what I want to do is I want to make sure that this bin directory is in my path."
            },
            {
              "seconds": 105,
              "text": "So I'm going to update my .bash profile."
            },
            {
              "seconds": 108,
              "text": "I'll just show you how I update it."
            },
            {
              "seconds": 114,
              "text": "It looks like that, and once you've updated that"
            },
            {
              "seconds": 117,
              "text": "you can source that file and you should be able to say which pipenv"
            },
            {
              "seconds": 125,
              "text": "and it should tell you that it's using the user-installed pipenv."
            },
            {
              "seconds": 129,
              "text": "Great, at this point, I'm ready to use pipenv"
            },
            {
              "seconds": 132,
              "text": "and note that I'm in my directory, where I want to create the virtual environment,"
            },
            {
              "seconds": 136,
              "text": "I want to do it in the lab directory."
            },
            {
              "seconds": 138,
              "text": "If you don't create it from inside the directory you want to"
            },
            {
              "seconds": 141,
              "text": "you might have problems activating it automatically using the pipenv tool."
            },
            {
              "seconds": 146,
              "text": "So make sure you're in the right directory here."
            },
            {
              "seconds": 148,
              "text": "All you have to say is pipenv install pytest."
            },
            {
              "seconds": 153,
              "text": "So it says it's creating a virtual environment for the project and it's installing pytest."
            },
            {
              "seconds": 161,
              "text": "You can see up at the very top it says"
            },
            {
              "seconds": 164,
              "text": "where the directory is in the virtual environment,"
            },
            {
              "seconds": 166,
              "text": "it's in my home directory in the .local folder."
            },
            {
              "seconds": 169,
              "text": "So if I just list the contents of the home directory,"
            },
            {
              "seconds": 172,
              "text": "I'm not going to see that because it starts with a period"
            },
            {
              "seconds": 175,
              "text": "so I have to do an ls-al to actually get the local directory there."
            },
            {
              "seconds": 185,
              "text": "And you can see up at the top here,"
            },
            {
              "seconds": 189,
              "text": "there's a .local directory there."
            },
            {
              "seconds": 194,
              "text": "Okay, so inside of that local directory,"
            },
            {
              "seconds": 200,
              "text": "there's a shared directory and then there's virtual environments inside of there"
            },
            {
              "seconds": 203,
              "text": "and it created this guy right here, talkpy3 -labs"
            },
            {
              "seconds": 206,
              "text": "and if you look, there's a bin directory and there's an activate guy in there."
            },
            {
              "seconds": 211,
              "text": "We're not going to run this the traditional way,"
            },
            {
              "seconds": 213,
              "text": "we're going to use the pipenv tooling to activate this."
            },
            {
              "seconds": 215,
              "text": "So how we activate with pipenv is we say pipenv shell."
            },
            {
              "seconds": 219,
              "text": "And you'll see that it says it's spawning an environment"
            },
            {
              "seconds": 223,
              "text": "and it says use exit to leave."
            },
            {
              "seconds": 225,
              "text": "So in this case, we don't use deactivate"
            },
            {
              "seconds": 227,
              "text": "which is the traditional virtual environment command to leave the shell"
            },
            {
              "seconds": 230,
              "text": "we're going to use exit and also note that it updated our prompt here"
            },
            {
              "seconds": 234,
              "text": "and it said that we're using this environment here."
            },
            {
              "seconds": 237,
              "text": "You'll also note that when we ran pipenv,"
            },
            {
              "seconds": 240,
              "text": "it created these two files here pipfile and pipfile.lock"
            },
            {
              "seconds": 243,
              "text": "Let's just look at pipfile and you can see that it says that it has installed pytest,"
            },
            {
              "seconds": 250,
              "text": "we can look at the lock file."
            },
            {
              "seconds": 254,
              "text": "The lock file has hashes for all the different libraries that we've installed."
            },
            {
              "seconds": 258,
              "text": "So if we want to get specific libraries reinstalled,"
            },
            {
              "seconds": 261,
              "text": "it's going to check those hashes to make sure that they're the same versions,"
            },
            {
              "seconds": 264,
              "text": "nice little feature here."
            },
            {
              "seconds": 266,
              "text": "Okay at this point, I should have pytest, let's see if pytest is found"
            },
            {
              "seconds": 270,
              "text": "and it's found in my virtual environment, cool."
            },
            {
              "seconds": 274,
              "text": "Let's say which python to make sure that I'm using"
            },
            {
              "seconds": 278,
              "text": "the python from my virtual environment,"
            },
            {
              "seconds": 280,
              "text": "which Python, and in this case, I don't need to say Python 3 anymore"
            },
            {
              "seconds": 283,
              "text": "because when we created the virtual environment"
            },
            {
              "seconds": 287,
              "text": "it made an executable called python that is Python 3 there."
            },
            {
              "seconds": 289,
              "text": "I can also say Python 3, but those should be the same,"
            },
            {
              "seconds": 292,
              "text": "just to show you if I type python now it says Python 3.6."
            },
            {
              "seconds": 298,
              "text": "Okay, and finally, let's run venv test"
            },
            {
              "seconds": 301,
              "text": "and it says it ran one passed in 0.1 seconds."
            },
            {
              "seconds": 306,
              "text": "So that's how you create a virtual environment and install pytest using pipenv."
            },
            {
              "seconds": 312,
              "text": "I'm also going to exit from this."
            },
            {
              "seconds": 314,
              "text": "I'm going to say exit and you'll see that now I am out of my virtual environment."
            },
            {
              "seconds": 319,
              "text": "So this video showed you how to use pipenv to create a virtual environment"
            },
            {
              "seconds": 324,
              "text": "and to install files, how to activate the virtual environment and how to exit from it."
            }
          ]
        },
        {
          "lecture_id": 120205,
          "lecture_title": "Walk-through: Virtual Environments and Pip (IDLE)",
          "vimeo_id": 7111084121645285,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video I'm going to show how to run the venv test file"
            },
            {
              "seconds": 4,
              "text": "using idle in case you don't have PyCharm and you want to use another editor,"
            },
            {
              "seconds": 8,
              "text": "this is how you would do it from another editor."
            },
            {
              "seconds": 11,
              "text": "So the first thing I want to do is I want to activate my environment."
            },
            {
              "seconds": 16,
              "text": "So I say pipenv shell and that will activate my environment"
            },
            {
              "seconds": 20,
              "text": "now, I want to launch idle here,"
            },
            {
              "seconds": 23,
              "text": "so I'm going to say python -m idlelib.idle."
            },
            {
              "seconds": 26,
              "text": "If I don't activate my virtual environment first and I launch idle"
            },
            {
              "seconds": 30,
              "text": "I'll get the system idle that might not have pytest installed."
            },
            {
              "seconds": 35,
              "text": "So I want to make sure that I have pytest installed."
            },
            {
              "seconds": 43,
              "text": "Okay, at this point, idle has launched."
            },
            {
              "seconds": 48,
              "text": "Let's open our venv test file, there it is"
            },
            {
              "seconds": 54,
              "text": "and let's just come up here to run and say run module"
            },
            {
              "seconds": 57,
              "text": "and note that over here in the repl, we got some output"
            },
            {
              "seconds": 62,
              "text": "and it says it past one in one second."
            },
            {
              "seconds": 66,
              "text": "So because we have launched this from a virtual environment"
            },
            {
              "seconds": 69,
              "text": "that has access to pytest, we're able to run this from pytest."
            },
            {
              "seconds": 73,
              "text": "All we have to say is run module."
            }
          ]
        },
        {
          "lecture_id": 120206,
          "lecture_title": "Walk-through: Virtual Environments and Pip (PyCharm)",
          "vimeo_id": 7111876812779031,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video I'm going to show how to use PyCharm to run the venv test file."
            },
            {
              "seconds": 3,
              "text": "I'm going to use the environment that we created using pipenv."
            },
            {
              "seconds": 7,
              "text": "So I'm going to say create new project, it's going to be a pure Python project"
            },
            {
              "seconds": 10,
              "text": "and it's going to point to the labs folder where I have the labs"
            },
            {
              "seconds": 14,
              "text": "and note I'm going to say use an existing interpreter."
            },
            {
              "seconds": 17,
              "text": "PyCharm will happily create a new virtual environment for us"
            },
            {
              "seconds": 21,
              "text": "if we want to, but we're going to use an existing one,"
            },
            {
              "seconds": 24,
              "text": "so we have to click the little gear here and say add local"
            },
            {
              "seconds": 26,
              "text": "and let's make sure that we use the right one."
            },
            {
              "seconds": 30,
              "text": "So I'm going to go into my home directory"
            },
            {
              "seconds": 33,
              "text": "and I'm going to go to my .local and in my shared directory there is labs"
            },
            {
              "seconds": 39,
              "text": "and note that it's looking for the Python executable there"
            },
            {
              "seconds": 44,
              "text": "so I need to come down here and click on Python right here."
            },
            {
              "seconds": 47,
              "text": "Okay, at this point, I'll hit create and it will say the directory labs is not empty,"
            },
            {
              "seconds": 53,
              "text": "would you like to create a project from existing sources?"
            },
            {
              "seconds": 55,
              "text": "Yes, let's do that."
            },
            {
              "seconds": 59,
              "text": "Great. Here's the file right here."
            },
            {
              "seconds": 61,
              "text": "Let's run this and see if it runs."
            },
            {
              "seconds": 64,
              "text": "So to run it, it's going to index, we'll let it index for a while."
            },
            {
              "seconds": 70,
              "text": "Okay, now let's run this here."
            },
            {
              "seconds": 72,
              "text": "So I'm going to say run venv test, and it looks like it ran,"
            },
            {
              "seconds": 77,
              "text": "note that it said it used the virtual environment Python to run it and it ran it"
            },
            {
              "seconds": 82,
              "text": "and the test imports pytest so it looks like pytest is working."
            },
            {
              "seconds": 87,
              "text": "This video showed how to use PyCharm to create a new project"
            },
            {
              "seconds": 91,
              "text": "using an existing pipenv environment and to run a test,"
            },
            {
              "seconds": 95,
              "text": "note that I can also right click here and say run test again and it will run it again."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12003,
      "chapter_title": "Strings",
      "lectures": [
        {
          "lecture_id": 120301,
          "lecture_title": "Unicode",
          "vimeo_id": 7111456433241930,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about unicode."
            },
            {
              "seconds": 3,
              "text": "There are a few terms that we need to know"
            },
            {
              "seconds": 5,
              "text": "before we can understand unicode and how Python handles it."
            },
            {
              "seconds": 8,
              "text": "So let's talk about these terms."
            },
            {
              "seconds": 10,
              "text": "The first term is a character and a character is a single letter"
            },
            {
              "seconds": 14,
              "text": "something that you would type and it would print on the screen."
            },
            {
              "seconds": 17,
              "text": "There's a little bit of a vagary between character and glyph"
            },
            {
              "seconds": 20,
              "text": "glyph is the visual representation of said character."
            },
            {
              "seconds": 24,
              "text": "So if we think of the character A in the English alphabet"
            },
            {
              "seconds": 29,
              "text": "A is a single letter and there's a visual representation"
            },
            {
              "seconds": 33,
              "text": "of A actually uppercase or lowercase."
            },
            {
              "seconds": 36,
              "text": "So the glyph would be the representation of it, a is the actual character."
            },
            {
              "seconds": 41,
              "text": "There's also what's called a code point"
            },
            {
              "seconds": 44,
              "text": "and a code point is a numeric description of a character."
            },
            {
              "seconds": 48,
              "text": "And each character or glyph has a unique numeric description."
            },
            {
              "seconds": 53,
              "text": "Typically this is represented as a hex number"
            },
            {
              "seconds": 56,
              "text": "and this is also where unicode comes from."
            },
            {
              "seconds": 59,
              "text": "This is a universal code that represents this character or glyph."
            },
            {
              "seconds": 64,
              "text": "Another term that we need to know is an encoding"
            },
            {
              "seconds": 66,
              "text": "encoding is a mapping, a byte stream to a code point"
            },
            {
              "seconds": 71,
              "text": "and so we'll understand this little bit more,"
            },
            {
              "seconds": 73,
              "text": "but basically, you can think of a code point"
            },
            {
              "seconds": 76,
              "text": "as a universal way of understanding something"
            },
            {
              "seconds": 78,
              "text": "and when we want to tell someone else about it"
            },
            {
              "seconds": 82,
              "text": "or tell a computer or send it over the network,"
            },
            {
              "seconds": 84,
              "text": "we encode that character into some encoding,"
            },
            {
              "seconds": 88,
              "text": "so typical encodings will include ASCII or utf-8"
            },
            {
              "seconds": 92,
              "text": "there are other encodings as well, we'll look at a few of them."
            },
            {
              "seconds": 95,
              "text": "Here's an example."
            },
            {
              "seconds": 97,
              "text": "So there's a character called Omega and it has a glyph"
            },
            {
              "seconds": 100,
              "text": "and it looks sort of like a horseshoe \u2126"
            },
            {
              "seconds": 102,
              "text": "you might be familiar with it if you've done some physics,"
            },
            {
              "seconds": 105,
              "text": "it has a code point, so the code point, we put a capital U in front of it"
            },
            {
              "seconds": 111,
              "text": "it just stands for unicode,"
            },
            {
              "seconds": 113,
              "text": "and the code point is 2126 note that that is a hex number."
            },
            {
              "seconds": 116,
              "text": "There are also a couple encoding represented here,"
            },
            {
              "seconds": 119,
              "text": "so one encoding is the byte string consisting of e2 84 and a6,"
            },
            {
              "seconds": 126,
              "text": "this is the utf-8 encoding for the Omega character or glyph"
            },
            {
              "seconds": 130,
              "text": "or the 2126 unicode code point."
            },
            {
              "seconds": 134,
              "text": "There's also a utf-16 code point, ff, fe&! at the end."
            },
            {
              "seconds": 143,
              "text": "Note that these are two different encodings"
            },
            {
              "seconds": 145,
              "text": "and their byte streams look different."
            },
            {
              "seconds": 147,
              "text": "Here's how we do it in Python."
            },
            {
              "seconds": 149,
              "text": "One thing to be aware of in Python 3"
            },
            {
              "seconds": 151,
              "text": "is that all strings in Python are unicode strings"
            },
            {
              "seconds": 153,
              "text": "we'll talk a little bit how they're represented internally"
            },
            {
              "seconds": 155,
              "text": "but if I have the glyph, I have a way to type it"
            },
            {
              "seconds": 159,
              "text": "I can just type it into a string."
            },
            {
              "seconds": 161,
              "text": "I can also copy and paste it from a webpage or whatnot."
            },
            {
              "seconds": 164,
              "text": "If I don't have the glyph or I don't want to type it"
            },
            {
              "seconds": 166,
              "text": "but I do have the code point I can insert that"
            },
            {
              "seconds": 169,
              "text": "by putting a \\_u or _U depending on how long the hex string is"
            },
            {
              "seconds": 177,
              "text": "if the hex string is 4 characters, then I use an _u or a lowercase u"
            },
            {
              "seconds": 181,
              "text": "if the hex string is longer than 4 characters"
            },
            {
              "seconds": 184,
              "text": "then I'm going to put an upper case U"
            },
            {
              "seconds": 186,
              "text": "and I'm going to left pad it with zeros untill I get to 8 characters."
            },
            {
              "seconds": 189,
              "text": "I can also use the unicode name"
            },
            {
              "seconds": 192,
              "text": "and in this case the name is \u2126 sign"
            },
            {
              "seconds": 196,
              "text": "and I put a \\N and then I put the name in curly braces."
            },
            {
              "seconds": 200,
              "text": "A fourth way to get this unicode string"
            },
            {
              "seconds": 204,
              "text": "is by passing in this number here"
            },
            {
              "seconds": 208,
              "text": "and 8486 is the decimal version of 2126."
            },
            {
              "seconds": 212,
              "text": "So if I pass that into the chr function"
            },
            {
              "seconds": 214,
              "text": "that will give me a character from an ordinal number"
            },
            {
              "seconds": 217,
              "text": "and that's the unicode ordinal."
            },
            {
              "seconds": 220,
              "text": "Note that I can print this out to the screen"
            },
            {
              "seconds": 222,
              "text": "and it will print out the Omega character"
            },
            {
              "seconds": 225,
              "text": "and I can test if all these characters"
            },
            {
              "seconds": 227,
              "text": "are indeed equal or equivalent to one another and they are."
            },
            {
              "seconds": 230,
              "text": "Another thing that you might want to be aware of in Python"
            },
            {
              "seconds": 232,
              "text": "is a module included in Python called unicode data."
            },
            {
              "seconds": 235,
              "text": "And if you have unicode data, you can pass in a single string character into it"
            },
            {
              "seconds": 240,
              "text": "and it will tell you what the name is."
            },
            {
              "seconds": 243,
              "text": "So in this case, we have the \u2126 character in there"
            },
            {
              "seconds": 247,
              "text": "and unicode data.name says that unicode name of this is \u2126 sign."
            },
            {
              "seconds": 253,
              "text": "Let's look at another example really quickly."
            },
            {
              "seconds": 255,
              "text": "There's a character called superscript two and that's"
            },
            {
              "seconds": 259,
              "text": "if you're familiar with math, like you said x2"
            },
            {
              "seconds": 263,
              "text": "the squared would be the glyph"
            },
            {
              "seconds": 265,
              "text": "the number 2 raised up slightly higher is the superscript two"
            },
            {
              "seconds": 269,
              "text": "it has a unicode code point, in this case, it's the hex characters 178"
            },
            {
              "seconds": 275,
              "text": "and we can see two encodings here,"
            },
            {
              "seconds": 277,
              "text": "here's a utf-8 encoding and we can also see a Windows 1252 encoding."
            },
            {
              "seconds": 282,
              "text": "Now, where'd you get these code points?"
            },
            {
              "seconds": 284,
              "text": "Where do you understand what the master data is?"
            },
            {
              "seconds": 289,
              "text": "If you want to find them out, you can go to a website called unicode.org."
            },
            {
              "seconds": 293,
              "text": "There's a consortium there that occasionally releases new mappings,"
            },
            {
              "seconds": 297,
              "text": "but they have charts that you can download that map letters"
            },
            {
              "seconds": 302,
              "text": "to unicode character codes or code points."
            },
            {
              "seconds": 305,
              "text": "Here's an example of one of the charts."
            },
            {
              "seconds": 308,
              "text": "You'll see something like this."
            },
            {
              "seconds": 310,
              "text": "This is for the Emoji chart and you can see that there is along the top,"
            },
            {
              "seconds": 315,
              "text": "we've got a hex number here"
            },
            {
              "seconds": 318,
              "text": "and then we've got another hex number here on the left-hand side."
            },
            {
              "seconds": 322,
              "text": "And when you concatenate those two"
            },
            {
              "seconds": 324,
              "text": "you get this hex number at the bottom here,"
            },
            {
              "seconds": 327,
              "text": "and that is the code point for the smiley face here."
            },
            {
              "seconds": 330,
              "text": "And then the next one is the sort of normal face,"
            },
            {
              "seconds": 335,
              "text": "and then there's a frowny face and a crying face and a surprised face."
            },
            {
              "seconds": 339,
              "text": "The chart also contains a table that looks like this"
            },
            {
              "seconds": 342,
              "text": "that has the code point name and glyph all in one place here."
            },
            {
              "seconds": 345,
              "text": "Right here we have the code point 1F600,"
            },
            {
              "seconds": 350,
              "text": "we have the glyph which is the smiley face"
            },
            {
              "seconds": 353,
              "text": "and we have the actual name, which isn't smiley, but grinning face,"
            },
            {
              "seconds": 356,
              "text": "note that it's capitalized and there is a space between it."
            },
            {
              "seconds": 359,
              "text": "One thing to note is that the code point for this 1F600 is longer than four characters."
            },
            {
              "seconds": 365,
              "text": "So in order to represent that using the code point"
            },
            {
              "seconds": 369,
              "text": "we need to put a capital U and then we need to pad that"
            },
            {
              "seconds": 372,
              "text": "with three zeros to get 8 characters in that case."
            },
            {
              "seconds": 376,
              "text": "We can also use the name with a \\m"
            },
            {
              "seconds": 379,
              "text": "If we have access to the glyph or keyboard that types Emoji"
            },
            {
              "seconds": 382,
              "text": "we can put that directly into a string."
            },
            {
              "seconds": 385,
              "text": "Note that here I've also got the utf-8 version of the encoding of grinning face."
            },
            {
              "seconds": 390,
              "text": "If I have that byte stream encoded as utf-8 bytes,"
            },
            {
              "seconds": 393,
              "text": "I can decode it back to unicode using the decode method"
            },
            {
              "seconds": 393,
              "text": "and the appropriate encoding that it was encoded as"
            },
            {
              "seconds": 400,
              "text": "and I say decode to utf-8, I will get back the utf-8 string for that."
            },
            {
              "seconds": 405,
              "text": "Let's talk about how things are stored in Python."
            },
            {
              "seconds": 408,
              "text": "Everything internally is stored as two or four bytes"
            },
            {
              "seconds": 413,
              "text": "and there's internal encodings, these are called UCS2 and UCS4,"
            },
            {
              "seconds": 418,
              "text": "depending on how your Python was compiled"
            },
            {
              "seconds": 421,
              "text": "will determine how your unicode strings are stored."
            },
            {
              "seconds": 424,
              "text": "So one thing to be aware of because all strings in Python 3 are unicode strings,"
            },
            {
              "seconds": 430,
              "text": "and these are stored as UCS2 or UCS4 byte strings internally,"
            },
            {
              "seconds": 436,
              "text": "there's typically a 2X to 4X increase in the size of memory"
            },
            {
              "seconds": 440,
              "text": "needed to store strings in Python 3 versus Python 2."
            },
            {
              "seconds": 444,
              "text": "In practice, that doesn't really make so much of a difference"
            },
            {
              "seconds": 448,
              "text": "on modern machines unless you're dealing with huge files,"
            },
            {
              "seconds": 450,
              "text": "but just something to be aware of."
            },
            {
              "seconds": 453,
              "text": "Also note that bytes in Python 3 are not the same as Python 2 strings."
            },
            {
              "seconds": 457,
              "text": "So bytes in Python 3 are simply arrays of integers."
            },
            {
              "seconds": 461,
              "text": "Let's talk about encodings a little bit more,"
            },
            {
              "seconds": 464,
              "text": "encodings map bytes to code points."
            },
            {
              "seconds": 468,
              "text": "A common misconception is that an encoding is a unicode number."
            },
            {
              "seconds": 472,
              "text": "So utf-8 is an encoding. This is not code point."
            },
            {
              "seconds": 478,
              "text": "This is an encoding of a code point, just to be pedantic about that,"
            },
            {
              "seconds": 482,
              "text": "utf-8 is an encoding of characters, it is not unicode per se."
            },
            {
              "seconds": 487,
              "text": "Unicode is always encoded to bytes and the reverse is always true"
            },
            {
              "seconds": 492,
              "text": "bytes are decoded into unicode."
            },
            {
              "seconds": 495,
              "text": "Note that you can't take unicode and decode it, you encode it."
            },
            {
              "seconds": 499,
              "text": "Also, the same with bytes\u2014 you can't take bytes and encode them,"
            },
            {
              "seconds": 503,
              "text": "they are already encoded, you can only decode them to unicode."
            },
            {
              "seconds": 509,
              "text": "Here's an example here. We have the string with Omega in it."
            },
            {
              "seconds": 512,
              "text": "And I created it with the code point"
            },
            {
              "seconds": 514,
              "text": "and then if I wanted to encode that as utf-16,"
            },
            {
              "seconds": 518,
              "text": "I say encode, I call the encode method on that"
            },
            {
              "seconds": 522,
              "text": "and I pass in the encoding utf-16"
            },
            {
              "seconds": 525,
              "text": "and it returns back a byte string,"
            },
            {
              "seconds": 527,
              "text": "again, note that c is a unicode string"
            },
            {
              "seconds": 531,
              "text": "and the result of that is a byte string coming out of that."
            },
            {
              "seconds": 535,
              "text": "If I want to encode c as utf-8,"
            },
            {
              "seconds": 538,
              "text": "I simply call the encode method and pass in utf-8."
            },
            {
              "seconds": 541,
              "text": "Note that these encodings are different,"
            },
            {
              "seconds": 543,
              "text": "utf-16 and utf-8 have different encodings."
            },
            {
              "seconds": 546,
              "text": "Now, once I have these bytes, I can go back and get the original string from it."
            },
            {
              "seconds": 551,
              "text": "So I don't encode bytes, I always decode bytes"
            },
            {
              "seconds": 554,
              "text": "and here I'm taking the utf-8 bytes and decoding them"
            },
            {
              "seconds": 558,
              "text": "calling the decode method on them to get back a unicode string."
            },
            {
              "seconds": 563,
              "text": "Here's a chart that just shows what we do"
            },
            {
              "seconds": 566,
              "text": "if we have a unicode string, we always encode it to a byte string,"
            },
            {
              "seconds": 571,
              "text": "likewise if we have a byte string, we always decode it."
            },
            {
              "seconds": 574,
              "text": "We can't do the opposite,"
            },
            {
              "seconds": 576,
              "text": "the byte string doesn't even have an encode method,"
            },
            {
              "seconds": 578,
              "text": "likewise, the unicode string doesn't have a decode method."
            },
            {
              "seconds": 581,
              "text": "There are some errors you can get when you're dealing with unicode,"
            },
            {
              "seconds": 584,
              "text": "here's a pretty common one here."
            },
            {
              "seconds": 586,
              "text": "I've got the Omega sign here in a variable called c."
            },
            {
              "seconds": 589,
              "text": "And if I try to encode that as ASCII,"
            },
            {
              "seconds": 592,
              "text": "I'm going to get a unicode encode error."
            },
            {
              "seconds": 595,
              "text": "And the problem is that the ASCII character set"
            },
            {
              "seconds": 598,
              "text": "doesn't have an encoding for this character."
            },
            {
              "seconds": 601,
              "text": "And so that's what this error means,"
            },
            {
              "seconds": 604,
              "text": "charmap, codec cannot encode character unicode 2126 in position 0."
            },
            {
              "seconds": 610,
              "text": "This is a pretty common error when you start dealing with unicode."
            },
            {
              "seconds": 613,
              "text": "So again, what this error means is that you have a string"
            },
            {
              "seconds": 617,
              "text": "and you're trying to encode it to a byte encoding"
            },
            {
              "seconds": 620,
              "text": "that doesn't have a representation for that."
            },
            {
              "seconds": 622,
              "text": "There are some encodings that have representations for all of unicode,"
            },
            {
              "seconds": 626,
              "text": "so utf-8 is a good choice, but ASCII does not,"
            },
            {
              "seconds": 629,
              "text": "it only has a limited number of characters that it can encode."
            },
            {
              "seconds": 633,
              "text": "Here, we'll trying to encode this Omega character again"
            },
            {
              "seconds": 636,
              "text": "we'll call encode with the windows 1252"
            },
            {
              "seconds": 640,
              "text": "a common encoding that was found in Windows during the last century"
            },
            {
              "seconds": 644,
              "text": "and we'll get the same error here."
            },
            {
              "seconds": 646,
              "text": "Well, similar error, we are getting unicode encode error"
            },
            {
              "seconds": 649,
              "text": "and that it can't be encoded into Windows 1252."
            },
            {
              "seconds": 653,
              "text": "On the other hand, if we try and encode it into cp949,"
            },
            {
              "seconds": 657,
              "text": "this is a Korean encoding, we get a byte string."
            },
            {
              "seconds": 660,
              "text": "So this Korean encoding has the ability to support the Omega character."
            },
            {
              "seconds": 664,
              "text": "Now be careful, once you have bytes encoded,"
            },
            {
              "seconds": 667,
              "text": "you need to decode them typically."
            },
            {
              "seconds": 670,
              "text": "Typically, you only encode them to send them over the wire"
            },
            {
              "seconds": 673,
              "text": "or to save them as a file or send them over the network, that sort of thing."
            },
            {
              "seconds": 677,
              "text": "But when you're dealing with them, you want them in utf-8."
            },
            {
              "seconds": 679,
              "text": "So a lot of times, you'll get data and you'll need to decode it"
            },
            {
              "seconds": 682,
              "text": "to be able to deal with it."
            },
            {
              "seconds": 684,
              "text": "Here we have the variable core which has the bytes for the Omega sign"
            },
            {
              "seconds": 687,
              "text": "encoded in Korean."
            },
            {
              "seconds": 689,
              "text": "Now if we have those bytes and we call decode"
            },
            {
              "seconds": 691,
              "text": "and we say I want to decode these bytes assuming that they were in utf-8"
            },
            {
              "seconds": 696,
              "text": "I'm going to get an error here, that's a unicode decode error."
            },
            {
              "seconds": 702,
              "text": "And this says I got bytes and I'm trying to decode them as utf-8,"
            },
            {
              "seconds": 707,
              "text": "but there aren't utf-8 bytes that make sense here."
            },
            {
              "seconds": 712,
              "text": "So this is a unicode decode error,"
            },
            {
              "seconds": 715,
              "text": "typically what this means is you have bytes"
            },
            {
              "seconds": 717,
              "text": "and you are decoding them from the wrong encoding."
            },
            {
              "seconds": 719,
              "text": "Note that we encoded as Korean, we need to decode from Korean as well."
            },
            {
              "seconds": 723,
              "text": "Now even more nefarious is this example down here."
            },
            {
              "seconds": 726,
              "text": "We have the Korean bytes, and we're decoding them"
            },
            {
              "seconds": 730,
              "text": "but we're decoding them as Turkish."
            },
            {
              "seconds": 732,
              "text": "And apparently the combination of Korean bytes is valid Turkish bytes,"
            },
            {
              "seconds": 737,
              "text": "but it's not the Omega sign, it's a different sign."
            },
            {
              "seconds": 740,
              "text": "This is known as mojibake, that's a Japanese term"
            },
            {
              "seconds": 743,
              "text": "that means messed up characters, I believe."
            },
            {
              "seconds": 745,
              "text": "And so this is a little bit more problematic,"
            },
            {
              "seconds": 749,
              "text": "you've decoded your characters, but you have the wrong characters,"
            },
            {
              "seconds": 754,
              "text": "because you decoded them in the wrong encoding,"
            },
            {
              "seconds": 757,
              "text": "so be careful about your encoding, you want to be explicit here"
            },
            {
              "seconds": 762,
              "text": "and you want to make sure that your encoding and decoding"
            },
            {
              "seconds": 765,
              "text": "match up with the same encoding."
            },
            {
              "seconds": 767,
              "text": "Here's a chart that represents the various things you can do"
            },
            {
              "seconds": 769,
              "text": "with characters and the conversions"
            },
            {
              "seconds": 771,
              "text": "that you can do on the single character."
            },
            {
              "seconds": 774,
              "text": "Note that if we have a string here, this box right here"
            },
            {
              "seconds": 777,
              "text": "is various ways to represent ASCII character T."
            },
            {
              "seconds": 781,
              "text": "We can convert that to an integer by calling ord on it"
            },
            {
              "seconds": 785,
              "text": "and we can go back by calling chr."
            },
            {
              "seconds": 788,
              "text": "We can also get bytes by calling bytes with the encoding that we want"
            },
            {
              "seconds": 793,
              "text": "and we can put our bytes into a file"
            },
            {
              "seconds": 797,
              "text": "if we open the file in the right binary mode,"
            },
            {
              "seconds": 801,
              "text": "if we have string and we want to write to a file"
            },
            {
              "seconds": 804,
              "text": "we need to just call it with the w mode."
            },
            {
              "seconds": 807,
              "text": "There are a couple errors that you might see."
            },
            {
              "seconds": 809,
              "text": "You might try and open a file for writing with bytes"
            },
            {
              "seconds": 813,
              "text": "and you'll get an error, that's the type error,"
            },
            {
              "seconds": 816,
              "text": "you have to use a string and not bytes if you're opening to write it in text mode."
            },
            {
              "seconds": 821,
              "text": "Similarly, if I have a string and I open it in binary mode"
            },
            {
              "seconds": 826,
              "text": "I'm getting an error that says string does not support the buffer interface."
            },
            {
              "seconds": 829,
              "text": "So these are errors that you might see with an ASCII character."
            },
            {
              "seconds": 833,
              "text": "This chart shows some of the errors that you might see with unicode characters."
            },
            {
              "seconds": 837,
              "text": "Here we've got the string here which has \u2126"
            },
            {
              "seconds": 840,
              "text": "and we can see that we can encode it as an integer."
            },
            {
              "seconds": 844,
              "text": "We can also encode it as bytes, in this case we're encoding it as utf-8 bytes."
            },
            {
              "seconds": 849,
              "text": "Now note that if I try and decode this sequence as Windows 1252"
            },
            {
              "seconds": 854,
              "text": "that will pass, but I'll get a messed up mojibake."
            },
            {
              "seconds": 859,
              "text": "So again, we need to make sure that this decoding"
            },
            {
              "seconds": 862,
              "text": "has the same encoding as the encoding call, which was utf-8."
            },
            {
              "seconds": 869,
              "text": "We also see some of the other errors that we have"
            },
            {
              "seconds": 872,
              "text": "if we try and encode with a different encoding that's not supported,"
            },
            {
              "seconds": 875,
              "text": "we might get a unicode encode error."
            },
            {
              "seconds": 878,
              "text": "So Windows 1252 or ASCII, those both give us errors"
            },
            {
              "seconds": 882,
              "text": "and know that we can't call decode on a string, we can only encode a string."
            },
            {
              "seconds": 887,
              "text": "So those are some of the things that you need to be aware of."
            },
            {
              "seconds": 890,
              "text": "Typically, if you get these unicode encode errors,"
            },
            {
              "seconds": 893,
              "text": "that means that you're trying to call encode"
            },
            {
              "seconds": 895,
              "text": "and you're using the wrong encoding there."
            },
            {
              "seconds": 898,
              "text": "So try and figure out what your encoding is."
            },
            {
              "seconds": 900,
              "text": "Common coding these days is utf-8."
            },
            {
              "seconds": 902,
              "text": "Okay, we've been through a lot in this video."
            },
            {
              "seconds": 904,
              "text": "Hopefully, you have some understanding"
            },
            {
              "seconds": 907,
              "text": "of how Python handles unicode"
            },
            {
              "seconds": 909,
              "text": "and how we can change these unicode strings into byte strings"
            },
            {
              "seconds": 912,
              "text": "to serialize or send over the wire."
            },
            {
              "seconds": 915,
              "text": "Hopefully, you also understand some of the errors you might run into"
            },
            {
              "seconds": 918,
              "text": "and how to deal with those errors."
            },
            {
              "seconds": 921,
              "text": "If you're sure what your encoding is,"
            },
            {
              "seconds": 923,
              "text": "that can eliminate a lot of the issues that you might run into."
            }
          ]
        },
        {
          "lecture_id": 120302,
          "lecture_title": "Walk-through: Unicode",
          "vimeo_id": 7111133883271548,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at unicode test,"
            },
            {
              "seconds": 3,
              "text": "let's open that up in the editor that you want."
            },
            {
              "seconds": 6,
              "text": "I'm going to run it. You can run it from your command line"
            },
            {
              "seconds": 9,
              "text": "by just invoking Python on the file,"
            },
            {
              "seconds": 12,
              "text": "or you can in PyCharm right click and say run"
            },
            {
              "seconds": 15,
              "text": "you should get three errors here. Let's go to the first error."
            },
            {
              "seconds": 20,
              "text": "On line 10 we get a name error, so here's line 10."
            },
            {
              "seconds": 24,
              "text": "And in this function, it's called test 1."
            },
            {
              "seconds": 27,
              "text": "It says the following line is from Yu Lou Chun by Dao Ren Bai Yun."
            },
            {
              "seconds": 31,
              "text": "There's a link to Project Gutenberg there, it says convert the line to utf-8 bytes"
            },
            {
              "seconds": 36,
              "text": "stored in the variable utf-8_txt."
            },
            {
              "seconds": 40,
              "text": "So up here we have a unicode string and we're going to convert that to bytes."
            },
            {
              "seconds": 43,
              "text": "Let's see how we do that."
            },
            {
              "seconds": 45,
              "text": "We're going to make a variable called utf-8_text is equal to"
            },
            {
              "seconds": 50,
              "text": "and on text, we need to call the encode method."
            },
            {
              "seconds": 53,
              "text": "So we're going to encode the string and we're going to encode it as utf-8 bytes"
            },
            {
              "seconds": 60,
              "text": "so we can say utf-8, and that should give us a new variable that actually is bytes."
            },
            {
              "seconds": 70,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 73,
              "text": "Note that our test here is just asserting that the last five characters are these bytes."
            },
            {
              "seconds": 77,
              "text": "It's also asserting the length of the bytes."
            },
            {
              "seconds": 83,
              "text": "Okay, so we have one that's passed now."
            },
            {
              "seconds": 85,
              "text": "So the thing to remember is that if you have a string, a unicode string"
            },
            {
              "seconds": 89,
              "text": "if you want to change it into bytes that process is called encoding,"
            },
            {
              "seconds": 94,
              "text": "you don't decode a string, you decode bytes back into a string."
            },
            {
              "seconds": 100,
              "text": "Okay, here's another line or probably the same line"
            },
            {
              "seconds": 104,
              "text": "convert the line to big5, another Chinese encoding and store it in big5_txt."
            },
            {
              "seconds": 113,
              "text": "So big5_txt = txt so we have bytes here"
            },
            {
              "seconds": 120,
              "text": "and we want to encode those bytes as big5."
            },
            {
              "seconds": 126,
              "text": "Let's run that and see if that works."
            },
            {
              "seconds": 131,
              "text": "Okay, it looks like it worked, we have 2 passed,"
            },
            {
              "seconds": 134,
              "text": "one thing to note is the length of the big5 encoding"
            },
            {
              "seconds": 138,
              "text": "is 74 bites on that same string versus above,"
            },
            {
              "seconds": 141,
              "text": "when it's utf-8 encoded it's 111 bytes."
            },
            {
              "seconds": 145,
              "text": "So there are some compromises that utf-8 makes"
            },
            {
              "seconds": 148,
              "text": "but in general, utf-8 is one of the most widely used encodings on the internet."
            },
            {
              "seconds": 153,
              "text": "So it's a pretty good encoding to use"
            },
            {
              "seconds": 155,
              "text": "even though it might be a little bigger than other encodings."
            },
            {
              "seconds": 159,
              "text": "Okay, test three, the following is utf-8 bytes decode it into a variable result."
            },
            {
              "seconds": 165,
              "text": "So we have some bytes here and we're going to make a variable called result"
            },
            {
              "seconds": 169,
              "text": "and we're going to take our unknown bytes and we're going to decode it."
            },
            {
              "seconds": 173,
              "text": "Again, we don't encode bytes, bytes are already encoded for us."
            },
            {
              "seconds": 180,
              "text": "Okay, let's run this and make sure it works"
            },
            {
              "seconds": 187,
              "text": "It looks like we're good to go."
            },
            {
              "seconds": 191,
              "text": "So let's just for fun put a little break point here"
            },
            {
              "seconds": 196,
              "text": "and see if we can see what unknown is."
            },
            {
              "seconds": 199,
              "text": "I'll move the break point down one level here"
            },
            {
              "seconds": 207,
              "text": "Okay, here's result."
            },
            {
              "seconds": 209,
              "text": "And if you look at result, it says that snake makes your head"
            },
            {
              "seconds": 214,
              "text": "and then it says spin upside down."
            },
            {
              "seconds": 217,
              "text": "Okay, cool. Thanks for watching this video."
            },
            {
              "seconds": 219,
              "text": "Hopefully, you have a better understanding of unicode and bytes"
            },
            {
              "seconds": 222,
              "text": "and the conversion between those two."
            },
            {
              "seconds": 225,
              "text": "Again, if you have a unicode string, you encode those as bytes,"
            },
            {
              "seconds": 229,
              "text": "and if you have bytes, you decode those to a unicode string."
            }
          ]
        },
        {
          "lecture_id": 120303,
          "lecture_title": "Unicode in Files",
          "vimeo_id": 7111949212456918,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video we'll discuss unicode in files in Python 3."
            },
            {
              "seconds": 4,
              "text": "We talked about unicode in Python 3"
            },
            {
              "seconds": 6,
              "text": "and that Python 3 handles unicode natively"
            },
            {
              "seconds": 9,
              "text": "and the strings are natively unicode."
            },
            {
              "seconds": 12,
              "text": "One thing to be aware of is that when Python reads in a text file,"
            },
            {
              "seconds": 16,
              "text": "it's going to use the system encoding"
            },
            {
              "seconds": 18,
              "text": "to determine what the encoding is on that file."
            },
            {
              "seconds": 22,
              "text": "So you can run this command right here"
            },
            {
              "seconds": 24,
              "text": "locale.getprefferedencoding with faults passed in"
            },
            {
              "seconds": 28,
              "text": "and it will tell you what the encoding is on your system."
            },
            {
              "seconds": 31,
              "text": "Typically, on most systems that's utf-8,"
            },
            {
              "seconds": 33,
              "text": "if that's not the case, you should be aware of that."
            },
            {
              "seconds": 36,
              "text": "And in any case, you should be explicit about what your files are encoded in."
            },
            {
              "seconds": 41,
              "text": "Here's an example of being explicit with writing output."
            },
            {
              "seconds": 45,
              "text": "I have a unicode string that has the ohm (\u2126) character in it."
            },
            {
              "seconds": 49,
              "text": "Again, ASCII can't handle this,"
            },
            {
              "seconds": 52,
              "text": "but the cpe949 encoding can, that's a Korean encoding."
            },
            {
              "seconds": 56,
              "text": "And so I'm going to make a file called ohm.core and I'm going to write to it,"
            },
            {
              "seconds": 62,
              "text": "note that I'm calling the W mode, I'm not saying binary"
            },
            {
              "seconds": 66,
              "text": "because I'm writing out a string to it."
            },
            {
              "seconds": 70,
              "text": "So if you're writing out text,"
            },
            {
              "seconds": 72,
              "text": "you only open a file in read or write mode not in binary mode."
            },
            {
              "seconds": 75,
              "text": "And then I specify the encoding being explicit here"
            },
            {
              "seconds": 78,
              "text": "and I'm saying that I'm going to encode this string"
            },
            {
              "seconds": 81,
              "text": "as the Korean cp949 encoding"
            },
            {
              "seconds": 85,
              "text": "and then with my file, I can call write and write my data out."
            },
            {
              "seconds": 89,
              "text": "Now, this is a case where if I tried to read the file"
            },
            {
              "seconds": 93,
              "text": "without specifying the encoding"
            },
            {
              "seconds": 95,
              "text": "the encoding on my system again is utf-8"
            },
            {
              "seconds": 97,
              "text": "and if I'd simply try and open the file for reading and read from it,"
            },
            {
              "seconds": 100,
              "text": "I'll get a unicode decode error"
            },
            {
              "seconds": 102,
              "text": "that the utf-8 codec can't support that byte sequence."
            },
            {
              "seconds": 105,
              "text": "That's because there is some combination"
            },
            {
              "seconds": 107,
              "text": "of characters in the Korean byte sequence"
            },
            {
              "seconds": 109,
              "text": "that utf-8 doesn't know how to decode"
            },
            {
              "seconds": 112,
              "text": "but if I specify my encoding here and I'm explicit"
            },
            {
              "seconds": 115,
              "text": "then I can read that data back and get back my original string."
            },
            {
              "seconds": 118,
              "text": "Now, this used Korean,"
            },
            {
              "seconds": 121,
              "text": "typically, most files you're going to see these days are utf-8."
            },
            {
              "seconds": 125,
              "text": "So this just shows us an example of being explicit"
            },
            {
              "seconds": 127,
              "text": "by being explicit, we can get around these encoding issues."
            },
            {
              "seconds": 130,
              "text": "If we happen to have binary data,"
            },
            {
              "seconds": 133,
              "text": "note that binary data is what we send over the wire"
            },
            {
              "seconds": 136,
              "text": "or what we write to files."
            },
            {
              "seconds": 139,
              "text": "If we have binary data, we don't specify the encoding here."
            },
            {
              "seconds": 142,
              "text": "So here I'm saying I'm going to write a binary file"
            },
            {
              "seconds": 145,
              "text": "and I'm specifying the encoding"
            },
            {
              "seconds": 147,
              "text": "and Python throws an error and it says"
            },
            {
              "seconds": 149,
              "text": "the binary mode doesn't take an encoding argument."
            },
            {
              "seconds": 152,
              "text": "Again, we want to be explicit here"
            },
            {
              "seconds": 156,
              "text": "and remember that binary is what we send over the wire"
            },
            {
              "seconds": 160,
              "text": "over the network on a file and that is already encoded"
            },
            {
              "seconds": 164,
              "text": "so you don't need to specify an encoding,"
            },
            {
              "seconds": 167,
              "text": "it's a sequence of bytes."
            },
            {
              "seconds": 169,
              "text": "If you open something for binary"
            },
            {
              "seconds": 171,
              "text": "it's just going to lay down that sequence of bytes."
            },
            {
              "seconds": 173,
              "text": "So I hope you understand a little bit more"
            },
            {
              "seconds": 175,
              "text": "about reading and writing files that have alternate encodings in Python."
            },
            {
              "seconds": 180,
              "text": "One of the best practices of Python is being explicit."
            },
            {
              "seconds": 183,
              "text": "So when you're writing a text file"
            },
            {
              "seconds": 186,
              "text": "you want to be explicit about what encoding you're using,"
            },
            {
              "seconds": 189,
              "text": "especially if you're using characters"
            },
            {
              "seconds": 191,
              "text": "that aren't ASCII or commonly used characters."
            }
          ]
        },
        {
          "lecture_id": 120304,
          "lecture_title": "Unicode Variable Names",
          "vimeo_id": 7111433556295117,
          "subtitles": [
            {
              "seconds": 1,
              "text": "This video will talk about Unicode identifiers."
            },
            {
              "seconds": 3,
              "text": "These came out in Python 3, and pep 3131 introduced them."
            },
            {
              "seconds": 8,
              "text": "The pep states: by using identifiers in their native language"
            },
            {
              "seconds": 12,
              "text": "code clarity and maintainability of the code"
            },
            {
              "seconds": 14,
              "text": "among speakers of that language improves."
            },
            {
              "seconds": 17,
              "text": "What does this mean? It means that I can use a unicode character"
            },
            {
              "seconds": 20,
              "text": "such as \u2126 I can say the \u2126_val=10"
            },
            {
              "seconds": 25,
              "text": "if I'm talking about resistance or whatnot"
            },
            {
              "seconds": 27,
              "text": "and then I can ask for that variable and Python 3 will give that to me."
            },
            {
              "seconds": 31,
              "text": "Note that Python 2 does not like this and this won't work in Python 2."
            },
            {
              "seconds": 36,
              "text": "Still have some issues, you can't start a variable with a number"
            },
            {
              "seconds": 40,
              "text": "so I can't say to 2\u2126_val, I'll get a syntax error there."
            },
            {
              "seconds": 44,
              "text": "That's basically all I have to say about unicode variables."
            },
            {
              "seconds": 47,
              "text": "I personally haven't seen them that often."
            },
            {
              "seconds": 49,
              "text": "I'm in the United States and I mostly deal in an ASCII centric world."
            },
            {
              "seconds": 54,
              "text": "One other thing that the pep notes"
            },
            {
              "seconds": 56,
              "text": "is that the Python language isn't going to use unicode variables either."
            },
            {
              "seconds": 59,
              "text": "So even though the language supports it"
            },
            {
              "seconds": 61,
              "text": "and an effort to make things simpler and easier for everyone to type and understand"
            },
            {
              "seconds": 65,
              "text": "it's just going to stick with ASCII variables."
            },
            {
              "seconds": 69,
              "text": "So I personally haven't seen anyone using this feature, though it's out there."
            },
            {
              "seconds": 73,
              "text": "So if you've got a cool example, I'd love to see it."
            },
            {
              "seconds": 76,
              "text": "Hit me up on Twitter or whatnot and let me know"
            },
            {
              "seconds": 78,
              "text": "of a useful example where this is being used."
            }
          ]
        },
        {
          "lecture_id": 120305,
          "lecture_title": "String Formatting",
          "vimeo_id": 7111559433858093,
          "subtitles": [
            {
              "seconds": 1,
              "text": "This video will discuss string formatting and pep 3101."
            },
            {
              "seconds": 5,
              "text": "Pep 3101 introduced the format method on a string,"
            },
            {
              "seconds": 9,
              "text": "note that this exists in later versions of Python 2."
            },
            {
              "seconds": 13,
              "text": "Prior to that, there was a c-like way of formatting strings"
            },
            {
              "seconds": 18,
              "text": "so we would use percent and then some character after that"
            },
            {
              "seconds": 23,
              "text": "typically s means I'm going to represent this as a string."
            },
            {
              "seconds": 27,
              "text": "So here I have two variables and then we use the mod operator"
            },
            {
              "seconds": 31,
              "text": "and pass in a tuple of things that we want to stick into these placeholders here."
            },
            {
              "seconds": 37,
              "text": "So %s %s will take hello and stick it into the first place holder"
            },
            {
              "seconds": 41,
              "text": "and in the second place holder world will pop in."
            },
            {
              "seconds": 45,
              "text": "Pep 3101 we make this a method on a string"
            },
            {
              "seconds": 49,
              "text": "format is a method on a string, and we're using curly braces"
            },
            {
              "seconds": 52,
              "text": "to specify our placeholders here, in this case the 0 and 1,"
            },
            {
              "seconds": 56,
              "text": "0 refers to who's in the zero position"
            },
            {
              "seconds": 59,
              "text": "and the 1 here refers to who's in the second position."
            },
            {
              "seconds": 64,
              "text": "Again, Python is a zero based language, so 0, 1."
            },
            {
              "seconds": 67,
              "text": "One of the nice things about the 0 and 1 which are completely optional"
            },
            {
              "seconds": 70,
              "text": "is if I want to say Hello, Hello, Hello, I could say {0} {0} {0}"
            },
            {
              "seconds": 76,
              "text": "I wouldn't have to put in Hello three times in as arguments to format."
            },
            {
              "seconds": 81,
              "text": "Using the format method, there's a mini language"
            },
            {
              "seconds": 84,
              "text": "and it allows us to do some things, we can insert some Python expressions."
            },
            {
              "seconds": 88,
              "text": "So in this example, I'm passing in a dictionary into the format,"
            },
            {
              "seconds": 95,
              "text": "and note that I'm doing an index operation here with square brackets here,"
            },
            {
              "seconds": 101,
              "text": "so I'm saying on what's ever passed in I want you to do an index operation"
            },
            {
              "seconds": 104,
              "text": "and pull age off and we get 50 there."
            },
            {
              "seconds": 107,
              "text": "We can do a similar thing with attribute access,"
            },
            {
              "seconds": 110,
              "text": "Here I say .age give me the age attribute of my p class"
            },
            {
              "seconds": 115,
              "text": "and I'm passing in p there and he prints out 50."
            },
            {
              "seconds": 119,
              "text": "So we can do some simple expressions there index and attribute access."
            },
            {
              "seconds": 124,
              "text": "You try and call a function or do something like that"
            },
            {
              "seconds": 127,
              "text": "and it's going to bark at you and say that you can't do that."
            },
            {
              "seconds": 130,
              "text": "Here's an example of trying to call upper."
            },
            {
              "seconds": 133,
              "text": "So we pass in a string and we want to say"
            },
            {
              "seconds": 135,
              "text": "hey give me the upper attribute, but also invoke it with parentheses here"
            },
            {
              "seconds": 139,
              "text": "and it gives me there's no attribute upper with parentheses following it."
            },
            {
              "seconds": 144,
              "text": "So it's trying to do some things"
            },
            {
              "seconds": 147,
              "text": "to not allow you to invoke or call arguments there."
            },
            {
              "seconds": 151,
              "text": "We talked about position and here's just an example of using position"
            },
            {
              "seconds": 155,
              "text": "if I want to say na na na na hey Jude,"
            },
            {
              "seconds": 158,
              "text": "I can repeat na 3 times just by putting the position in there,"
            },
            {
              "seconds": 163,
              "text": "note that I don't have to repeat na multiple times."
            },
            {
              "seconds": 166,
              "text": "Now, there's a whole little language for string formatting here."
            },
            {
              "seconds": 169,
              "text": "This is basically what can go where,"
            },
            {
              "seconds": 172,
              "text": "this next slide here is the crib sheet that tells you"
            },
            {
              "seconds": 176,
              "text": "what can actually go in the where"
            },
            {
              "seconds": 178,
              "text": "so I'll go over these briefly, don't try and memorize all this"
            },
            {
              "seconds": 184,
              "text": "you can refer back to this if you need to"
            },
            {
              "seconds": 187,
              "text": "but a lot of the times you don't need all these different formatting options."
            },
            {
              "seconds": 193,
              "text": "So a fill character, you can specify a fill character"
            },
            {
              "seconds": 197,
              "text": "the default character here is a space and you don't need to put anything in there."
            },
            {
              "seconds": 203,
              "text": "There's an alignment that allows you to center right or pad align things"
            },
            {
              "seconds": 209,
              "text": "by using one of these four characters here,"
            },
            {
              "seconds": 212,
              "text": "less than, greater than, equal or the caret."
            },
            {
              "seconds": 215,
              "text": "There's a sign, we can stick in a sign here"
            },
            {
              "seconds": 217,
              "text": "so we can put a plus a minus or a space"
            },
            {
              "seconds": 220,
              "text": "if we have a plus in there,"
            },
            {
              "seconds": 223,
              "text": "then we're going to put a sign in front of all numbers."
            },
            {
              "seconds": 226,
              "text": "If we have a minus in front of there,"
            },
            {
              "seconds": 229,
              "text": "then we're going to put a sign in front of negative numbers"
            },
            {
              "seconds": 232,
              "text": "and with a space we will put a space in front of positive numbers"
            },
            {
              "seconds": 237,
              "text": "and the sign in front of negative numbers."
            },
            {
              "seconds": 239,
              "text": "We can put this hash in there and that just says"
            },
            {
              "seconds": 243,
              "text": "if I've got a number that's a binary, octal or hex,"
            },
            {
              "seconds": 248,
              "text": "I want you to stick 0b, 0o or 0x in front of those respectively."
            },
            {
              "seconds": 254,
              "text": "There's an option here to do zero padding"
            },
            {
              "seconds": 258,
              "text": "so we can stick in a zero there"
            },
            {
              "seconds": 262,
              "text": "and if we have numbers we'll get padding after that,"
            },
            {
              "seconds": 264,
              "text": "the default there is space so it doesn't stick in padding,"
            },
            {
              "seconds": 268,
              "text": "but if you want to have zero padding on the left you can do that."
            },
            {
              "seconds": 272,
              "text": "We can specify the minimum width if we want"
            },
            {
              "seconds": 275,
              "text": "something to take at least 3 spaces, we can say 3 in there."
            },
            {
              "seconds": 279,
              "text": "We can also specify a thousands separator,"
            },
            {
              "seconds": 281,
              "text": "there is no thousands separator by default,"
            },
            {
              "seconds": 284,
              "text": "but if we want to have a comma as a thousands separator"
            },
            {
              "seconds": 287,
              "text": "we can put that in there."
            },
            {
              "seconds": 289,
              "text": "Also, we can put a precision following a period,"
            },
            {
              "seconds": 292,
              "text": "this is for floating-point numbers."
            },
            {
              "seconds": 295,
              "text": "If you want to have five digits of precision, you can put .5"
            },
            {
              "seconds": 298,
              "text": "and that will give you the precision."
            },
            {
              "seconds": 301,
              "text": "If you have a string that's going in,"
            },
            {
              "seconds": 303,
              "text": "then this will give you the max length of the string."
            },
            {
              "seconds": 306,
              "text": "So if I want to take uh up to 5 characters of that you can put 5 in there."
            },
            {
              "seconds": 310,
              "text": "And finally, at the end here, we have a type."
            },
            {
              "seconds": 312,
              "text": "There are various types that we can specify, these are all on the bottom here."
            },
            {
              "seconds": 317,
              "text": "The default is s which means just give me the string representation of that."
            },
            {
              "seconds": 321,
              "text": "We can also provide r to give us the repr."
            },
            {
              "seconds": 324,
              "text": "There are various options that we can use for numbers that are integer numbers"
            },
            {
              "seconds": 330,
              "text": "and here are some floating-point options we can use as well."
            },
            {
              "seconds": 333,
              "text": "So e for lowercase exponent, E for uppercase exponent"
            },
            {
              "seconds": 338,
              "text": "f for fixed point, g general, it changes between fixed point and exponent"
            },
            {
              "seconds": 344,
              "text": "to try and be nice to you."
            },
            {
              "seconds": 346,
              "text": "And n is a locale specific general version if you're in a different locale"
            },
            {
              "seconds": 351,
              "text": "and a % sign will convert a floating point number to a percent."
            },
            {
              "seconds": 356,
              "text": "So if you have .5 it will convert that to 50,"
            },
            {
              "seconds": 359,
              "text": "so lots of options and things that you can do in there."
            },
            {
              "seconds": 361,
              "text": "Don't memorize this, but you can come back"
            },
            {
              "seconds": 364,
              "text": "and refer to this if you need to."
            },
            {
              "seconds": 366,
              "text": "Here are some examples of formatting a string."
            },
            {
              "seconds": 368,
              "text": "Here I say that I want to format Ringo in 12 characters"
            },
            {
              "seconds": 373,
              "text": "and surrounded by asterisks here."
            },
            {
              "seconds": 377,
              "text": "So we put a colon here,"
            },
            {
              "seconds": 379,
              "text": "anything following the colon is the formatting options."
            },
            {
              "seconds": 382,
              "text": "You can see that we have an asterisk, that's the fill character"
            },
            {
              "seconds": 386,
              "text": "and then we have a caret and then we have 12"
            },
            {
              "seconds": 388,
              "text": "so we're going to take 12 characters and center that, caret means center."
            },
            {
              "seconds": 392,
              "text": "Here's one here, formatted percentage using a width of 10 with 1 decimal place"
            },
            {
              "seconds": 396,
              "text": "and a sign before the width padding."
            },
            {
              "seconds": 398,
              "text": "And so we see there's a colon, after the colon"
            },
            {
              "seconds": 401,
              "text": "is going to come our formatting options"
            },
            {
              "seconds": 403,
              "text": "we're going to use an equal that says put the space after our sign there"
            },
            {
              "seconds": 409,
              "text": "and we're going to use 10 characters and one character of decimal precision."
            },
            {
              "seconds": 415,
              "text": "And then, since it's a percent, we're going to"
            },
            {
              "seconds": 418,
              "text": "multiply it by 100 to convert it to a percent."
            },
            {
              "seconds": 421,
              "text": "And so we see 44 divided by 100 would be .44"
            },
            {
              "seconds": 424,
              "text": "but this is going to multiply that by 100."
            },
            {
              "seconds": 427,
              "text": "Here's a simple binary and hex conversion."
            },
            {
              "seconds": 429,
              "text": "We just put :B and 12 as binary is 1100"
            },
            {
              "seconds": 435,
              "text": "12 as hex is c."
            },
            {
              "seconds": 438,
              "text": "There's a little link at the bottom here pyformat.info,"
            },
            {
              "seconds": 441,
              "text": "it's a nice website, you should go visit that"
            },
            {
              "seconds": 443,
              "text": "and it has a bunch of examples of doing string formatting"
            },
            {
              "seconds": 446,
              "text": "in what it calls the old school way of doing it,"
            },
            {
              "seconds": 450,
              "text": "which is using the mod operator and the c-style placeholders"
            },
            {
              "seconds": 455,
              "text": "and some examples of doing that with the newer format method,"
            },
            {
              "seconds": 458,
              "text": "great examples in there, nice little resource to know about when you forget"
            },
            {
              "seconds": 463,
              "text": "the formatting options and want to see some examples."
            }
          ]
        },
        {
          "lecture_id": 120306,
          "lecture_title": "Walk-through: String Formatting",
          "vimeo_id": 7111383801542247,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at format test, open that up in your editor."
            },
            {
              "seconds": 3,
              "text": "Let's look at the first problem."
            },
            {
              "seconds": 5,
              "text": "It says create a string variable f1 to show a stock price."
            },
            {
              "seconds": 7,
              "text": "It should have three placeholders,"
            },
            {
              "seconds": 9,
              "text": "using the format method to print given data like a name that has a string,"
            },
            {
              "seconds": 14,
              "text": "price that has a float and change that as a float."
            },
            {
              "seconds": 17,
              "text": "It should be able to print a string that has name"
            },
            {
              "seconds": 22,
              "text": "with the name inserted a couple spaces,"
            },
            {
              "seconds": 24,
              "text": "then the price with a $ sign and the price formatted as a floating point,"
            },
            {
              "seconds": 28,
              "text": "with two decimal places and the change format is %."
            },
            {
              "seconds": 32,
              "text": "Let's see if we can do this here, f1 is equal to"
            },
            {
              "seconds": 36,
              "text": "name: we need a placeholder for that, string name,"
            },
            {
              "seconds": 40,
              "text": "so we'll just put a placeholder there, it looks like we've got some spaces here."
            },
            {
              "seconds": 44,
              "text": "So we'll just copy those amount of spaces and stick them down here below."
            },
            {
              "seconds": 58,
              "text": "And then, we'll say price and I need to put a $ sign here."
            },
            {
              "seconds": 61,
              "text": "And this is going to be formatted as a float."
            },
            {
              "seconds": 64,
              "text": "So I'm going to put: with two decimal places and f"
            },
            {
              "seconds": 68,
              "text": "and put change and we're going to put our change in here."
            },
            {
              "seconds": 74,
              "text": "It's going to have two decimal places"
            },
            {
              "seconds": 76,
              "text": "and it's going to be formatted as a percentage."
            },
            {
              "seconds": 79,
              "text": "Let's try this to see if it works, so just hit run here."
            },
            {
              "seconds": 84,
              "text": "Okay, and so we've got f2 does not work but this part worked."
            },
            {
              "seconds": 88,
              "text": "So we're down to the second part, create f2, it should look like f1"
            },
            {
              "seconds": 92,
              "text": "but have 10 spaces for each left-aligned placeholder."
            },
            {
              "seconds": 96,
              "text": "So each one of these curly braces is a placeholder"
            },
            {
              "seconds": 99,
              "text": "just copy this and plop it down here."
            },
            {
              "seconds": 103,
              "text": "Let's change this to F2 and if we want 10 spaces in here,"
            },
            {
              "seconds": 108,
              "text": "so in order to use 10 spaces, we can put a colon here and say left-aligned 10."
            },
            {
              "seconds": 115,
              "text": "We just put a less than 10 at the front and that should give us 10 spaces here."
            },
            {
              "seconds": 121,
              "text": "Let's give it a try and see if it works."
            },
            {
              "seconds": 125,
              "text": "So let's run this again."
            },
            {
              "seconds": 127,
              "text": "And it appeared to work."
            },
            {
              "seconds": 130,
              "text": "So simply by putting that less than 10 at the front"
            },
            {
              "seconds": 134,
              "text": "that says I want to make this APPL here take up 10 spaces"
            },
            {
              "seconds": 138,
              "text": "and whatever's in there I want to be left aligned."
            },
            {
              "seconds": 141,
              "text": "Okay, great, f3, it should have 3 placeholders"
            },
            {
              "seconds": 144,
              "text": "and should be able to create the f1 or f2 strings"
            },
            {
              "seconds": 148,
              "text": "the placeholders except the formatting string."
            },
            {
              "seconds": 151,
              "text": "So this is sort of meta here."
            },
            {
              "seconds": 153,
              "text": "So this is saying I want you to create something"
            },
            {
              "seconds": 155,
              "text": "that could create this or could create this"
            },
            {
              "seconds": 158,
              "text": "and the end user is going to pass in the contents of this."
            },
            {
              "seconds": 161,
              "text": "So, let's see if we can do that here, f3 is equal to a string"
            },
            {
              "seconds": 169,
              "text": "and we're going to say name colon"
            },
            {
              "seconds": 173,
              "text": "and then we're going to have a placeholder here."
            },
            {
              "seconds": 176,
              "text": "But we want to be able to have curly braces in there"
            },
            {
              "seconds": 180,
              "text": "because we want the output of the format to have curly braces."
            },
            {
              "seconds": 183,
              "text": "So we've got to put two curly braces,"
            },
            {
              "seconds": 186,
              "text": "if we put two curly braces, then that's considered an escape."
            },
            {
              "seconds": 190,
              "text": "So this would show our curly braces."
            },
            {
              "seconds": 193,
              "text": "Then we need to put another curly brace pair inside"
            },
            {
              "seconds": 196,
              "text": "for where we need to put our formatting."
            },
            {
              "seconds": 198,
              "text": "And we'll do our spaces here and price"
            },
            {
              "seconds": 204,
              "text": "and we're going to have to again do our curly braces"
            },
            {
              "seconds": 211,
              "text": "and change 1, 2, 3, 1, 2, 3."
            },
            {
              "seconds": 215,
              "text": "So this is how you include curly braces, you simply use two of them"
            },
            {
              "seconds": 220,
              "text": "and then Python is not going to use those as placeholders,"
            },
            {
              "seconds": 224,
              "text": "but rather it's going to just put a curly brace there."
            },
            {
              "seconds": 227,
              "text": "Let's try it and see if it works."
            },
            {
              "seconds": 229,
              "text": "Okay, it looks like it worked and you can see in the test here"
            },
            {
              "seconds": 233,
              "text": "it's saying I want you to format on f3 with empty, with nothing,"
            },
            {
              "seconds": 238,
              "text": "with a float, with two places and a percent with two places."
            },
            {
              "seconds": 243,
              "text": "And then with that, I want to call format again,"
            },
            {
              "seconds": 246,
              "text": "so that should have the placeholders now with the formatting strings in there."
            },
            {
              "seconds": 250,
              "text": "And if you do that, we should get back"
            },
            {
              "seconds": 253,
              "text": "to the original thing that we had back in f1 up above."
            },
            {
              "seconds": 256,
              "text": "Hopefully, you feel like you understand formatting a little bit more."
            },
            {
              "seconds": 262,
              "text": "There's a lot more to it."
            },
            {
              "seconds": 264,
              "text": "Again, you can refer to the slide deck"
            },
            {
              "seconds": 266,
              "text": "or the website that was referred to in the slide deck"
            },
            {
              "seconds": 268,
              "text": "for more examples of how to do formatting."
            }
          ]
        },
        {
          "lecture_id": 120307,
          "lecture_title": "f-Strings",
          "vimeo_id": 7111234663029377,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video we're going to talk about literal string interpolation pep 498"
            },
            {
              "seconds": 5,
              "text": "this came out in Python 3.6 and this is probably"
            },
            {
              "seconds": 8,
              "text": "one of the most exciting features of Python 3,"
            },
            {
              "seconds": 10,
              "text": "or one of the features that people really enjoy using"
            },
            {
              "seconds": 14,
              "text": "and feel like maybe it should have been introduced quite a while ago."
            },
            {
              "seconds": 17,
              "text": "The existing ways of formatting strings are either"
            },
            {
              "seconds": 20,
              "text": "error-prone and flexible or cumbersome."
            },
            {
              "seconds": 23,
              "text": "So here's the progression of the old-school style,"
            },
            {
              "seconds": 26,
              "text": "which is the c style of formatting with the placeholders as percent"
            },
            {
              "seconds": 30,
              "text": "as or whatnot the pep 3101 with curly braces,"
            },
            {
              "seconds": 35,
              "text": "and then this newer style which is called literal string interpolation."
            },
            {
              "seconds": 38,
              "text": "You can see that there's a f in front of the string literal"
            },
            {
              "seconds": 42,
              "text": "and then inside of these placeholders,"
            },
            {
              "seconds": 44,
              "text": "we are passing in Python Expressions here."
            },
            {
              "seconds": 47,
              "text": "Note that there is no format at the end here."
            },
            {
              "seconds": 50,
              "text": "So it's just looking into my name space"
            },
            {
              "seconds": 52,
              "text": "and seeing that there is a variable called coin and a variable called price"
            },
            {
              "seconds": 55,
              "text": "and it's sticking those into those placeholders"
            },
            {
              "seconds": 58,
              "text": "and we get this nice syntax for sticking in variables"
            },
            {
              "seconds": 63,
              "text": "and having interpolation occur inside of that string."
            },
            {
              "seconds": 66,
              "text": "So basically to get this functionality in Python 3.6"
            },
            {
              "seconds": 70,
              "text": "you stick an f in front of your string literal"
            },
            {
              "seconds": 72,
              "text": "and then you can put an expression inside of your curly braces."
            },
            {
              "seconds": 75,
              "text": "Here's an example, it just doesn't have to be a variable."
            },
            {
              "seconds": 78,
              "text": "Here we are defining a function called to Spanish and inside of our string literal"
            },
            {
              "seconds": 84,
              "text": "we are calling the to Spanish function here"
            },
            {
              "seconds": 88,
              "text": "and we are passing in val here in the first placeholder"
            },
            {
              "seconds": 92,
              "text": "and we're passing in val in the to Spanish call and we're getting a result there."
            },
            {
              "seconds": 98,
              "text": "The Python 3 101 format specifier doesn't allow"
            },
            {
              "seconds": 102,
              "text": "anything other than index and attribute access,"
            },
            {
              "seconds": 105,
              "text": "but this allows you to put arbitrary expressions in there."
            },
            {
              "seconds": 108,
              "text": "So there's a lot of power in there, you can go crazy if you want to"
            },
            {
              "seconds": 111,
              "text": "but it also allows you to be a little bit more succinct with your strings and string creation."
            },
            {
              "seconds": 118,
              "text": "This syntax also supports the pep 3101 string formatting."
            },
            {
              "seconds": 123,
              "text": "So if you put in a colon in there following the colon you can put a format specifier"
            },
            {
              "seconds": 129,
              "text": "and that will indicate how you want to format whatever was passed in"
            },
            {
              "seconds": 134,
              "text": "into the placeholder there."
            },
            {
              "seconds": 137,
              "text": "So this says val is 12 and we're going to format that"
            },
            {
              "seconds": 140,
              "text": "with the b or as a binary likewise this one down here, format to this hex."
            },
            {
              "seconds": 145,
              "text": "The pep specifies that you can use these f strings with normal Python strings."
            },
            {
              "seconds": 151,
              "text": "You can also use them with raw strings,"
            },
            {
              "seconds": 153,
              "text": "but you cannot use them with byte strings or unicode literals."
            },
            {
              "seconds": 157,
              "text": "Those are the literals that have the u in front of them."
            },
            {
              "seconds": 160,
              "text": "Another thing to be wary of is including a backslash in the literal string"
            },
            {
              "seconds": 165,
              "text": "Python complains about that."
            },
            {
              "seconds": 167,
              "text": "So if you want to get a backslash in there"
            },
            {
              "seconds": 169,
              "text": "make a variable that has that backslash and make a reference to that variable,"
            },
            {
              "seconds": 173,
              "text": "kind of an uncommon thing there but something that might get you."
            },
            {
              "seconds": 176,
              "text": "Another nicety of this is that this is also faster."
            },
            {
              "seconds": 181,
              "text": "So I've got some timings here on my machine,"
            },
            {
              "seconds": 183,
              "text": "but you see that with the old c style you had pretty decent speed"
            },
            {
              "seconds": 189,
              "text": "this slowed down when we called the format method and then"
            },
            {
              "seconds": 192,
              "text": "when we put this as a literal string interpolation"
            },
            {
              "seconds": 196,
              "text": "when we introduced the app, we get some speed up"
            },
            {
              "seconds": 199,
              "text": "and we're actually faster than the old method."
            },
            {
              "seconds": 201,
              "text": "So this isn't going to be a change that if you use this"
            },
            {
              "seconds": 205,
              "text": "you're going to have to use half as many web servers or whatnot"
            },
            {
              "seconds": 207,
              "text": "but it is nice that this feature is faster."
            },
            {
              "seconds": 210,
              "text": "So I hope you've learned a little bit about f strings in here."
            },
            {
              "seconds": 214,
              "text": "Once you start using these, you'll wonder why this wasn't introduced earlier."
            },
            {
              "seconds": 218,
              "text": "It's a really nice syntax that allows us to be brief, but also be explicit."
            }
          ]
        },
        {
          "lecture_id": 120308,
          "lecture_title": "Walk-through: f-Strings",
          "vimeo_id": 7111718283970820,
          "subtitles": [
            {
              "seconds": 0,
              "text": "We're going to look at fstring test, open that up."
            },
            {
              "seconds": 3,
              "text": "The first part says assuming the variable stock and price exist"
            },
            {
              "seconds": 6,
              "text": "make a variable res that has Stock and then whatever the stock value is"
            },
            {
              "seconds": 12,
              "text": "then price and whatever the price value is."
            },
            {
              "seconds": 14,
              "text": "You should use an fstring to do this."
            },
            {
              "seconds": 16,
              "text": "So long behold here is stock and price."
            },
            {
              "seconds": 19,
              "text": "So let's make a variable called res, that's an fstring."
            },
            {
              "seconds": 22,
              "text": "So to make an fstring we put an f in front of our string"
            },
            {
              "seconds": 25,
              "text": "and I'm going to say Stock here and then I want the value of stock,"
            },
            {
              "seconds": 31,
              "text": "in this case I'll just put it in curly braces here"
            },
            {
              "seconds": 34,
              "text": "and then price here with the value of price."
            },
            {
              "seconds": 38,
              "text": "We could do some formatting here."
            },
            {
              "seconds": 43,
              "text": "In this case, it didn't particularly define that we include any specific formatting."
            },
            {
              "seconds": 47,
              "text": "Let's just run this and see if it works."
            },
            {
              "seconds": 53,
              "text": "And it looks like it worked here."
            },
            {
              "seconds": 55,
              "text": "So this will give us a string that looks like that, pretty cool."
            },
            {
              "seconds": 59,
              "text": "The next part says assume the variable x exists."
            },
            {
              "seconds": 62,
              "text": "And x is defined down here, create a variable answer"
            },
            {
              "seconds": 65,
              "text": "that has the sin of x using math.sin to 2 decimal places."
            },
            {
              "seconds": 70,
              "text": "And so it wants us to say x with the value of x then sin of x"
            },
            {
              "seconds": 75,
              "text": "with the sin of that, use an f string to do that."
            },
            {
              "seconds": 77,
              "text": "So the first thing we need to do is import the math libraries,"
            },
            {
              "seconds": 80,
              "text": "we're going to say import math here."
            },
            {
              "seconds": 84,
              "text": "Let's come down here and we'll make this variable called answer."
            },
            {
              "seconds": 87,
              "text": "It's going to be an fstring, so we'll put that in there."
            },
            {
              "seconds": 91,
              "text": "We need x and we'll put the value of x there"
            },
            {
              "seconds": 95,
              "text": "and we want sin of x with math.sin of x and we need to format it."
            },
            {
              "seconds": 106,
              "text": "So in order to provide formatting, we put a colon at the end here"
            },
            {
              "seconds": 110,
              "text": "and we're going to format this as a float."
            },
            {
              "seconds": 113,
              "text": "So, I believe we need to say .2f to get 2 decimal places."
            },
            {
              "seconds": 119,
              "text": "Let's try that and see if it works."
            },
            {
              "seconds": 128,
              "text": "Oh, I've got a typo here, I need to close off my embedding of my expression there."
            },
            {
              "seconds": 135,
              "text": "Let's try again."
            },
            {
              "seconds": 137,
              "text": "Okay, it looks like that worked."
            },
            {
              "seconds": 142,
              "text": "So this shows you that not only can you put expressions in here,"
            },
            {
              "seconds": 145,
              "text": "but you can put formatting with them as well using the formatting syntax."
            }
          ]
        },
        {
          "lecture_id": 120309,
          "lecture_title": "Unicode Literals",
          "vimeo_id": 7111244113712963,
          "subtitles": [
            {
              "seconds": 0,
              "text": "This video will discuss explicit unicode literals."
            },
            {
              "seconds": 3,
              "text": "These were created in Python 3.3 by pep for 414"
            },
            {
              "seconds": 8,
              "text": "and if you're using Python 2 and porting it to Python 3, these can be pretty important,"
            },
            {
              "seconds": 13,
              "text": "just in review, all strings are unicode in Python 3 by default"
            },
            {
              "seconds": 18,
              "text": "that wasn't the case in Python 2,"
            },
            {
              "seconds": 21,
              "text": "in Python 2 to make a unicode string or a unicode literal,"
            },
            {
              "seconds": 24,
              "text": "you would put a u in front of your string."
            },
            {
              "seconds": 26,
              "text": "So here's a little bit from the pep,"
            },
            {
              "seconds": 28,
              "text": "the requirement to change the spelling of every unicode literal in an application"
            },
            {
              "seconds": 32,
              "text": "regardless of how it is accomplished"
            },
            {
              "seconds": 34,
              "text": "is a key stumbling block for porting Python 2 to 3 efforts."
            },
            {
              "seconds": 37,
              "text": "So this is simply an inclusion in Python 3 to ease the porting effort from Python 2 to 3."
            },
            {
              "seconds": 44,
              "text": "If you're only writing Python 3 code you can disregard this,"
            },
            {
              "seconds": 47,
              "text": "but if you're using Python 2 and want to write code that works in both or migrate,"
            },
            {
              "seconds": 52,
              "text": "this can be something that can be useful."
            },
            {
              "seconds": 54,
              "text": "Here's just some brief code."
            },
            {
              "seconds": 57,
              "text": "It shows that I can create a unicode string or a Python string"
            },
            {
              "seconds": 59,
              "text": "by putting u in front of it and I can do the same thing without a u in front of it."
            },
            {
              "seconds": 66,
              "text": "and those are equivalent."
            },
            {
              "seconds": 68,
              "text": "Python 3 basically ignores the u and allows you to have it there for porting purposes."
            },
            {
              "seconds": 73,
              "text": "So this is a brief section but useful for those who are migrating from Python 2 to 3."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12004,
      "chapter_title": "Numbers",
      "lectures": [
        {
          "lecture_id": 120401,
          "lecture_title": "Division",
          "vimeo_id": 7111857061924969,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about integer division."
            },
            {
              "seconds": 3,
              "text": "This came out in Python 3 pep 238 introduced it."
            },
            {
              "seconds": 6,
              "text": "In Python 2 when you divided a number by another number"
            },
            {
              "seconds": 11,
              "text": "if you divided floats, you'd get back a float as a result,"
            },
            {
              "seconds": 14,
              "text": "but for integers, you would get back an integer as a result."
            },
            {
              "seconds": 17,
              "text": "And this is called floor division."
            },
            {
              "seconds": 19,
              "text": "Guido writes in his Python history blog about how this was a mistake"
            },
            {
              "seconds": 23,
              "text": "and Python 3 attempted to rectify this"
            },
            {
              "seconds": 27,
              "text": "by changing the behavior of the division operator."
            },
            {
              "seconds": 30,
              "text": "So in Python 3 slash does what's called true division"
            },
            {
              "seconds": 35,
              "text": "there's a __truediv__"
            },
            {
              "seconds": 38,
              "text": "and double slash does floor division __floordiv__"
            },
            {
              "seconds": 41,
              "text": "So if I divide 2 by 3 in Python 3, I get point .6666,"
            },
            {
              "seconds": 46,
              "text": "and if I say 2//3 then I get that floor division and I get back 0 as a result."
            },
            {
              "seconds": 55,
              "text": "Note that floor division also works on floats"
            },
            {
              "seconds": 58,
              "text": "if I say 2.0 divided by 3.1, I get .66,"
            },
            {
              "seconds": 61,
              "text": "but if I do floor division on those numbers, I get 0.0"
            },
            {
              "seconds": 65,
              "text": "and because everything is an object in Python,"
            },
            {
              "seconds": 67,
              "text": "if we want to we can go through the steps"
            },
            {
              "seconds": 69,
              "text": "to show that you can invoke __truediv__ on an integer and __floordiv__ as well."
            },
            {
              "seconds": 76,
              "text": "Now again, you typically don't do this, we typically don't call the dunder methods"
            },
            {
              "seconds": 80,
              "text": "but they're there because in Python everything is an object"
            },
            {
              "seconds": 82,
              "text": "and you can call the object methods if you want to."
            },
            {
              "seconds": 85,
              "text": "Quick summary, in Python 3 when you divide two numbers,"
            },
            {
              "seconds": 89,
              "text": "you will get a float as a result."
            },
            {
              "seconds": 92,
              "text": "If you don't want a float then use a double divide"
            },
            {
              "seconds": 95,
              "text": "to do what's called floor division."
            }
          ]
        },
        {
          "lecture_id": 120402,
          "lecture_title": "Long Unification",
          "vimeo_id": 7111314871780264,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about pep 237, came out in Python 3"
            },
            {
              "seconds": 4,
              "text": "and this is the unification of long and integer types."
            },
            {
              "seconds": 7,
              "text": "From the pep it says there is also the greater desire to hide unnecessary details"
            },
            {
              "seconds": 11,
              "text": "from the Python user when they're irrelevant for most applications."
            },
            {
              "seconds": 15,
              "text": "It makes sense to extend this convenience to numbers."
            },
            {
              "seconds": 18,
              "text": "If you're familiar, in Python 2 there was a long integer type"
            },
            {
              "seconds": 22,
              "text": "and a normal integer type."
            },
            {
              "seconds": 25,
              "text": "And you could tell one from the other"
            },
            {
              "seconds": 27,
              "text": "because when you print it out a long type there was an L after it."
            },
            {
              "seconds": 30,
              "text": "Now Python supports arbitrary precision in integers"
            },
            {
              "seconds": 32,
              "text": "it's only limited by the amount of memory you have"
            },
            {
              "seconds": 35,
              "text": "so you can make pretty big integers if you want to."
            },
            {
              "seconds": 38,
              "text": "Here's an example of creating big integers"
            },
            {
              "seconds": 41,
              "text": "and we're calling the sys.getsizeof on our integers"
            },
            {
              "seconds": 44,
              "text": "and just seeing that as we create bigger and bigger integers,"
            },
            {
              "seconds": 48,
              "text": "that the number of bytes required to store those integers gets bigger."
            },
            {
              "seconds": 52,
              "text": "And so what's happening here is that Python's doing an automatic transition"
            },
            {
              "seconds": 57,
              "text": "from the native integers to these longer integers,"
            },
            {
              "seconds": 61,
              "text": "but it's hiding that from you, you don't notice it."
            },
            {
              "seconds": 65,
              "text": "Typically we don't even inspect a number of bytes that we're using in Python,"
            },
            {
              "seconds": 68,
              "text": "but this just allows us to see that we can make arbitrary large integers"
            },
            {
              "seconds": 72,
              "text": "and they'll just use more memory, but Python will allow us to do that."
            },
            {
              "seconds": 77,
              "text": "If you're interested in the details of this"
            },
            {
              "seconds": 79,
              "text": "you can look at the c code on python.org or in the GitHub project"
            },
            {
              "seconds": 82,
              "text": "and that's in the include/longintrepr.h and objects/longobject.c"
            },
            {
              "seconds": 89,
              "text": "the details of how this is handled."
            },
            {
              "seconds": 92,
              "text": "For most people this isn't a big deal because again in Python,"
            },
            {
              "seconds": 96,
              "text": "we just let Python do what it wants to do."
            },
            {
              "seconds": 98,
              "text": "and if we have an error we deal with the error,"
            },
            {
              "seconds": 102,
              "text": "but typically, when we're dealing with integers or whatnot there aren't errors"
            },
            {
              "seconds": 104,
              "text": "with this and the float division that we saw prior"
            },
            {
              "seconds": 107,
              "text": "a lot of the inconsistencies or warts in Python are hidden away from end users."
            }
          ]
        },
        {
          "lecture_id": 120403,
          "lecture_title": "Rounding",
          "vimeo_id": 7111929598058756,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to talk about rounding."
            },
            {
              "seconds": 2,
              "text": "Let's read from what's new in Python 3"
            },
            {
              "seconds": 5,
              "text": "the round function, rounding strategy in return type have changed,"
            },
            {
              "seconds": 9,
              "text": "exact halfway cases are now rounded to the nearest even result"
            },
            {
              "seconds": 13,
              "text": "instead of away from 0, for example round 2.5 now returns 2 rather than 3."
            },
            {
              "seconds": 19,
              "text": "So if you're not familiar with this, this is called banker's rounding"
            },
            {
              "seconds": 24,
              "text": "and we round towards the nearest even number"
            },
            {
              "seconds": 28,
              "text": "so round 2.5, 2 is even 3 is not even, so it's going to round it to 2."
            },
            {
              "seconds": 33,
              "text": "Round 3.5, 3 is not even 4 is, so it's going to round it to 4."
            },
            {
              "seconds": 38,
              "text": "And why is this called banker's rounding"
            },
            {
              "seconds": 40,
              "text": "is because if you're rounding and you're in a bank"
            },
            {
              "seconds": 43,
              "text": "and you always round up you're going to bias towards the high end"
            },
            {
              "seconds": 46,
              "text": "and you're biased towards more than what you actually have."
            },
            {
              "seconds": 49,
              "text": "If you round towards even, then you're alternating"
            },
            {
              "seconds": 52,
              "text": "and presumably your bias is going to offset one another"
            },
            {
              "seconds": 56,
              "text": "and in the end you'll come out more accurate."
            },
            {
              "seconds": 59,
              "text": "That's the theory behind rounding towards even."
            },
            {
              "seconds": 62,
              "text": "And here's just a slide that says what I just said"
            },
            {
              "seconds": 65,
              "text": "to the nearest even number is called banker's rounding"
            },
            {
              "seconds": 68,
              "text": "it tries to eliminate bias to rounding high."
            },
            {
              "seconds": 71,
              "text": "One thing to be aware of is this, note in the Python docs it says"
            },
            {
              "seconds": 75,
              "text": "the behavior of round for floats can be surprising"
            },
            {
              "seconds": 78,
              "text": "for example, round 2.6752 gives to 2.67 instead of the expected 2.68"
            },
            {
              "seconds": 86,
              "text": "this is not a bug, it's a result of the fact that most decimal fractions"
            },
            {
              "seconds": 90,
              "text": "can't be represented exactly as a float."
            },
            {
              "seconds": 93,
              "text": "So what's going under the covers there"
            },
            {
              "seconds": 96,
              "text": "is that 2.675 if you create a number that represents that"
            },
            {
              "seconds": 102,
              "text": "it's actually going to be closer to 2.67 than 2.68"
            },
            {
              "seconds": 106,
              "text": "and so when you round it to two places,"
            },
            {
              "seconds": 109,
              "text": "Python is going to note that and it's going to round it correctly,"
            },
            {
              "seconds": 113,
              "text": "even though to us users, who at least in the US,"
            },
            {
              "seconds": 116,
              "text": "I think it's a US-centric view that you round up"
            },
            {
              "seconds": 119,
              "text": "and this is rounding to what's more close,"
            },
            {
              "seconds": 124,
              "text": "even though 2.675 seems closer to some people to 2.68."
            },
            {
              "seconds": 128,
              "text": "Here's an example of that."
            },
            {
              "seconds": 130,
              "text": "I can say round 0.5 to 1 digit and round .15 to 1 digit of precision"
            },
            {
              "seconds": 136,
              "text": "those both round to .1 and that's because under the covers"
            },
            {
              "seconds": 140,
              "text": "the float number that represents them is actually closer to those numbers"
            },
            {
              "seconds": 145,
              "text": "than the other option for rounding."
            },
            {
              "seconds": 148,
              "text": "So this is something that's new in Python 3."
            },
            {
              "seconds": 151,
              "text": "I personally ran into this when I was doing some work on porting some Excel spreadsheets"
            },
            {
              "seconds": 156,
              "text": "and so interesting behavior here,"
            },
            {
              "seconds": 159,
              "text": "but again, the bias is towards being more correct in the average term"
            },
            {
              "seconds": 165,
              "text": "rather than always rounding up."
            }
          ]
        },
        {
          "lecture_id": 120404,
          "lecture_title": "Underscores in Numerics",
          "vimeo_id": 7111261647865386,
          "subtitles": [
            {
              "seconds": 0,
              "text": "One talk about another feature in Python 3."
            },
            {
              "seconds": 3,
              "text": "This came out pep 515 in Python 3.6"
            },
            {
              "seconds": 6,
              "text": "this is the ability to use underscores in numeric literals."
            },
            {
              "seconds": 9,
              "text": "When we say literals, sometimes people are confused"
            },
            {
              "seconds": 14,
              "text": "or don't understand what that means."
            },
            {
              "seconds": 16,
              "text": "A literal is something that is built in into the language"
            },
            {
              "seconds": 19,
              "text": "and that the computer understands."
            },
            {
              "seconds": 21,
              "text": "So the fact that there are integer literals"
            },
            {
              "seconds": 24,
              "text": "you can type an integer number and Python will know under the covers"
            },
            {
              "seconds": 27,
              "text": "to make an integer for you."
            },
            {
              "seconds": 29,
              "text": "There are also string literals, simply put a quote around characters"
            },
            {
              "seconds": 33,
              "text": "and Python will create a stream for your under the covers."
            },
            {
              "seconds": 36,
              "text": "This is in contrast to a class where you might define your own class,"
            },
            {
              "seconds": 40,
              "text": "and in order to create your class, you'll have to call the constructor."
            },
            {
              "seconds": 43,
              "text": "There won't be a literal way that's built in into the language"
            },
            {
              "seconds": 47,
              "text": "to automatically create one of your classes by using some special syntax."
            },
            {
              "seconds": 51,
              "text": "The intent of underscores in numbers is"
            },
            {
              "seconds": 55,
              "text": "to be able to group decimals by thousands or hex by words"
            },
            {
              "seconds": 59,
              "text": "just to make them more readable."
            },
            {
              "seconds": 61,
              "text": "Here's some examples,"
            },
            {
              "seconds": 63,
              "text": "in this case, I have the number 120 million minus 3 million"
            },
            {
              "seconds": 67,
              "text": "and because I've put an underscores where typically"
            },
            {
              "seconds": 70,
              "text": "in English you would see a comma, it's very easy for me to say that"
            },
            {
              "seconds": 75,
              "text": "that's 120 million and 3 million."
            },
            {
              "seconds": 77,
              "text": "If I had left those underscores out of there,"
            },
            {
              "seconds": 79,
              "text": "it would be a little bit more hard to tell that."
            },
            {
              "seconds": 82,
              "text": "And in the second example, we have a hex number dead_beef"
            },
            {
              "seconds": 86,
              "text": "and we put in an underscore there to make it slightly more legible."
            },
            {
              "seconds": 90,
              "text": "One thing to be careful of is that Python doesn't enforce where you put these"
            },
            {
              "seconds": 95,
              "text": "you can put them wherever you want in numbers"
            },
            {
              "seconds": 97,
              "text": "as long as you don't have two underscores together."
            },
            {
              "seconds": 101,
              "text": "So in this case one, two, three, four, five, six, that's not helping legibility"
            },
            {
              "seconds": 107,
              "text": "by the intent here is to be able to improve legibility."
            },
            {
              "seconds": 110,
              "text": "So if you're dealing with large numbers or whatnot"
            },
            {
              "seconds": 112,
              "text": "consider using underscores,"
            },
            {
              "seconds": 114,
              "text": "and that will make your numbers a little bit easier to read."
            }
          ]
        },
        {
          "lecture_id": 120405,
          "lecture_title": "Walk-through: Number",
          "vimeo_id": 7111750000839732,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to look at num test,"
            },
            {
              "seconds": 2,
              "text": "open it up in your editor and validate that you can run it."
            },
            {
              "seconds": 6,
              "text": "If you don't run it from your editor,"
            },
            {
              "seconds": 8,
              "text": "run it from the command line, it should work as well."
            },
            {
              "seconds": 10,
              "text": "We see that there is one failure., it's a name error on line 8,"
            },
            {
              "seconds": 13,
              "text": "so I think we're good to go on my machine."
            },
            {
              "seconds": 16,
              "text": "Let's look at this first test here,"
            },
            {
              "seconds": 18,
              "text": "there are 102 floors in the Empire State Building,"
            },
            {
              "seconds": 20,
              "text": "if you have walked up a seventh of them,"
            },
            {
              "seconds": 24,
              "text": "how many whole floors have you walked up, store the result in floors."
            },
            {
              "seconds": 168000,
              "text": "So the idea here is to say we want to make the distinction"
            },
            {
              "seconds": 35,
              "text": "between true division and floor division,"
            },
            {
              "seconds": 39,
              "text": "because we're walking up floors that should be a hint"
            },
            {
              "seconds": 42,
              "text": "that we should use floor division here"
            },
            {
              "seconds": 44,
              "text": "which gives us this division or whole numbers,"
            },
            {
              "seconds": 48,
              "text": "So, 102 and we've walked up a seventh of those."
            },
            {
              "seconds": 54,
              "text": "So in Python 3 we use the double slash to get the floor division."
            },
            {
              "seconds": 59,
              "text": "Let's run it and see if it works,"
            },
            {
              "seconds": 64,
              "text": "and I have a typo, I did 107 instead 102, I'm trying again."
            },
            {
              "seconds": 69,
              "text": "Okay, so that one looked like it worked."
            },
            {
              "seconds": 72,
              "text": "So that's the whole number of floors that we walked up."
            },
            {
              "seconds": 76,
              "text": "What percentage of floors have you climbed,"
            },
            {
              "seconds": 78,
              "text": "store the result as a string with one decimal of precision in the variable per"
            },
            {
              "seconds": 83,
              "text": "so what percentage have we climbed?"
            },
            {
              "seconds": 87,
              "text": "I'm going to put it in an fstring here feature Python 3"
            },
            {
              "seconds": 90,
              "text": "so need to put curly braces around here."
            },
            {
              "seconds": 93,
              "text": "So we have climbed 7 out of 102."
            },
            {
              "seconds": 96,
              "text": "So 7 divided by 102 will give us the number of floors."
            },
            {
              "seconds": 101,
              "text": "Let's run this and see what it says."
            },
            {
              "seconds": 105,
              "text": "Okay. So this is what I got here"
            },
            {
              "seconds": 113,
              "text": "per do the reverse of it does it equal to that, no, it says it's not."
            },
            {
              "seconds": 121,
              "text": "So what's happening here?"
            },
            {
              "seconds": 124,
              "text": "I am getting a number that's not formatted correctly."
            },
            {
              "seconds": 127,
              "text": "So it wants me to format it as a percent."
            },
            {
              "seconds": 131,
              "text": "So in order to do that, I need to put a colon here"
            },
            {
              "seconds": 133,
              "text": "and this says I want one decimal, so I put .1"
            },
            {
              "seconds": 136,
              "text": "and then I put percent there to format it as a percent."
            },
            {
              "seconds": 139,
              "text": "Okay, in that case, it looks like it worked."
            },
            {
              "seconds": 143,
              "text": "It should be 6.9% doing a little trickery here."
            },
            {
              "seconds": 146,
              "text": "so you don't just cheat and type in 6.9%"
            },
            {
              "seconds": 149,
              "text": "Okay, I have (2^64)-1 satoshis, can I divide them wholly by 3."
            },
            {
              "seconds": 155,
              "text": "How many would each person get store the result in coins?"
            },
            {
              "seconds": 158,
              "text": "So again, this is floor division, if we want to do whole division."
            },
            {
              "seconds": 163,
              "text": "So coins = satoshis//3"
            },
            {
              "seconds": 169,
              "text": "and if we multiply that by 3, if it's integer or a floor division,"
            },
            {
              "seconds": 174,
              "text": "it should get us back to where we started from."
            },
            {
              "seconds": 177,
              "text": "So let's see here satoshis divided by 3."
            },
            {
              "seconds": 181,
              "text": "It looks like that is indeed the case you can divide them by 3."
            },
            {
              "seconds": 188,
              "text": "The US population is around 326 million, some number after that"
            },
            {
              "seconds": 198,
              "text": "how many whole coins would eat US citizen get, store the result in US coins."
            },
            {
              "seconds": 204,
              "text": "So US coins is equal to and there's a hint,"
            },
            {
              "seconds": 208,
              "text": "use underscore to make the population easier to read"
            },
            {
              "seconds": 211,
              "text": "so I'm going to say 326_979_681"
            },
            {
              "seconds": 219,
              "text": "so there's our total population and we are going to divide our coins."
            },
            {
              "seconds": 227,
              "text": "So whole coins would each person get, we need to divide satoshis."
            },
            {
              "seconds": 237,
              "text": "Satoshis divided by that,"
            },
            {
              "seconds": 240,
              "text": "that should give us the whole coins and let's run that."
            },
            {
              "seconds": 245,
              "text": "Okay, that looked like it worked."
            },
            {
              "seconds": 250,
              "text": "So again, when we do the double slash that's what we call floor division,"
            },
            {
              "seconds": 254,
              "text": "that gives us a whole integer number."
            },
            {
              "seconds": 257,
              "text": "Okay, I have .5 pumpkin pies and 1.5 apple pies."
            },
            {
              "seconds": 261,
              "text": "I want to use Python to round the number of each pie"
            },
            {
              "seconds": 264,
              "text": "store the result in pumpkin and apple,"
            },
            {
              "seconds": 267,
              "text": "so pumpkin = round (.5) and apple = round (1.5)"
            },
            {
              "seconds": 281,
              "text": "So you might think well, I do, I was taught when you round"
            },
            {
              "seconds": 284,
              "text": "if it's .5 you go up to the next number,"
            },
            {
              "seconds": 287,
              "text": "but apparently that's not always the case generally."
            },
            {
              "seconds": 292,
              "text": "Python 3 actually doesn't do that."
            },
            {
              "seconds": 294,
              "text": "It does what's called banker\u2019s rounding,"
            },
            {
              "seconds": 296,
              "text": "where it rounds to the nearest even number here."
            },
            {
              "seconds": 300,
              "text": "So this one should round to 2 and this one should round to 0"
            },
            {
              "seconds": 306,
              "text": "and that's why the sum of those is 2."
            },
            {
              "seconds": 309,
              "text": "Okay, hopefully that gave you a little feel for floor division in Python 3."
            },
            {
              "seconds": 316,
              "text": "And again, this is the behavior just a single slash in Python 2"
            },
            {
              "seconds": 320,
              "text": "and the ability to put underscores in number literals"
            },
            {
              "seconds": 325,
              "text": "just to help you read them better."
            },
            {
              "seconds": 327,
              "text": "These are good as commas, placeholders are also good in her and binary literals as well."
            },
            {
              "seconds": 335,
              "text": "And also, we learned a little bit about round,"
            },
            {
              "seconds": 338,
              "text": "how round does what's called banker\u2019s rounding"
            },
            {
              "seconds": 340,
              "text": "one of the benefits of that is that it eliminates the bias towards rounding high,"
            },
            {
              "seconds": 344,
              "text": "they should even out if you have randomly distributed numbers,"
            },
            {
              "seconds": 348,
              "text": "hence that's why bakers like to use banker\u2019s rounding."
            }
          ]
        },
        {
          "lecture_id": 120406,
          "lecture_title": "Statistics",
          "vimeo_id": 7111616089759650,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video we're going to talk about the new statistics module"
            },
            {
              "seconds": 3,
              "text": "that came out in Python 3.4, this was introduced in pep 450."
            },
            {
              "seconds": 7,
              "text": "From the pep we read, even simple statistical calculations"
            },
            {
              "seconds": 10,
              "text": "contain traps for the unwary,"
            },
            {
              "seconds": 12,
              "text": "this problem plagues users of many programming languages, not just Python"
            },
            {
              "seconds": 17,
              "text": "as coders reinvent the same numerically inaccurate code over and over again."
            },
            {
              "seconds": 22,
              "text": "Here's an example of some of the issues that someone might run into"
            },
            {
              "seconds": 25,
              "text": "when trying to implement some numerical code."
            },
            {
              "seconds": 28,
              "text": "This is a simple function for calculating the variance."
            },
            {
              "seconds": 31,
              "text": "That's the change of values over a sequence of numbers"
            },
            {
              "seconds": 36,
              "text": "how much they vary and here we are just calculating"
            },
            {
              "seconds": 40,
              "text": "the sum of the squares minus the square of the sums"
            },
            {
              "seconds": 45,
              "text": "and dividing by the numbers"
            },
            {
              "seconds": 47,
              "text": "so down below here, after we've defined variance"
            },
            {
              "seconds": 49,
              "text": "we pass in a list of numbers and we get the variance"
            },
            {
              "seconds": 52,
              "text": "and we say it's 2.5. It seems to be fine."
            },
            {
              "seconds": 55,
              "text": "The problem is when we add a large number to that"
            },
            {
              "seconds": 58,
              "text": "here we're adding 1e to the 13th"
            },
            {
              "seconds": 61,
              "text": "and we're getting numbers that still should have the same variance"
            },
            {
              "seconds": 66,
              "text": "because the difference between them is still between 1 and 5."
            },
            {
              "seconds": 69,
              "text": "And when you run that into our calculation here"
            },
            {
              "seconds": 72,
              "text": "you get a large negative number"
            },
            {
              "seconds": 75,
              "text": "and this illustrates some of the floating-point issues"
            },
            {
              "seconds": 78,
              "text": "that you might run into with simple naive calculations."
            },
            {
              "seconds": 81,
              "text": "And so the impetus of this pep is to help deal with some of these issues"
            },
            {
              "seconds": 86,
              "text": "and provide a pure Python implementation of some common statistical functions"
            },
            {
              "seconds": 90,
              "text": "that don't have these sorts of issues."
            },
            {
              "seconds": 94,
              "text": "Here we're showing an example of using the library."
            },
            {
              "seconds": 97,
              "text": "We simply import it, it's called statistics,"
            },
            {
              "seconds": 99,
              "text": "and inside of there, there are various functions."
            },
            {
              "seconds": 101,
              "text": "One of them is variance."
            },
            {
              "seconds": 103,
              "text": "We look at the variance of our same data"
            },
            {
              "seconds": 105,
              "text": "and we get 2.5, we add 1e to the 13th for each of those numbers"
            },
            {
              "seconds": 110,
              "text": "and we still get 2.5."
            },
            {
              "seconds": 112,
              "text": "There are various functions included in here."
            },
            {
              "seconds": 114,
              "text": "I'm not going to go over them, but you can look at the function"
            },
            {
              "seconds": 116,
              "text": "and if you're dealing with statistical problems,"
            },
            {
              "seconds": 119,
              "text": "you can use this code if you need to."
            },
            {
              "seconds": 122,
              "text": "Other nice thing to do is just to use the code to look at it"
            },
            {
              "seconds": 125,
              "text": "and glean some insights on how you might do numerical processing code in Python"
            },
            {
              "seconds": 130,
              "text": "and deal with some of these issues."
            },
            {
              "seconds": 133,
              "text": "This module is written in pure Python"
            },
            {
              "seconds": 135,
              "text": "and so you can simply load the module up and inspect it"
            },
            {
              "seconds": 139,
              "text": "and see what tools and techniques they're using."
            }
          ]
        },
        {
          "lecture_id": 120407,
          "lecture_title": "Walk-through: Statistics",
          "vimeo_id": 7111011491250383,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to look at stat test."
            },
            {
              "seconds": 2,
              "text": "So open that up in your editor."
            },
            {
              "seconds": 5,
              "text": "It looks like there's one function in here., let's run it."
            },
            {
              "seconds": 8,
              "text": "I'm just going to right click here and say run"
            },
            {
              "seconds": 11,
              "text": "and I get a name error on line 13."
            },
            {
              "seconds": 15,
              "text": "Okay, let's read what the test says to do"
            },
            {
              "seconds": 20,
              "text": "and see if we can make it so we don't get a name error, so we get a pass here."
            },
            {
              "seconds": 24,
              "text": "It says calculate the mean, variance and standard deviation of the data array,"
            },
            {
              "seconds": 29,
              "text": "store the results in m, v and s."
            },
            {
              "seconds": 32,
              "text": "So this wants us to use the statistics library."
            },
            {
              "seconds": 35,
              "text": "So from statistics, import and we can say"
            },
            {
              "seconds": 42,
              "text": "we're going to import the mean and the variance"
            },
            {
              "seconds": 47,
              "text": "and if we want to put this on another line, we could say stdev."
            },
            {
              "seconds": 53,
              "text": "So again, we put parentheses here"
            },
            {
              "seconds": 55,
              "text": "if we want to have our imports go across multiple lines."
            },
            {
              "seconds": 58,
              "text": "So here's data, we want to get the mean of it"
            },
            {
              "seconds": 61,
              "text": "m is equal to the mean of the data,"
            },
            {
              "seconds": 64,
              "text": "v is the variance, v equals variance of data."
            },
            {
              "seconds": 68,
              "text": "and s equals standard deviation of data, looks good."
            },
            {
              "seconds": 73,
              "text": "Let's run it\u2014 bingo, we're good."
            },
            {
              "seconds": 77,
              "text": "So this is a library that's built into Python"
            },
            {
              "seconds": 80,
              "text": "and it's good for doing basic statistics."
            },
            {
              "seconds": 83,
              "text": "So rather than writing your own, take advantage of this because it's there."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12005,
      "chapter_title": "Classes and inheritance",
      "lectures": [
        {
          "lecture_id": 120501,
          "lecture_title": "super()",
          "vimeo_id": 7111047643285522,
          "subtitles": [
            {
              "seconds": 1,
              "text": "Let's talk about the new behavior for super in Python 3."
            },
            {
              "seconds": 5,
              "text": "This comes from Pep 3135."
            },
            {
              "seconds": 9,
              "text": "If you're not familiar with super, super is a mechanism that we use in Python"
            },
            {
              "seconds": 13,
              "text": "to get access to a parent class."
            },
            {
              "seconds": 16,
              "text": "So if you have some method in a subclass"
            },
            {
              "seconds": 20,
              "text": "and you want to call the parent class,"
            },
            {
              "seconds": 22,
              "text": "you can call super and then pass in the arguments to the parent method"
            },
            {
              "seconds": 27,
              "text": "and get access to it that way."
            },
            {
              "seconds": 29,
              "text": "In Python 2 this was a little convoluted and a little confusing."
            },
            {
              "seconds": 33,
              "text": "So the syntax in Python 3 is cleaned up a little bit and we'll talk about that."
            },
            {
              "seconds": 37,
              "text": "Just as a review, a couple of things that you might want to do"
            },
            {
              "seconds": 40,
              "text": "when you're doing object-oriented programming and you're subclassing things."
            },
            {
              "seconds": 44,
              "text": "So if you've got a subclass, you can defer to the parent class for a method."
            },
            {
              "seconds": 48,
              "text": "To defer to a parent class, you don't have to do anything."
            },
            {
              "seconds": 50,
              "text": "You don't even have to implement the method."
            },
            {
              "seconds": 52,
              "text": "You just leave it there and when you call the method on the subclass,"
            },
            {
              "seconds": 55,
              "text": "it will call the parent class."
            },
            {
              "seconds": 57,
              "text": "You can override a method or overload and in order to do that,"
            },
            {
              "seconds": 61,
              "text": "you just implement the method in the subclass."
            },
            {
              "seconds": 64,
              "text": "And another thing you can do is specialize or take advantage"
            },
            {
              "seconds": 67,
              "text": "of the parent implementation, but also add your own implementation to it"
            },
            {
              "seconds": 72,
              "text": "and super allows us to do that."
            },
            {
              "seconds": 74,
              "text": "Here's what not to do, if I've got a class called animal,"
            },
            {
              "seconds": 77,
              "text": "I've got a subclass of animal called cat,"
            },
            {
              "seconds": 79,
              "text": "both of these Implement a method called talk"
            },
            {
              "seconds": 82,
              "text": "for animal talk just return sound and for cat talk does a little bit more,"
            },
            {
              "seconds": 87,
              "text": "it's going to call the parent method talk"
            },
            {
              "seconds": 91,
              "text": "and then it's going to add and purr onto the end of that."
            },
            {
              "seconds": 95,
              "text": "In the cat talk method, you'll note that we call the parent class."
            },
            {
              "seconds": 99,
              "text": "We call animal.talk to get sound, the string sound back."
            },
            {
              "seconds": 103,
              "text": "And then we're going to stick that into this placeholder"
            },
            {
              "seconds": 106,
              "text": "and return sound and purr at the bottom here."
            },
            {
              "seconds": 109,
              "text": "Now, this is what you don't want to do."
            },
            {
              "seconds": 111,
              "text": "You don't want to explicitly call animal,"
            },
            {
              "seconds": 114,
              "text": "rather we want to do something like this"
            },
            {
              "seconds": 116,
              "text": "where instead of calling animal we call super"
            },
            {
              "seconds": 118,
              "text": "and you invoke super and that will return the parent class"
            },
            {
              "seconds": 122,
              "text": "and call talk on the correct parent class."
            },
            {
              "seconds": 125,
              "text": "So this is how we do want to do that, and python is smart enough to know"
            },
            {
              "seconds": 129,
              "text": "that when super is called within a method that it will find the correct class to call it on."
            },
            {
              "seconds": 135,
              "text": "Here's a little drawing that shows what's going on under the covers."
            },
            {
              "seconds": 139,
              "text": "On the left hand side here, we've got the code for animal"
            },
            {
              "seconds": 142,
              "text": "and on the right hand side we've got a representation"
            },
            {
              "seconds": 145,
              "text": "of what's going on under the covers."
            },
            {
              "seconds": 147,
              "text": "We've got some objects here, so here's one object"
            },
            {
              "seconds": 150,
              "text": "and it has a variable called Animal that's pointing to that object,"
            },
            {
              "seconds": 155,
              "text": "inside of that object, there's an attribute called talk that's pointing to another object."
            },
            {
              "seconds": 159,
              "text": "and this is a function down here."
            },
            {
              "seconds": 161,
              "text": "This is what's going on in the virtual machine under the covers."
            },
            {
              "seconds": 164,
              "text": "Again, in Python everything is an object"
            },
            {
              "seconds": 166,
              "text": "and this is the representation that Python would do."
            },
            {
              "seconds": 169,
              "text": "Obviously there are going to be other attributes in here"
            },
            {
              "seconds": 172,
              "text": "that we're not showing in this case."
            },
            {
              "seconds": 174,
              "text": "We also note that every object has an ID"
            },
            {
              "seconds": 177,
              "text": "and you can inspect that ID by calling the ID function"
            },
            {
              "seconds": 180,
              "text": "and objects will also have a type as well."
            },
            {
              "seconds": 182,
              "text": "So when we subclass animal we're going to make another object called cat"
            },
            {
              "seconds": 187,
              "text": "and it's going to have a reference to the parent."
            },
            {
              "seconds": 191,
              "text": "It will look something like this."
            },
            {
              "seconds": 193,
              "text": "So here we have our prior animal variable"
            },
            {
              "seconds": 195,
              "text": "and we're going to make a new variable called cat,"
            },
            {
              "seconds": 197,
              "text": "cat is a subclass of animal and if it's a subclass"
            },
            {
              "seconds": 200,
              "text": "it's going to have an attribute called __bases__"
            },
            {
              "seconds": 203,
              "text": "__bases__ is actually a tuple,"
            },
            {
              "seconds": 205,
              "text": "in this case, we're just showing it that it refers back to the animal parent class here"
            },
            {
              "seconds": 209,
              "text": "and we'll note that animal has a talk method and cat has its own talk method."
            },
            {
              "seconds": 215,
              "text": "Again, this is the representation of what's going on inside the Python virtual machine,"
            },
            {
              "seconds": 220,
              "text": "but we can see that there's a relationship"
            },
            {
              "seconds": 223,
              "text": "between cat and animal due to our bases attribute."
            },
            {
              "seconds": 227,
              "text": "We could simplify this a little bit and we could say that a cat is an animal"
            },
            {
              "seconds": 231,
              "text": "and the relationship looks like this."
            },
            {
              "seconds": 234,
              "text": "This will be useful when we talk about method resolution in a diamond structure."
            },
            {
              "seconds": 238,
              "text": "There are a couple of useful things for using super"
            },
            {
              "seconds": 241,
              "text": "one is if you're refactoring your classes and changing the names of them,"
            },
            {
              "seconds": 245,
              "text": "you don't need to push that code for refactoring into the specialization calls."
            },
            {
              "seconds": 250,
              "text": "You can just leave super in there and it will do the right thing."
            },
            {
              "seconds": 253,
              "text": "It's also useful when you have multiple inheritance."
            },
            {
              "seconds": 256,
              "text": "There's this __mro__ attribute or mro method that you can call"
            },
            {
              "seconds": 261,
              "text": "that will resolve the order in which classes are called"
            },
            {
              "seconds": 265,
              "text": "and super does the right thing there."
            },
            {
              "seconds": 267,
              "text": "One thing to be aware of is that you need to be consistent"
            },
            {
              "seconds": 270,
              "text": "and only use super, you can't like I said before"
            },
            {
              "seconds": 272,
              "text": "explicitly hard-code the parent class in there."
            },
            {
              "seconds": 276,
              "text": "If you do that, then your other guys that are using super aren't going to work."
            },
            {
              "seconds": 280,
              "text": "So you want to make sure you only use super."
            },
            {
              "seconds": 282,
              "text": "Let's talk about method resolution order a little bit."
            },
            {
              "seconds": 285,
              "text": "Here's a class A and a class B, and then we have a class C and a class D."
            },
            {
              "seconds": 290,
              "text": "If we're going to draw these in our little diagram here"
            },
            {
              "seconds": 293,
              "text": "it would have A and it would have B."
            },
            {
              "seconds": 297,
              "text": "And then we have C here, C is an A, it subclasses A"
            },
            {
              "seconds": 305,
              "text": "and then we have D, and D derives from both C and B."
            },
            {
              "seconds": 310,
              "text": "So this would be our hierarchy over here."
            },
            {
              "seconds": 313,
              "text": "And we can inspect the method resolution order the mro by calling the mro method"
            },
            {
              "seconds": 318,
              "text": "and we see that we get D first, then C, then A, then B, and then object."
            },
            {
              "seconds": 325,
              "text": "Here's a diagram showing that, this is the same diagram that I had before"
            },
            {
              "seconds": 330,
              "text": "but we can see if we want to resolve a method on D"
            },
            {
              "seconds": 333,
              "text": "first we will look on the D class, if that's not there, we'll look on C"
            },
            {
              "seconds": 338,
              "text": "and because C is in A we're going to look on A,"
            },
            {
              "seconds": 341,
              "text": "and finally, if none of those guys implement, it will look on B."
            },
            {
              "seconds": 343,
              "text": "That's the method resolution order,"
            },
            {
              "seconds": 345,
              "text": "pretty straightforward when you don't have diamonds."
            },
            {
              "seconds": 349,
              "text": "The method resolution order falls what's known as the C3 linearization algorithm"
            },
            {
              "seconds": 354,
              "text": "and that's depth first generally, we saw an example of that in the last example,"
            },
            {
              "seconds": 358,
              "text": "but if you have a diamond pattern, we change it a little bit"
            },
            {
              "seconds": 362,
              "text": "and we use the last occurrence of repeated parents."
            },
            {
              "seconds": 365,
              "text": "Let's see an example of how this works."
            },
            {
              "seconds": 367,
              "text": "So here I have a diamond pattern, I've got a class A that is a subclass of dict,"
            },
            {
              "seconds": 375,
              "text": "So at the top here would have dict and then would have A, the subclass is that,"
            },
            {
              "seconds": 380,
              "text": "we also have B, the subclass is dict"
            },
            {
              "seconds": 383,
              "text": "and then we have C, that subclasses A"
            },
            {
              "seconds": 386,
              "text": "and we have D, that subclasses C and B."
            },
            {
              "seconds": 391,
              "text": "So this is called a diamond pattern"
            },
            {
              "seconds": 394,
              "text": "because you'll see that it has something at the top and something the bottom"
            },
            {
              "seconds": 397,
              "text": "and it branches out to the sides here."
            },
            {
              "seconds": 399,
              "text": "Here's the method resolution order, here's how we do it."
            },
            {
              "seconds": 402,
              "text": "We say the linearization of D is equal to D plus the linearization of its parent which is C and B."
            },
            {
              "seconds": 410,
              "text": "So I'll just draw what we have before here."
            },
            {
              "seconds": 413,
              "text": "We had dict and we had A and B, and we had C and D."
            },
            {
              "seconds": 424,
              "text": "In order to linearize this,"
            },
            {
              "seconds": 427,
              "text": "or find which classes we're going to look up our methods on,"
            },
            {
              "seconds": 431,
              "text": "first we need to start with D and then we're going to look at the linearization of C"
            },
            {
              "seconds": 436,
              "text": "and then the linearization of B."
            },
            {
              "seconds": 439,
              "text": "So D comes down and since D isn't repeated, we'll use D."
            },
            {
              "seconds": 443,
              "text": "The linearization of C is C plus the linearization of A"
            },
            {
              "seconds": 449,
              "text": "and the linearization of B is B plus linearization of dict."
            },
            {
              "seconds": 455,
              "text": "Let's expand that a little bit more."
            },
            {
              "seconds": 457,
              "text": "So we're going to have D plus C,"
            },
            {
              "seconds": 460,
              "text": "the linearization of A which is A plus the linearization of dict"
            },
            {
              "seconds": 464,
              "text": "plus B plus the linearization of dict"
            },
            {
              "seconds": 467,
              "text": "and since we've expanded all these out, we have all the classes here,"
            },
            {
              "seconds": 470,
              "text": "we'll note that there's a repeat, we have this dict here"
            },
            {
              "seconds": 474,
              "text": "which would just resolve to dict so both this guy and this guy would resolve to dict"
            },
            {
              "seconds": 479,
              "text": "and because this is a repeat, we're going to get rid of the first one here."
            },
            {
              "seconds": 484,
              "text": "And so the final linearization is first we'll go to D, then we'll go to C,"
            },
            {
              "seconds": 489,
              "text": "then we'll go to A, then we'll go to B, and finally we'll go to dict."
            },
            {
              "seconds": 494,
              "text": "That's how the algorithm works here."
            },
            {
              "seconds": 497,
              "text": "And if you inspect the mro method you'll see that that is indeed the case,"
            },
            {
              "seconds": 500,
              "text": "we get D, C, A, B, dict and then object."
            },
            {
              "seconds": 504,
              "text": "Object here is because every object is a subclass of object"
            },
            {
              "seconds": 507,
              "text": "and the result looks something like this"
            },
            {
              "seconds": 510,
              "text": "which is hard-coded graph of what we just drew out."
            },
            {
              "seconds": 513,
              "text": "In here we learned a little bit about super,"
            },
            {
              "seconds": 515,
              "text": "the main things to remember about super is"
            },
            {
              "seconds": 518,
              "text": "if you start subclassing things, you want to always use super"
            },
            {
              "seconds": 521,
              "text": "don't explicitly call parent classes"
            },
            {
              "seconds": 524,
              "text": "and super will do the right thing if you're calling super,"
            },
            {
              "seconds": 527,
              "text": "so super is a great tool to have and make use of it."
            }
          ]
        },
        {
          "lecture_id": 120502,
          "lecture_title": "Walk-through: super()",
          "vimeo_id": 7111564781216490,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to look at the super test assignment."
            },
            {
              "seconds": 4,
              "text": "Here's the assignment."
            },
            {
              "seconds": 6,
              "text": "It has a function called test Mario and let's just run it and make sure it works,"
            },
            {
              "seconds": 11,
              "text": "right click and say run super test and I get one fail, that's because there's one test here."
            },
            {
              "seconds": 17,
              "text": "I get an import error line 26."
            },
            {
              "seconds": 20,
              "text": "Okay, that looks okay."
            },
            {
              "seconds": 23,
              "text": "I'm going to change my size here a little bit"
            },
            {
              "seconds": 25,
              "text": "so we can get a little bit more code on the screen."
            },
            {
              "seconds": 28,
              "text": "This test has a table that lists people from Mario Brothers, the game."
            },
            {
              "seconds": 33,
              "text": "So across the top are Mario Brothers,"
            },
            {
              "seconds": 36,
              "text": "down the left hand side are various skills"
            },
            {
              "seconds": 38,
              "text": "and here are their levels or scores for those skills."
            },
            {
              "seconds": 41,
              "text": "So it says create a base class called character"
            },
            {
              "seconds": 43,
              "text": "that has speed, jump and power methods."
            },
            {
              "seconds": 46,
              "text": "They should each return 2."
            },
            {
              "seconds": 48,
              "text": "Create subclasses for Mario and Luigi that use super to call the parent class method"
            },
            {
              "seconds": 52,
              "text": "and increment the value by the appropriate amount"
            },
            {
              "seconds": 54,
              "text": "before returning it and put this function in a module called py3code.py"
            },
            {
              "seconds": 60,
              "text": "It says function here, it should say put this code in a module called py3code.py"
            },
            {
              "seconds": 67,
              "text": "There's a py3.code guy right here"
            },
            {
              "seconds": 69,
              "text": "and it says put your super stuff right there."
            },
            {
              "seconds": 72,
              "text": "I'm going to right click on this and say move right"
            },
            {
              "seconds": 76,
              "text": "and I'm going to adjust my size here bump my fonts down a little bit"
            },
            {
              "seconds": 83,
              "text": "they are 20, I'll just put them down to 16 for this assignment."
            },
            {
              "seconds": 95,
              "text": "Okay, so we need to make a class called character so class character."
            },
            {
              "seconds": 103,
              "text": "and it needs to have 3 methods,"
            },
            {
              "seconds": 107,
              "text": "it needs to have a speed, jump and power method."
            },
            {
              "seconds": 110,
              "text": "So to make a method here I say def and I'm just going to call it speed"
            },
            {
              "seconds": 114,
              "text": "and PyCharm automatically puts itself in there for me"
            },
            {
              "seconds": 119,
              "text": "and I'll just say return 2 and I'll just copy these, and I'll indent them."
            },
            {
              "seconds": 133,
              "text": "And I'll change the name, so this is speed,"
            },
            {
              "seconds": 135,
              "text": "this should be jump and this one should be power."
            },
            {
              "seconds": 142,
              "text": "Okay, so there's our base character and he has certain skills."
            },
            {
              "seconds": 148,
              "text": "Let's make a Mario subclass and say class Mario"
            },
            {
              "seconds": 153,
              "text": "and I put the parent class in the parentheses here."
            },
            {
              "seconds": 156,
              "text": "So the parent class is character."
            },
            {
              "seconds": 159,
              "text": "And I need to make a speed method"
            },
            {
              "seconds": 162,
              "text": "and he's going to have self as the first parameter"
            },
            {
              "seconds": 167,
              "text": "and what the assignment wants me to do is"
            },
            {
              "seconds": 169,
              "text": "it wants me to rather than just saying return Mario has a speed of 4,"
            },
            {
              "seconds": 173,
              "text": "it says it wants me to say value or some intermediate variable is super.speed."
            },
            {
              "seconds": 183,
              "text": "And this should return 2, and then instead of returning 2,"
            },
            {
              "seconds": 186,
              "text": "we're going to return value plus 2, that should get us 4."
            },
            {
              "seconds": 190,
              "text": "And we'll do a similar thing for the other guys."
            },
            {
              "seconds": 195,
              "text": "So this should be instead of speed here,"
            },
            {
              "seconds": 199,
              "text": "we'll say this is jump, we'll change this to jump."
            },
            {
              "seconds": 204,
              "text": "And this one should be power, we'll change this to power."
            },
            {
              "seconds": 212,
              "text": "So this shows how we call the parent class method here."
            },
            {
              "seconds": 216,
              "text": "We just say super and that gives us access to the parent class"
            },
            {
              "seconds": 219,
              "text": "and then we call the method on that."
            },
            {
              "seconds": 222,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 224,
              "text": "So I need to run the test code over here, not that py3code."
            },
            {
              "seconds": 228,
              "text": "So I'm going to run super test."
            },
            {
              "seconds": 230,
              "text": "And I get an import error cannot import Luigi."
            },
            {
              "seconds": 233,
              "text": "So apparently, I need to make a Luigi as well. Let's do a Luigi as well."
            },
            {
              "seconds": 246,
              "text": "Luigi, and his speed is going to be 1 greater,"
            },
            {
              "seconds": 252,
              "text": "his jump is going to be 3 greater, and his power is going to be 1 greater."
            },
            {
              "seconds": 257,
              "text": "Okay, let's run it again and see if it works now."
            },
            {
              "seconds": 260,
              "text": "Okay, it looks like it worked."
            },
            {
              "seconds": 263,
              "text": "So let's look at the test here really quickly."
            },
            {
              "seconds": 266,
              "text": "It's just creating an instance of Mario and calling the speed method on Mario."
            },
            {
              "seconds": 270,
              "text": "It's asserting that character is in the __bases__ attribute of the Mario class."
            },
            {
              "seconds": 275,
              "text": "So when you create a class there's a __bases__ attribute the list the base classes."
            },
            {
              "seconds": 280,
              "text": "It's asserting that the speed is the correct value"
            },
            {
              "seconds": 283,
              "text": "and then it's making a little function here called speed that looks like a method"
            },
            {
              "seconds": 288,
              "text": "and it's monkey patching that m for speed"
            },
            {
              "seconds": 291,
              "text": "to make the base be return 5 instead of the base speed of 2"
            },
            {
              "seconds": 297,
              "text": "and then it's calling Mario again to see that Mario speed now returns 7, 2 more than that 5"
            },
            {
              "seconds": 303,
              "text": "and Luigi speed returns 1 more than that 5."
            },
            {
              "seconds": 312,
              "text": "Okay, hopefully you understand a little bit more"
            },
            {
              "seconds": 314,
              "text": "about the super method or super function built-in in Python"
            },
            {
              "seconds": 318,
              "text": "when you're in a method and you want to call a parent method"
            },
            {
              "seconds": 321,
              "text": "rather than explicitly saying, in this case rather than saying character.speed,"
            },
            {
              "seconds": 325,
              "text": "we say super, that allows us to get access to character."
            },
            {
              "seconds": 329,
              "text": "but if we change this or refactor it later where character is no longer the base class"
            },
            {
              "seconds": 333,
              "text": "super will do the right thing."
            }
          ]
        },
        {
          "lecture_id": 120503,
          "lecture_title": "Matrix Multiplication",
          "vimeo_id": 7111041312430302,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Pep 465 introduced what's called the matrix multiplication operator"
            },
            {
              "seconds": 5,
              "text": "this came out in Python 3.5,"
            },
            {
              "seconds": 7,
              "text": "from the pep we read: in numerical code there are two important operations,"
            },
            {
              "seconds": 12,
              "text": "which compete for use of Python's asterisk operator"
            },
            {
              "seconds": 15,
              "text": "element wise multiplication and matrix multiplication."
            },
            {
              "seconds": 19,
              "text": "Here's an example of doing matrix multiplication."
            },
            {
              "seconds": 23,
              "text": "If you're familiar with linear algebra, this is a common operation."
            },
            {
              "seconds": 26,
              "text": "Here I'm importing the numpy library and I'm creating 2 arrays"
            },
            {
              "seconds": 30,
              "text": "and then I'm looping over the pairs of elements and multiplying them together"
            },
            {
              "seconds": 35,
              "text": "and summing the result."
            },
            {
              "seconds": 37,
              "text": "This is doing what's called matrix multiplication."
            },
            {
              "seconds": 40,
              "text": "It gives me in this case 285 as the result."
            },
            {
              "seconds": 43,
              "text": "This pep introduced an operation to do that"
            },
            {
              "seconds": 45,
              "text": "and we can use the @ sign around the two arrays"
            },
            {
              "seconds": 49,
              "text": "and that also gives us the same result 285."
            },
            {
              "seconds": 52,
              "text": "Note that this is different than multiplication,"
            },
            {
              "seconds": 55,
              "text": "if we simply multiply the array in numpy"
            },
            {
              "seconds": 58,
              "text": "this is going to do what is called element wise multiplication"
            },
            {
              "seconds": 61,
              "text": "and in that case, it will multiply every element in the array by 10,"
            },
            {
              "seconds": 65,
              "text": "it won't do multiplication of the whole element by 10 per se."
            },
            {
              "seconds": 71,
              "text": "If you want to have a class that implements matrix multiplication"
            },
            {
              "seconds": 75,
              "text": "you just need to implement the __matmul__ operator."
            },
            {
              "seconds": 80,
              "text": "Again, in Python, everything is an object and there are various protocols"
            },
            {
              "seconds": 84,
              "text": "and if we follow certain protocols, we can take advantage of certain behavior."
            },
            {
              "seconds": 87,
              "text": "In this case, if we want to be able to use the @ sign"
            },
            {
              "seconds": 91,
              "text": "we can Implement __matmul__."
            },
            {
              "seconds": 93,
              "text": "This case is pretty dumb example"
            },
            {
              "seconds": 95,
              "text": "it simply ignores the other that's passed in there and returns 42,"
            },
            {
              "seconds": 100,
              "text": "but you could do something more smart if you want to."
            },
            {
              "seconds": 102,
              "text": "If you're not familiar with dunder methods"
            },
            {
              "seconds": 105,
              "text": "what's happening is self here would be a and b would come in as other"
            },
            {
              "seconds": 111,
              "text": "and so inside of that method there, you could do whatever you wanted to"
            },
            {
              "seconds": 115,
              "text": "with them and you could Implement that operation."
            }
          ]
        },
        {
          "lecture_id": 120504,
          "lecture_title": "Walk-through: Matrix Multiplication",
          "vimeo_id": 7111949274172177,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at the mul test assignment"
            },
            {
              "seconds": 3,
              "text": "and there's a function test mul that says"
            },
            {
              "seconds": 6,
              "text": "implement a class vector that accepts a list of numbers"
            },
            {
              "seconds": 8,
              "text": "implement the matrix multiplication operator"
            },
            {
              "seconds": 12,
              "text": "to return the dot product multiplying each corresponding value, then sum the results."
            },
            {
              "seconds": 18,
              "text": "Okay, let's do that."
            },
            {
              "seconds": 20,
              "text": "Let's make a class, it's going to be called vector"
            },
            {
              "seconds": 23,
              "text": "and let's implement a constructor here"
            },
            {
              "seconds": 30,
              "text": "and it's going to take data, vector has input"
            },
            {
              "seconds": 33,
              "text": "and we'll just attach that as a member and let's implement matmul guy."
            },
            {
              "seconds": 38,
              "text": "Okay, it's going to take another vector presumably"
            },
            {
              "seconds": 41,
              "text": "so what we can do is we can loop over the pairs of data together"
            },
            {
              "seconds": 46,
              "text": "how we do that is we can use the zip function."
            },
            {
              "seconds": 49,
              "text": "So the zip function takes two sequences"
            },
            {
              "seconds": 52,
              "text": "and it will loop over both of them until one exhausts."
            },
            {
              "seconds": 57,
              "text": "So we're going to have self.data and other.data"
            },
            {
              "seconds": 59,
              "text": "we're going to need something probably result is equal to 0."
            },
            {
              "seconds": 63,
              "text": "And we're going to zip those together so I can say this and that in zip"
            },
            {
              "seconds": 72,
              "text": "res plus equals this, times that, return res."
            },
            {
              "seconds": 81,
              "text": "Let's see if this works."
            },
            {
              "seconds": 89,
              "text": "Okay, that looks like it did work."
            },
            {
              "seconds": 91,
              "text": "We can do a little bit of refactoring if we want to here,"
            },
            {
              "seconds": 98,
              "text": "we can put this into a list comprehension"
            },
            {
              "seconds": 103,
              "text": "and so we could do something like this"
            },
            {
              "seconds": 106,
              "text": "we could say well we're going to accumulate this, this is a sum operation,"
            },
            {
              "seconds": 110,
              "text": "so we're going to say sum of the iterable"
            },
            {
              "seconds": 119,
              "text": "what we're going to sum is what we're accumulating which is this"
            },
            {
              "seconds": 125,
              "text": "and we'll take this for loop and we'll plop it into here"
            },
            {
              "seconds": 129,
              "text": "we'll take off the colon at the end"
            },
            {
              "seconds": 134,
              "text": "and we should be able to say res is equal to that."
            },
            {
              "seconds": 136,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 142,
              "text": "Okay, it looks like we're good."
            }
          ]
        },
        {
          "lecture_id": 120505,
          "lecture_title": "Dictionary Key Sharing",
          "vimeo_id": 7111790128084467,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video, I want to introduce an optimization"
            },
            {
              "seconds": 3,
              "text": "that was brought to pass in pep 412 Python 3.3."
            },
            {
              "seconds": 8,
              "text": "This is called key sharing dictionaries"
            },
            {
              "seconds": 10,
              "text": "and it's a nice little optimization"
            },
            {
              "seconds": 12,
              "text": "that will save memory when you're using Python 3."
            },
            {
              "seconds": 15,
              "text": "From the pep we read: key sharing allows dictionaries,"
            },
            {
              "seconds": 18,
              "text": "which are used as attribute dictionaries"
            },
            {
              "seconds": 21,
              "text": "or the __dict__ attribute of an object"
            },
            {
              "seconds": 24,
              "text": "to share keys with other attribute dictionaries of instances of the same class."
            },
            {
              "seconds": 28,
              "text": "So let's just understand what that means."
            },
            {
              "seconds": 31,
              "text": "Basically whenever you create a class in Python"
            },
            {
              "seconds": 34,
              "text": "underneath the class there will be a __dict__ attribute"
            },
            {
              "seconds": 39,
              "text": "which will store the attribute names and map them to the values there."
            },
            {
              "seconds": 43,
              "text": "What happens is if you're creating a bunch instances of classes"
            },
            {
              "seconds": 46,
              "text": "that have a bunch of attributes, these attributes are typically strings"
            },
            {
              "seconds": 50,
              "text": "and those strings will be repeated and so Python the interpreter"
            },
            {
              "seconds": 53,
              "text": "would go out and create a new string for each attribute"
            },
            {
              "seconds": 57,
              "text": "and those strings could add up if you're creating thousands"
            },
            {
              "seconds": 61,
              "text": "or many more instances of a class."
            },
            {
              "seconds": 64,
              "text": "So this is a nice little optimization,"
            },
            {
              "seconds": 67,
              "text": "what it does is it caches essentially the keys in a dictionary."
            },
            {
              "seconds": 71,
              "text": "We also read from the pep that as a result of this optimization"
            },
            {
              "seconds": 74,
              "text": "these dictionaries are typically half the size of the current dictionary implementation."
            },
            {
              "seconds": 78,
              "text": "Benchmarking shows that memory use is reduced"
            },
            {
              "seconds": 81,
              "text": "by 10 to 20 percent for object-oriented programs"
            },
            {
              "seconds": 84,
              "text": "with no significant change in memory use for other programs."
            },
            {
              "seconds": 88,
              "text": "So you don't have to do anything about this"
            },
            {
              "seconds": 90,
              "text": "you get to take advantage of this automatically."
            },
            {
              "seconds": 92,
              "text": "Also note that this optimization does not apply to dictionaries"
            },
            {
              "seconds": 97,
              "text": "only to the __dict__ dictionary in an instance."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12006,
      "chapter_title": "Functions",
      "lectures": [
        {
          "lecture_id": 120601,
          "lecture_title": "Keyword-only Arguments",
          "vimeo_id": 7111311890888366,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video we are going to discuss keyword only arguments."
            },
            {
              "seconds": 3,
              "text": "These came out in Python 3 pep 3102."
            },
            {
              "seconds": 6,
              "text": "The motivation from this can be gleaned from reading the pep"
            },
            {
              "seconds": 9,
              "text": "it says one can easily envision a function which takes a variable number of arguments"
            },
            {
              "seconds": 13,
              "text": "but also takes one or more options in the form of keyword arguments."
            },
            {
              "seconds": 17,
              "text": "Currently, the only way to do this is to provide both"
            },
            {
              "seconds": 21,
              "text": "a varagrs argument and a keywords argument **kwargs"
            },
            {
              "seconds": 25,
              "text": "and then manually extract the desired keywords from the dictionary."
            },
            {
              "seconds": 29,
              "text": "In Python 2 you can't have a *args argument and then put named parameters after"
            },
            {
              "seconds": 34,
              "text": "you can only put the **kwargs after it."
            },
            {
              "seconds": 38,
              "text": "So this pep introduces 2 syntactical changes"
            },
            {
              "seconds": 40,
              "text": "that you can have named arguments after *vargs in Python"
            },
            {
              "seconds": 44,
              "text": "and that you can also use a bare star * and have named arguments after them."
            },
            {
              "seconds": 49,
              "text": "Let's look at some examples."
            },
            {
              "seconds": 51,
              "text": "Here we have *args here and we also have a keyword argument name"
            },
            {
              "seconds": 55,
              "text": "is equal to Joe following that,"
            },
            {
              "seconds": 57,
              "text": "in Python 2 this would be a syntax error, you cannot do this."
            },
            {
              "seconds": 60,
              "text": "But Python 3 supports it."
            },
            {
              "seconds": 62,
              "text": "We're also using the fstring here and we're just printing out Hey name"
            },
            {
              "seconds": 65,
              "text": "whatever is passed in for name."
            },
            {
              "seconds": 67,
              "text": "Let's look at some invocations here"
            },
            {
              "seconds": 69,
              "text": "if we call foo by itself name defaults to Joe"
            },
            {
              "seconds": 72,
              "text": "so there's no change there to the name value."
            },
            {
              "seconds": 76,
              "text": "Note that if I call foo with Matt, Matt comes in as a positional argument"
            },
            {
              "seconds": 80,
              "text": "because it's not a keyword argument."
            },
            {
              "seconds": 83,
              "text": "So I also get Hey Joe."
            },
            {
              "seconds": 85,
              "text": "Finally here, if I say name is equal to Matt, name gets overridden and the result is Hey Matt."
            },
            {
              "seconds": 89,
              "text": "Here's an example using the new star just by itself syntax."
            },
            {
              "seconds": 93,
              "text": "Again, this is Python 3 syntax only, it won't work in Python 2."
            },
            {
              "seconds": 98,
              "text": "I've got a star there, what that is indicating is that"
            },
            {
              "seconds": 102,
              "text": "anything following this is a keyword only argument"
            },
            {
              "seconds": 105,
              "text": "and must have a keyword to update it"
            },
            {
              "seconds": 108,
              "text": "and because there are no arguments proceeding it, positional arguments or otherwise,"
            },
            {
              "seconds": 112,
              "text": "if you want to change the value of name,"
            },
            {
              "seconds": 115,
              "text": "you need to provide keyword arguments."
            },
            {
              "seconds": 117,
              "text": "Note that I can also call foo2 by itself and name will default to Joe,"
            },
            {
              "seconds": 122,
              "text": "because this keyword argument has a default value."
            },
            {
              "seconds": 125,
              "text": "Let's look at some invocations here."
            },
            {
              "seconds": 127,
              "text": "Here I'm calling it with no parameters and name defaults to Joe."
            },
            {
              "seconds": 130,
              "text": "Here I'm calling it with Matt as a parameter, but this is a positional parameter"
            },
            {
              "seconds": 135,
              "text": "and because I haven't allowed in my function definition to have positional parameters,"
            },
            {
              "seconds": 140,
              "text": "I'm going to get an error, I am going to get a type error that says"
            },
            {
              "seconds": 142,
              "text": "foo2 takes 0 positional arguments, but I gave it one,"
            },
            {
              "seconds": 147,
              "text": "and finally here, I'm going to call it with a keyword argument name is equal to Matt"
            },
            {
              "seconds": 151,
              "text": "and name overrides the value that is defaulted to Joe"
            },
            {
              "seconds": 155,
              "text": "and I get hey Matt as an output."
            },
            {
              "seconds": 157,
              "text": "Here, I've got another example, I've got a bare star by itself,"
            },
            {
              "seconds": 162,
              "text": "and then I also have a keyword argument that doesn't have a default value."
            },
            {
              "seconds": 167,
              "text": "In essence, what this is telling Python is that I don't have any positional arguments"
            },
            {
              "seconds": 171,
              "text": "that I will support but you need to require a keyword name"
            },
            {
              "seconds": 175,
              "text": "when you invoke this, if you don't, you're going to get an error"
            },
            {
              "seconds": 179,
              "text": "and we'll see here in the calls below."
            },
            {
              "seconds": 181,
              "text": "Here I call foo3 with no arguments and I get a type error."
            },
            {
              "seconds": 184,
              "text": "It says I'm missing a keyword only argument name"
            },
            {
              "seconds": 187,
              "text": "so I am missing one keyword only argument."
            },
            {
              "seconds": 190,
              "text": "Here I'm calling it with a positional argument and I get an error that says"
            },
            {
              "seconds": 194,
              "text": "I take 0 positional arguments, but you gave me one."
            },
            {
              "seconds": 197,
              "text": "And finally, I'm calling it with a keyword argument and name gets overridden to Matt."
            },
            {
              "seconds": 202,
              "text": "So again, in essence, this is requiring any invocation of foo3 to type out name."
            },
            {
              "seconds": 210,
              "text": "The motivation for this change in Python 3 is to improve the readability."
            },
            {
              "seconds": 213,
              "text": "If you have a function that says send 404, 200 and 100,"
            },
            {
              "seconds": 218,
              "text": "these are all magic numbers and it's not clear what these mean."
            },
            {
              "seconds": 221,
              "text": "If these are positional named arguments,"
            },
            {
              "seconds": 224,
              "text": "we can provide the names of them if we want to but it's not required."
            },
            {
              "seconds": 229,
              "text": "What this is doing is it's forcing us to provide the name to them"
            },
            {
              "seconds": 232,
              "text": "and one could make an argument here at this second line of code here"
            },
            {
              "seconds": 237,
              "text": "send code is equal to 404, amount is equal to 200, timeout is equal to 100"
            },
            {
              "seconds": 242,
              "text": "is clear and explicit about what the intent of the code is."
            },
            {
              "seconds": 246,
              "text": "So if you have code that looks like this"
            },
            {
              "seconds": 248,
              "text": "where you have a bunch of numbers or configuration parameters"
            },
            {
              "seconds": 251,
              "text": "and you're not clear what they're doing"
            },
            {
              "seconds": 254,
              "text": "or when you come back to them it's not clear to you what's going on there,"
            },
            {
              "seconds": 257,
              "text": "consider using keyword only arguments to make your code more readable."
            }
          ]
        },
        {
          "lecture_id": 120602,
          "lecture_title": "Walk-through: Keyword-only Arguments",
          "vimeo_id": 7111633339086656,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at keyword test."
            },
            {
              "seconds": 2,
              "text": "Let's open that up, open it in your editor."
            },
            {
              "seconds": 5,
              "text": "Let's read the first assignment,"
            },
            {
              "seconds": 7,
              "text": "it says one formula for force is mass times acceleration"
            },
            {
              "seconds": 10,
              "text": "create a function force that takes to keyword only arguments mass and acceleration"
            },
            {
              "seconds": 15,
              "text": "and returns the product of the arguments,"
            },
            {
              "seconds": 17,
              "text": "put this function in the module called py3code."
            },
            {
              "seconds": 22,
              "text": "Let's open up py3code here,"
            },
            {
              "seconds": 26,
              "text": "and it says at the bottom put keyword tests here"
            },
            {
              "seconds": 34,
              "text": "I can split this if I want to and view both of these."
            },
            {
              "seconds": 38,
              "text": "I want to make a function called force that takes mass and acceleration here"
            },
            {
              "seconds": 42,
              "text": "so def force and it takes mass and acceleration"
            },
            {
              "seconds": 52,
              "text": "and returns mass times acceleration."
            },
            {
              "seconds": 59,
              "text": "Okay, I will save this now and run this guy and see if it works."
            },
            {
              "seconds": 69,
              "text": "Okay, and so it looks like I got an error here on this line here,"
            },
            {
              "seconds": 74,
              "text": "when I call force 10, 9.8 it did not raise a type error and it wants to raise a type error."
            },
            {
              "seconds": 79,
              "text": "The reason why that is is because I didn't actually make a keyword only function"
            },
            {
              "seconds": 84,
              "text": "I just made a normal function that takes mass and acceleration."
            },
            {
              "seconds": 88,
              "text": "So this will work and it won't raise a type error."
            },
            {
              "seconds": 91,
              "text": "The intention of the keyword only arguments is"
            },
            {
              "seconds": 93,
              "text": "that it makes clear what our numbers are"
            },
            {
              "seconds": 96,
              "text": "in this case it's not clear necessarily which one is mass and which one is acceleration."
            },
            {
              "seconds": 100,
              "text": "So in order to change that what we need to do is we need to put a star right in front of that."
            },
            {
              "seconds": 105,
              "text": "And now when we call this force function,"
            },
            {
              "seconds": 107,
              "text": "we need to specify the mass and acceleration."
            },
            {
              "seconds": 110,
              "text": "Let's run it and make sure that it works."
            },
            {
              "seconds": 115,
              "text": "Okay, and now I'm on the other problem here"
            },
            {
              "seconds": 118,
              "text": "so that part appeared to work."
            },
            {
              "seconds": 120,
              "text": "Let's go on to the next problem,"
            },
            {
              "seconds": 123,
              "text": "the quadratic formula solves an equation of the form ax^2+ bx + c = 0"
            },
            {
              "seconds": 129,
              "text": "write a function quad that returns a tuple with the solutions"
            },
            {
              "seconds": 133,
              "text": "make a, b and c keyword only arguments,"
            },
            {
              "seconds": 137,
              "text": "put this function in a module called py3code.py"
            },
            {
              "seconds": 143,
              "text": "Okay, so if you remember the quadratic formula,"
            },
            {
              "seconds": 148,
              "text": "it looks something like this, negative b plus or minus the square root"
            },
            {
              "seconds": 156,
              "text": "of b squared minus 4ac and then all of this over 2a"
            },
            {
              "seconds": 170,
              "text": "so there's my attempt at writing this out in some little language here."
            },
            {
              "seconds": 175,
              "text": "Let's see if we can implement this as a Python function here"
            },
            {
              "seconds": 178,
              "text": "and with keyword only arguments"
            },
            {
              "seconds": 180,
              "text": "so quad, and I'm going to put a star at the front"
            },
            {
              "seconds": 182,
              "text": "because I want everyone to specify a, b and c when they call this."
            },
            {
              "seconds": 188,
              "text": "And because this can return 2 results,"
            },
            {
              "seconds": 190,
              "text": "it can return the positive of the square root and the negative of the square root,"
            },
            {
              "seconds": 194,
              "text": "we're going to make 2 results and return that as a tuple of both of those."
            },
            {
              "seconds": 199,
              "text": "So what I'm going to do is I'm just going to say,"
            },
            {
              "seconds": 204,
              "text": "the square root part I'm going to say sqrt is equal to"
            },
            {
              "seconds": 208,
              "text": "let's say b squared minus 4 times a, times c to the .5"
            },
            {
              "seconds": 220,
              "text": "and then x1 is going to be equal to in parenthesis negative b plus"
            },
            {
              "seconds": 228,
              "text": "the square root portion and this divided by 2 times a"
            },
            {
              "seconds": 233,
              "text": "and the other solution will be this negative b minus the square root of that"
            },
            {
              "seconds": 242,
              "text": "and let's return x1 and x2."
            },
            {
              "seconds": 247,
              "text": "Let's run our test over here and make sure that it works."
            },
            {
              "seconds": 254,
              "text": "Okay, and we got that it did indeed work."
            },
            {
              "seconds": 258,
              "text": "So we can see the calling here rather than saying quad 1, 3, 1 here."
            },
            {
              "seconds": 264,
              "text": "we have to explicitly say a is equal to 1, b is equal to 3 and c is equal to 1."
            },
            {
              "seconds": 271,
              "text": "Note that we can change the order of those if we want to as well."
            },
            {
              "seconds": 274,
              "text": "This just allows us to again be more explicit and not have magic numbers floating around"
            },
            {
              "seconds": 278,
              "text": "but to have some context around them."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12007,
      "chapter_title": "Type Annotations",
      "lectures": [
        {
          "lecture_id": 120701,
          "lecture_title": "Introducing Annotations",
          "vimeo_id": 7111038877030779,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video we're going to look at a new feature in Python 3"
            },
            {
              "seconds": 4,
              "text": "variable and function annotations."
            },
            {
              "seconds": 7,
              "text": "There are a bunch of peps that talk about this, briefly discuss them."
            },
            {
              "seconds": 11,
              "text": "The first pep 3107 was a pep that showed a suggested usage of function annotations"
            },
            {
              "seconds": 19,
              "text": "but was basically generic, it hinted at some of the purposes"
            },
            {
              "seconds": 22,
              "text": "of what annotation would be used for in the future"
            },
            {
              "seconds": 25,
              "text": "but was just thrown out there to test the waters"
            },
            {
              "seconds": 28,
              "text": "and see what other people are thinking about that."
            },
            {
              "seconds": 31,
              "text": "A couple of other peps, 482 and 483"
            },
            {
              "seconds": 34,
              "text": "go over the literature, type, theory and what's out there"
            },
            {
              "seconds": 38,
              "text": "and then we come to 484 which had the first standard for Python."
            },
            {
              "seconds": 43,
              "text": "526 updated that a little bit and gave us variable annotations"
            },
            {
              "seconds": 48,
              "text": "which didn't exist before that"
            },
            {
              "seconds": 51,
              "text": "and then there's a pep in the pipeline 544 that talks about structural subtyping."
            },
            {
              "seconds": 56,
              "text": "In typing world there's a couple different types of type checking"
            },
            {
              "seconds": 61,
              "text": "one is called nominal type checking, another one is called structural type checking"
            },
            {
              "seconds": 65,
              "text": "and nominal basically says you've got this class"
            },
            {
              "seconds": 69,
              "text": "and I'm going to confirm that it's a class versus structural subtyping,"
            },
            {
              "seconds": 72,
              "text": "which one can think of as duck typing for subtyping"
            },
            {
              "seconds": 77,
              "text": "so I can say rather than this is a list of things that are getting passed in,"
            },
            {
              "seconds": 80,
              "text": "this is an iterable, that sort of thing."
            },
            {
              "seconds": 83,
              "text": "Let's look at some of the motivation, pep 484 states"
            },
            {
              "seconds": 85,
              "text": "introduces a provisional module to provide syntax for function annotations and tools"
            },
            {
              "seconds": 90,
              "text": "along with some conventions for situations where annotations are not available."
            },
            {
              "seconds": 95,
              "text": "We'll look at that a little bit more."
            },
            {
              "seconds": 97,
              "text": "There's also 526, pep 526 states this pep aims at adding syntax to Python"
            },
            {
              "seconds": 102,
              "text": "for annotating the types of variables including class variables and instance variables"
            },
            {
              "seconds": 106,
              "text": "instead of expressing them through comments."
            },
            {
              "seconds": 108,
              "text": "So pep 484 had some ways to express types through comments"
            },
            {
              "seconds": 111,
              "text": "and pep 526 provides a syntax for that."
            },
            {
              "seconds": 115,
              "text": "So if you've been programming in Python,"
            },
            {
              "seconds": 117,
              "text": "you'll know that Python is a dynamically typed language."
            },
            {
              "seconds": 120,
              "text": "You don't have to define what type your variables are and whatnot"
            },
            {
              "seconds": 124,
              "text": "and these annotation peps somewhat change that, we'll look at how they do it."
            },
            {
              "seconds": 129,
              "text": "They allow us to document what the types are in our code."
            },
            {
              "seconds": 133,
              "text": "And one of the things to know about this is"
            },
            {
              "seconds": 135,
              "text": "that these types that we document in our code have no effect at runtime"
            },
            {
              "seconds": 140,
              "text": "there are annotations, there are hints,"
            },
            {
              "seconds": 143,
              "text": "but Python the C Python interpreter that you download from python.org"
            },
            {
              "seconds": 147,
              "text": "is not going to run faster or slower because of them."
            },
            {
              "seconds": 150,
              "text": "It's not going to interpret them at runtime and slow things down,"
            },
            {
              "seconds": 153,
              "text": "it's also not going to unbox things at run time and speed things up."
            },
            {
              "seconds": 156,
              "text": "So it is neither faster nor slower."
            },
            {
              "seconds": 160,
              "text": "There are two ways of commonly checking types"
            },
            {
              "seconds": 163,
              "text": "one is called static type checking and another is dynamic type checking"
            },
            {
              "seconds": 167,
              "text": "and this deals with when we check the types,"
            },
            {
              "seconds": 170,
              "text": "do we check them at compile time or runtime typically,"
            },
            {
              "seconds": 174,
              "text": "so a language like Java, when you compile your Java code"
            },
            {
              "seconds": 178,
              "text": "it's going to check the types and make sure that they're compliant"
            },
            {
              "seconds": 181,
              "text": "and typically the Python language will check types at runtime,"
            },
            {
              "seconds": 186,
              "text": "so when you're running your code, there is no real compile step in Python typically,"
            },
            {
              "seconds": 190,
              "text": "but some developers in the Python world came from Java or other typed languages"
            },
            {
              "seconds": 194,
              "text": "and they wanted the static typing benefits."
            },
            {
              "seconds": 198,
              "text": "So what are some of the benefits of static typing?"
            },
            {
              "seconds": 200,
              "text": "One of them is when you get a large code base"
            },
            {
              "seconds": 203,
              "text": "unless it's extremely well documented and written in a clear manner,"
            },
            {
              "seconds": 207,
              "text": "it can be kind of hard to understand what the types are"
            },
            {
              "seconds": 210,
              "text": "that are coming in and out of function calls or constructors or method calls"
            },
            {
              "seconds": 216,
              "text": "and so annotation can aid comprehension for these sorts of code bases."
            },
            {
              "seconds": 221,
              "text": "Another place where they're useful is they can catch bugs"
            },
            {
              "seconds": 223,
              "text": "and they can catch them early on"
            },
            {
              "seconds": 225,
              "text": "and if you read the literature about when you catch bugs,"
            },
            {
              "seconds": 228,
              "text": "the earlier you catch bugs the cheaper it's going to be"
            },
            {
              "seconds": 231,
              "text": "so you really want to push catching bugs sooner if you can,"
            },
            {
              "seconds": 234,
              "text": "ideally you don't want to write bugs or have them"
            },
            {
              "seconds": 236,
              "text": "but if you do have them and you can catch them earlier that's a lot cheaper"
            },
            {
              "seconds": 239,
              "text": "if you can have some sort of process that finds them right after you write your code"
            },
            {
              "seconds": 243,
              "text": "that's going to be cheaper than shipping your code"
            },
            {
              "seconds": 245,
              "text": "and having some end-user find your bug"
            },
            {
              "seconds": 248,
              "text": "and having to report that back, that sort of thing."
            },
            {
              "seconds": 250,
              "text": "Another benefit is auto-completion."
            },
            {
              "seconds": 253,
              "text": "Some of these newer editors such as PyCharm can take advantage of the annotations"
            },
            {
              "seconds": 256,
              "text": "and provide better auto-completion than you get otherwise"
            },
            {
              "seconds": 260,
              "text": "and also refactoring, they can allow you to refactor"
            },
            {
              "seconds": 262,
              "text": "because they know about sort of types you're expecting."
            },
            {
              "seconds": 265,
              "text": "So pep 307 says that the aim of the annotation"
            },
            {
              "seconds": 268,
              "text": "is to provide a single standard way of specifying a functions parameters and return values"
            },
            {
              "seconds": 273,
              "text": "the use for annotation goes beyond just the inputs for functions and the outputs of functions."
            },
            {
              "seconds": 278,
              "text": "You can mark the types for functions and classes and you can also mark variables."
            },
            {
              "seconds": 283,
              "text": "Again, note that these annotations that Python supports in Python 3"
            },
            {
              "seconds": 288,
              "text": "don't actually do anything, when you run your Python code"
            },
            {
              "seconds": 291,
              "text": "the annotations are sitting there"
            },
            {
              "seconds": 293,
              "text": "but Python isn't going to check or do anything with them."
            },
            {
              "seconds": 297,
              "text": "In order to do that, we need a third-party tool."
            },
            {
              "seconds": 299,
              "text": "And so one of those, mypy is a tool that we'll look at how to use that."
            }
          ]
        },
        {
          "lecture_id": 120702,
          "lecture_title": "Annotation syntax",
          "vimeo_id": 7111401170598704,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Let's just look at the basic syntax that was introduced in Pep 3107."
            },
            {
              "seconds": 3,
              "text": "Here we have a function foo and it's taking two parameters a and b"
            },
            {
              "seconds": 8,
              "text": "and following that we see a colon and then we see this expression here."
            },
            {
              "seconds": 13,
              "text": "So this here is the type annotation here,"
            },
            {
              "seconds": 16,
              "text": "note that b is a default variable, it has value 5 for the default value"
            },
            {
              "seconds": 22,
              "text": "and in here we can put any expression, any Python expression in here"
            },
            {
              "seconds": 27,
              "text": "and we'll see some Python expressions."
            },
            {
              "seconds": 29,
              "text": "Note that there's also support for *args and **arguments."
            },
            {
              "seconds": 33,
              "text": "So you can just put a colon following them and put an expression in there"
            },
            {
              "seconds": 37,
              "text": "and there's also a way to specify the return value,"
            },
            {
              "seconds": 40,
              "text": "in order to specify the return value,"
            },
            {
              "seconds": 42,
              "text": "this introduce this little arrow operator dash greater than ->"
            },
            {
              "seconds": 45,
              "text": "and then we put the expression following that"
            },
            {
              "seconds": 48,
              "text": "and so if you have a function called sum"
            },
            {
              "seconds": 51,
              "text": "and you want to indicate what it's returning"
            },
            {
              "seconds": 53,
              "text": "you put that in this expression at the end,"
            },
            {
              "seconds": 55,
              "text": "note that it's coming before the colon there."
            },
            {
              "seconds": 57,
              "text": "One thing to note is that annotations are not supported in lambda functions,"
            },
            {
              "seconds": 61,
              "text": "so if you're a super fan of lambda functions and use those all over the place,"
            },
            {
              "seconds": 65,
              "text": "you're not going to get the benefits of using annotations there"
            },
            {
              "seconds": 68,
              "text": "because you can't annotate them."
            },
            {
              "seconds": 71,
              "text": "526 introduced the ability to annotate variables."
            },
            {
              "seconds": 75,
              "text": "And so this is how we annotate variables,"
            },
            {
              "seconds": 77,
              "text": "here we've got a name variable and we just put a colon and this expression"
            },
            {
              "seconds": 81,
              "text": "in this case we're saying that this is str, a string"
            },
            {
              "seconds": 85,
              "text": "and note that this is the string class and that's a valid expression."
            },
            {
              "seconds": 89,
              "text": "One thing to note about this pep is it introduced this construct down here,"
            },
            {
              "seconds": 94,
              "text": "which is a bare annotation on a variable with no assignment to it."
            },
            {
              "seconds": 98,
              "text": "So here I'm saying there is a variable called name2"
            },
            {
              "seconds": 101,
              "text": "and it will be a type string, but I'm not giving it a value."
            },
            {
              "seconds": 105,
              "text": "Note that if we simply said name2 by itself without the annotation"
            },
            {
              "seconds": 109,
              "text": "we would get a name error in Python."
            },
            {
              "seconds": 111,
              "text": "But in this case, it's going to create an annotation for that variable,"
            },
            {
              "seconds": 114,
              "text": "note that this variable also does not exist at this point in time."
            },
            {
              "seconds": 118,
              "text": "If we say name2 after it, we will get a name error."
            }
          ]
        },
        {
          "lecture_id": 120703,
          "lecture_title": "An annotation example",
          "vimeo_id": 7111993801275201,
          "subtitles": [
            {
              "seconds": 0,
              "text": "So here's a slightly better example,"
            },
            {
              "seconds": 2,
              "text": "we've got a function called sum2 and it's going to take x and y"
            },
            {
              "seconds": 6,
              "text": "and note here's our colon here and here's our annotation."
            },
            {
              "seconds": 9,
              "text": "In this case, we have an expression and this is just a string,"
            },
            {
              "seconds": 12,
              "text": "it's the string num and then in this case for y we have another expression there"
            },
            {
              "seconds": 16,
              "text": "and it's an int, and then at the end here we're saying that it returns a float."
            },
            {
              "seconds": 20,
              "text": "Now this might seem a little weird, we're specifying"
            },
            {
              "seconds": 23,
              "text": "a string and an int and a float as the types here,"
            },
            {
              "seconds": 27,
              "text": "and again, note that Python isn't going to do anything when you run this code,"
            },
            {
              "seconds": 31,
              "text": "but what it does do is it adds a __annotations__ attribute to the function"
            },
            {
              "seconds": 36,
              "text": "and you can look at that attribute"
            },
            {
              "seconds": 39,
              "text": "and it's just a dictionary mapping the parameters"
            },
            {
              "seconds": 42,
              "text": "and then it has a special parameter called return there that gives the return value."
            }
          ]
        },
        {
          "lecture_id": 120704,
          "lecture_title": "Variable annotations",
          "vimeo_id": 7111040935069834,
          "subtitles": [
            {
              "seconds": 0,
              "text": "So we saw the new style, 526 style of annotating variables."
            },
            {
              "seconds": 5,
              "text": "Pep 484 had another style for annotating variables"
            },
            {
              "seconds": 9,
              "text": "allowed us to do in a comment."
            },
            {
              "seconds": 11,
              "text": "So if you put the comment with type colon,"
            },
            {
              "seconds": 14,
              "text": "and then the expression following that, in this case str,"
            },
            {
              "seconds": 16,
              "text": "we could use this older style pep 484."
            },
            {
              "seconds": 19,
              "text": "Python 3.6 supports this newer style,"
            },
            {
              "seconds": 21,
              "text": "and so we can just put the colon and the annotation right after that."
            },
            {
              "seconds": 25,
              "text": "One thing to note when we create these variable annotations is that"
            },
            {
              "seconds": 28,
              "text": "there is a global variable called __annotations__"
            },
            {
              "seconds": 32,
              "text": "that will be created and it will be updated with the name and the types in there."
            },
            {
              "seconds": 36,
              "text": "Note that, again, this middle variable here does not have a value,"
            },
            {
              "seconds": 40,
              "text": "it's just an annotation for a variable."
            },
            {
              "seconds": 43,
              "text": "And so if I try and reference that here,"
            },
            {
              "seconds": 45,
              "text": "I will get a name error that middle is not defined,"
            },
            {
              "seconds": 47,
              "text": "but note that middle is in my annotation."
            },
            {
              "seconds": 50,
              "text": "So when I later assign middle, it should correspond with that type."
            }
          ]
        },
        {
          "lecture_id": 120705,
          "lecture_title": "The Typing library",
          "vimeo_id": 7111858865248713,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Python 3.5 introduced a typing library."
            },
            {
              "seconds": 3,
              "text": "This is in the standard library and it adds support for various types."
            },
            {
              "seconds": 7,
              "text": "We can get support for any, union, tuple, callable, type variable and generic."
            },
            {
              "seconds": 12,
              "text": "There's also other types that allows us to specify dictionary and list types"
            },
            {
              "seconds": 17,
              "text": "and we'll see some examples of those."
            },
            {
              "seconds": 19,
              "text": "Another thing to be aware of is if you've got a class"
            },
            {
              "seconds": 21,
              "text": "that you're saying this variable is going to be a type this class"
            },
            {
              "seconds": 25,
              "text": "and the class is in the same file as you're referencing it,"
            },
            {
              "seconds": 28,
              "text": "but the class has not been defined yet, it's going to be defind later,"
            },
            {
              "seconds": 31,
              "text": "you can just put the class name in a quoted string"
            },
            {
              "seconds": 33,
              "text": "for a forward declaration of that class."
            },
            {
              "seconds": 36,
              "text": "Here's some examples of annotations"
            },
            {
              "seconds": 38,
              "text": "note that I am using the typing library here"
            },
            {
              "seconds": 40,
              "text": "and I'm importing capital Dict here, and here in my annotation,"
            },
            {
              "seconds": 44,
              "text": "I've got a variable called ages and it's mapping a name to an age."
            },
            {
              "seconds": 48,
              "text": "So here's my traditional dictionary over on this side here"
            },
            {
              "seconds": 52,
              "text": "Fred has the age of 10, and here's my annotation here."
            },
            {
              "seconds": 55,
              "text": "I'm saying dict and then I put square braces here"
            },
            {
              "seconds": 59,
              "text": "and then I map the key and the value here."
            },
            {
              "seconds": 65,
              "text": "So string here is the key and it is the value."
            },
            {
              "seconds": 70,
              "text": "What this allows me to do is specify what the type,"
            },
            {
              "seconds": 73,
              "text": "the specific type of the key is and what the specific type of the value is."
            },
            {
              "seconds": 78,
              "text": "Again, I'm going to harp on this but when you run your code"
            },
            {
              "seconds": 81,
              "text": "Python is going to ignore this, you need to use a tool like mypy"
            },
            {
              "seconds": 83,
              "text": "to actually get some information out of this, we'll show an example of that later."
            },
            {
              "seconds": 88,
              "text": "If you've got a list of items here in square brackets in our annotation list"
            },
            {
              "seconds": 93,
              "text": "the list type that we import from typing, note that it's capital List,"
            },
            {
              "seconds": 96,
              "text": "we see that we are putting strings into our list."
            },
            {
              "seconds": 100,
              "text": "So this allows us to type our list and use a specific type in there."
            },
            {
              "seconds": 105,
              "text": "Same thing for tuples we can specify a tuple,"
            },
            {
              "seconds": 109,
              "text": "we're going to import capital tuple from the typing."
            },
            {
              "seconds": 111,
              "text": "And in this case we're saying a person has a string, an int and a string."
            },
            {
              "seconds": 116,
              "text": "And so those correspond to the individual items in the tuple."
            },
            {
              "seconds": 120,
              "text": "So Fred is a string, 10 is an integer, and USA is a string."
            },
            {
              "seconds": 125,
              "text": "We can also specify types for callables,"
            },
            {
              "seconds": 128,
              "text": "here, I have a little function called repeat that takes a function as input,"
            },
            {
              "seconds": 132,
              "text": "again, Python has first class functions"
            },
            {
              "seconds": 134,
              "text": "and I can invoke my function down here, I can pass my function around"
            },
            {
              "seconds": 138,
              "text": "and I can return functions and pass in functions to other functions."
            },
            {
              "seconds": 142,
              "text": "And we can say that this function that's getting passed into repeat"
            },
            {
              "seconds": 146,
              "text": "is going to be a callable."
            },
            {
              "seconds": 148,
              "text": "We're going to import callable from typing"
            },
            {
              "seconds": 150,
              "text": "and here in the square brackets inside of the square brackets,"
            },
            {
              "seconds": 153,
              "text": "these are the parameters that are passed into our callable"
            },
            {
              "seconds": 156,
              "text": "and then this final guy here at the end is the return value here."
            },
            {
              "seconds": 159,
              "text": "So this callable that's passed in, if we're passing in add"
            },
            {
              "seconds": 162,
              "text": "it takes two integers and it returns an integer as output."
            },
            {
              "seconds": 166,
              "text": "One thing to notice, pep 526 provided some syntax for typing variables,"
            },
            {
              "seconds": 171,
              "text": "but it didn't provide syntax for all the variables that can get created in Python,"
            },
            {
              "seconds": 176,
              "text": "when you use a with statement and use an as at the end"
            },
            {
              "seconds": 180,
              "text": "it creates a variable called foo and when you use a for loop"
            },
            {
              "seconds": 183,
              "text": "and you put variables in there, it's going to create x and y."
            },
            {
              "seconds": 187,
              "text": "Pep 526 does not have a way to inline those type annotations there"
            },
            {
              "seconds": 192,
              "text": "but pep 484 did by providing these comments here."
            },
            {
              "seconds": 196,
              "text": "So if I've got a with statement I can put a little type comment at the end"
            },
            {
              "seconds": 200,
              "text": "that says foo is going to be type int."
            },
            {
              "seconds": 203,
              "text": "Similarly, for a for loop, if I want to put a type on those"
            },
            {
              "seconds": 206,
              "text": "I can put a type there that says x is going to be a float"
            },
            {
              "seconds": 210,
              "text": "and y is going to be a float as well."
            },
            {
              "seconds": 213,
              "text": "This is straight out of the pep 484."
            },
            {
              "seconds": 215,
              "text": "The typing module also has support for typing generators."
            },
            {
              "seconds": 218,
              "text": "If I want to type a generator, I can just say this echo_round returns a generator"
            },
            {
              "seconds": 223,
              "text": "and this first guy here, this is going to be whatever it yields."
            },
            {
              "seconds": 227,
              "text": "So we can see that we're yielding round res, which is an integer."
            },
            {
              "seconds": 231,
              "text": "The second value that's getting past here, float is the send_type"
            },
            {
              "seconds": 235,
              "text": "so we can see that when we get input into it,"
            },
            {
              "seconds": 238,
              "text": "it is going to be a float or it should be a float and we're going to round it,"
            },
            {
              "seconds": 242,
              "text": "so what comes in should be a float"
            },
            {
              "seconds": 245,
              "text": "and then this final one here is the return type."
            },
            {
              "seconds": 248,
              "text": "So the string that we're returning is going to be a string."
            },
            {
              "seconds": 253,
              "text": "So that's how you use the generator type annotation."
            }
          ]
        },
        {
          "lecture_id": 120706,
          "lecture_title": "Annotations best practices",
          "vimeo_id": 7111047430557893,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Few best practices for typing,"
            },
            {
              "seconds": 2,
              "text": "if you have a function that you're passing around"
            },
            {
              "seconds": 4,
              "text": "and you want to add typing information to it"
            },
            {
              "seconds": 7,
              "text": "using first class functions so you're passing a function into another function,"
            },
            {
              "seconds": 10,
              "text": "again use that typing callable to annotate that"
            },
            {
              "seconds": 13,
              "text": "if you want to disregard the type use the typing any"
            },
            {
              "seconds": 16,
              "text": "why would you want to disregard the type and use this any guy?"
            },
            {
              "seconds": 20,
              "text": "Well, tools like mypy allows for what's called gradual typing,"
            },
            {
              "seconds": 24,
              "text": "and it's going to ignore any code that doesn't have types on it."
            },
            {
              "seconds": 28,
              "text": "But when you start adding types, it's going to do type checking on those."
            },
            {
              "seconds": 32,
              "text": "This is a feature that's built in into mypy, it's intentional"
            },
            {
              "seconds": 35,
              "text": "and the idea there is that if you want to start adding types to your code"
            },
            {
              "seconds": 39,
              "text": "you can add them bit by bit and as you add them,"
            },
            {
              "seconds": 43,
              "text": "the code that you add the types to will start getting type checked"
            },
            {
              "seconds": 46,
              "text": "and it will ignore code that doesn't have types."
            },
            {
              "seconds": 48,
              "text": "Another hint when you start adding these types"
            },
            {
              "seconds": 51,
              "text": "is instead of returning some complicated, nested structure"
            },
            {
              "seconds": 54,
              "text": "list of strings isn't super complicated, but one thing to consider is"
            },
            {
              "seconds": 58,
              "text": "instead of doing that, make a variable called append result"
            },
            {
              "seconds": 61,
              "text": "that is equal to this list of strings and just use the append result instead"
            },
            {
              "seconds": 66,
              "text": "and then any place where you have this list of string guy,"
            },
            {
              "seconds": 69,
              "text": "you can use this append results variable instead,"
            },
            {
              "seconds": 72,
              "text": "it just makes your code a little bit easier to read"
            },
            {
              "seconds": 75,
              "text": "especially when you get some of these more nested structures,"
            },
            {
              "seconds": 77,
              "text": "we'll show an example of that later."
            },
            {
              "seconds": 79,
              "text": "If you're using a named tuple, note that the traditional syntax for a named tuple here"
            },
            {
              "seconds": 84,
              "text": "does not allow for type annotations."
            },
            {
              "seconds": 86,
              "text": "So here I've got a named tuple person with a name, age and country,"
            },
            {
              "seconds": 90,
              "text": "I can't annotate that by using that syntax,"
            },
            {
              "seconds": 92,
              "text": "but I can import from the typing Library the named tuple class"
            },
            {
              "seconds": 98,
              "text": "and if I subclass from that, here I'm making a person class"
            },
            {
              "seconds": 101,
              "text": "and I'm subtyping named tuple, I can put these class variables here"
            },
            {
              "seconds": 106,
              "text": "with type annotations and add the annotation there."
            },
            {
              "seconds": 109,
              "text": "So if you use named tuples you probably want to"
            },
            {
              "seconds": 112,
              "text": "migrate to this newer way of defining them that allows you to put types on them."
            },
            {
              "seconds": 117,
              "text": "Another thing to be aware of is that none can be used all over the place in Python"
            },
            {
              "seconds": 121,
              "text": "and you don't want to dereference a none per se"
            },
            {
              "seconds": 125,
              "text": "and try and pull an attribute off of a none object"
            },
            {
              "seconds": 128,
              "text": "and so a lot of places in Python you'll need to have checks"
            },
            {
              "seconds": 131,
              "text": "for if something is actually none or not before you do something to it."
            },
            {
              "seconds": 135,
              "text": "And sometimes you might return something and you might not,"
            },
            {
              "seconds": 137,
              "text": "and in that case you're going to want to use this optional from the typing module"
            },
            {
              "seconds": 141,
              "text": "so we can import optional here and we can say"
            },
            {
              "seconds": 144,
              "text": "this function find returns optionally a person object"
            },
            {
              "seconds": 148,
              "text": "and basically it's going to loop over a list and if it finds some person that matches"
            },
            {
              "seconds": 153,
              "text": "it will return it, otherwise, it will return a none."
            },
            {
              "seconds": 156,
              "text": "So if you are optionally returning something, use that optional type."
            },
            {
              "seconds": 160,
              "text": "Here's another hint when you're using the mypy tool,"
            },
            {
              "seconds": 163,
              "text": "mypy tool has a nice little function called reveal_type."
            },
            {
              "seconds": 166,
              "text": "We don't even need to import it, we just put reveal_type in our code"
            },
            {
              "seconds": 170,
              "text": "and when we run our mypy tool it will print out what it infers the type to be."
            },
            {
              "seconds": 175,
              "text": "Here I have a function called add that takes two parameters, x and y"
            },
            {
              "seconds": 178,
              "text": "and it says the x is an integer and y is a float,"
            },
            {
              "seconds": 181,
              "text": "if I sum those up maybe I don't know what type that returns,"
            },
            {
              "seconds": 184,
              "text": "I don't know what Python returns there."
            },
            {
              "seconds": 186,
              "text": "If I want to find out, I can say reveal types there with the new variable"
            },
            {
              "seconds": 191,
              "text": "and when I run mypy on this, mypy is going to say"
            },
            {
              "seconds": 193,
              "text": "I think that this type is this and that allows me to add typing"
            },
            {
              "seconds": 197,
              "text": "to the res variable if I wanted to."
            }
          ]
        },
        {
          "lecture_id": 120707,
          "lecture_title": "mypy (type consistency verification)",
          "vimeo_id": 7111841933806693,
          "subtitles": [
            {
              "seconds": 0,
              "text": "So let's look at an example of using the mypy tool."
            },
            {
              "seconds": 3,
              "text": "I'm going to add typing to a little project I have, it's a markov chain,"
            },
            {
              "seconds": 8,
              "text": "so you can check out this GitHub repository if you want to look at it,"
            },
            {
              "seconds": 11,
              "text": "but here's how I do it, I'm in a virtual environment"
            },
            {
              "seconds": 14,
              "text": "and I say pip install mypy, that's going to go out and fetch the mypy tool"
            },
            {
              "seconds": 17,
              "text": "and I'm going to clone this GitHub repository that I have,"
            },
            {
              "seconds": 20,
              "text": "and I'll change into that directory,"
            },
            {
              "seconds": 22,
              "text": "and in there, there's a file called markov.py, I'm just going to run mypy,"
            },
            {
              "seconds": 26,
              "text": "which gets installed as a binary when I install the mypy tool"
            },
            {
              "seconds": 30,
              "text": "and I run that on markov.py and it will return no output."
            },
            {
              "seconds": 34,
              "text": "And again, why this returns no output is because mypy supports gradual typing"
            },
            {
              "seconds": 39,
              "text": "it ignores code that doesn't have annotations and this code didn't have any annotations,"
            },
            {
              "seconds": 44,
              "text": "so it's not going to have any output there."
            },
            {
              "seconds": 46,
              "text": "If I want to get a little bit more ambitious, I can put -- strict after mypy"
            },
            {
              "seconds": 50,
              "text": "that turns on a bunch of features"
            },
            {
              "seconds": 53,
              "text": "and I'm going to get a bunch of warnings or errors from the results here,"
            },
            {
              "seconds": 57,
              "text": "it's going to say this function is missing a type annotation"
            },
            {
              "seconds": 59,
              "text": "we're calling some other functions in a type context and they're not typed."
            },
            {
              "seconds": 64,
              "text": "And so these are the sorts of things that mypy can find for us."
            },
            {
              "seconds": 68,
              "text": "Again, note that it also supports this gradual typing"
            },
            {
              "seconds": 71,
              "text": "and so if we leave off the strict,"
            },
            {
              "seconds": 73,
              "text": "it's just going to ignore anything that we haven't annotated."
            },
            {
              "seconds": 76,
              "text": "So here are a few hints for adding annotations,"
            },
            {
              "seconds": 78,
              "text": "2 ways that you can do it, you can start from the outside code that gets called"
            },
            {
              "seconds": 82,
              "text": "and calls other code and start calling annotating this outer code,"
            },
            {
              "seconds": 86,
              "text": "alternatively you can start wrapping inside code that gets called and annotating that first."
            },
            {
              "seconds": 92,
              "text": "Either one of those will work."
            },
            {
              "seconds": 95,
              "text": "What is important for me is if I've got a public interface,"
            },
            {
              "seconds": 98,
              "text": "I want to make sure that there's typing around it"
            },
            {
              "seconds": 101,
              "text": "and that it's clear what comes in and out."
            },
            {
              "seconds": 104,
              "text": "So I'm going to start annotating something that I think is important"
            },
            {
              "seconds": 108,
              "text": "and I'm going to run the mypy on some file."
            },
            {
              "seconds": 111,
              "text": "It might complain because it's going to start type checking where I've annotated"
            },
            {
              "seconds": 115,
              "text": "and then I might need to go in and fix things or add more annotations."
            },
            {
              "seconds": 119,
              "text": "And if I want to get ambitious again, I can use this -- strict"
            },
            {
              "seconds": 123,
              "text": "and that will turn on a bunch of flags and add a bunch more checks for me."
            },
            {
              "seconds": 128,
              "text": "But basically, after I've gone through this process on my markov file here,"
            },
            {
              "seconds": 132,
              "text": "I'll have a dif that looks something like this."
            },
            {
              "seconds": 135,
              "text": "So I'm going to end up importing from the typing module the dict and list types"
            },
            {
              "seconds": 141,
              "text": "and I'm going to make a table result variable here or type"
            },
            {
              "seconds": 146,
              "text": "and it's going to be this structure here."
            },
            {
              "seconds": 149,
              "text": "It's going to be a dictionary that maps a string to another dictionary"
            },
            {
              "seconds": 153,
              "text": "and inside that dictionary, we map a string to account."
            },
            {
              "seconds": 156,
              "text": "So this code if you're not familiar with it, it creates a markov chain"
            },
            {
              "seconds": 160,
              "text": "a markov chain takes input and gives you some output based on what your input is,"
            },
            {
              "seconds": 165,
              "text": "and in this case, markov chain is typically used in text prediction"
            },
            {
              "seconds": 169,
              "text": "or if you're typing, predicting what characters to come next"
            },
            {
              "seconds": 173,
              "text": "and so you can feed a paragraph or a bunch of text into this"
            },
            {
              "seconds": 176,
              "text": "and it will be able to tell you if I have a, what comes after a,"
            },
            {
              "seconds": 180,
              "text": "after a comes maybe p because we're spelling apple or something like that."
            },
            {
              "seconds": 185,
              "text": "That's the tooling that the markov chain allows you to do."
            },
            {
              "seconds": 189,
              "text": "And so here in my constructor here, I've got data that's coming in"
            },
            {
              "seconds": 192,
              "text": "and I've got size that's an optional value here."
            },
            {
              "seconds": 195,
              "text": "And when I annotate that, I'm going to say data is going to be a string,"
            },
            {
              "seconds": 200,
              "text": "size is going to be an int and my constructor returns none."
            },
            {
              "seconds": 204,
              "text": "This is the way that you annotate a constructor."
            },
            {
              "seconds": 208,
              "text": "Also note that I've got a variable here, an instance variable called self.tables,"
            },
            {
              "seconds": 213,
              "text": "and I am annotating that and that is going to be a list of table results."
            },
            {
              "seconds": 217,
              "text": "So maybe you can see the reason why I made this table result variable here or type"
            },
            {
              "seconds": 222,
              "text": "is because it makes it a little bit more clear"
            },
            {
              "seconds": 224,
              "text": "I would have this nested list of dictionaries of dictionaries"
            },
            {
              "seconds": 228,
              "text": "and I can just clearly read that this is a list of table results."
            },
            {
              "seconds": 231,
              "text": "Here's another method that got type annotated."
            },
            {
              "seconds": 234,
              "text": "So predict takes a string of input."
            },
            {
              "seconds": 237,
              "text": "So we've annotated that and returns the string that's going to come after that input"
            },
            {
              "seconds": 242,
              "text": "if we feed an a we should get p out, something like that"
            },
            {
              "seconds": 245,
              "text": "and you'll note that I annotated just the method parameters"
            },
            {
              "seconds": 249,
              "text": "and the method what it returns, but there is one more annotation in here."
            },
            {
              "seconds": 253,
              "text": "I didn't annotate a bunch of the variables inside of here"
            },
            {
              "seconds": 256,
              "text": "because mypy didn't complain about those,"
            },
            {
              "seconds": 258,
              "text": "but it did complain about this guy down here"
            },
            {
              "seconds": 261,
              "text": "and the reason is because I've got a variable called result"
            },
            {
              "seconds": 265,
              "text": "that is looping over this options.items collection,"
            },
            {
              "seconds": 269,
              "text": "and then I'm also reusing that same variable result down later"
            },
            {
              "seconds": 273,
              "text": "to randomly choose out of my possible guys what comes next"
            },
            {
              "seconds": 278,
              "text": "because I'm looping over something that might be empty,"
            },
            {
              "seconds": 282,
              "text": "in this case result could be none and that confuses mypy"
            },
            {
              "seconds": 287,
              "text": "but what's really happening here is this is actually indicated"
            },
            {
              "seconds": 290,
              "text": "that my reuse of this variable, this was a bug on my part,"
            },
            {
              "seconds": 295,
              "text": "I shouldn't have reused this variable name"
            },
            {
              "seconds": 297,
              "text": "and so mypy said, well, you've either got to type it or change the name."
            },
            {
              "seconds": 301,
              "text": "So in this case, I add the typing and mypy doesn't complain about it anymore."
            },
            {
              "seconds": 305,
              "text": "But the correct thing to do here would be to actually change that variable name."
            },
            {
              "seconds": 309,
              "text": "You could call this, this is the input and count rather than the resulting count there."
            },
            {
              "seconds": 315,
              "text": "Here's another example of the annotation that I added"
            },
            {
              "seconds": 319,
              "text": "this get table function accepts a line, which is a string"
            },
            {
              "seconds": 322,
              "text": "and the number of characters that we're going to process as input."
            },
            {
              "seconds": 326,
              "text": "So we could process a single character after a comes p,"
            },
            {
              "seconds": 329,
              "text": "but we could also say I want to process a and p"
            },
            {
              "seconds": 331,
              "text": "and after a and p comes another p for apple or whatnot,"
            },
            {
              "seconds": 334,
              "text": "if you add more memory to this markov chain,"
            },
            {
              "seconds": 337,
              "text": "it makes better predictions and can make sentences or paragraphs or that sort of thing."
            },
            {
              "seconds": 341,
              "text": "And we're going to also say that this get table returns a table result,"
            },
            {
              "seconds": 345,
              "text": "recall that I defined this table result couple slides back, which is a nested dictionary here."
            },
            {
              "seconds": 350,
              "text": "But again, it's a lot more readable to have this table result defined"
            },
            {
              "seconds": 354,
              "text": "and reuse that table result rather than throwing this nested code around all over the place"
            },
            {
              "seconds": 361,
              "text": "table result is very clear and should make sense."
            },
            {
              "seconds": 365,
              "text": "So after doing that, I think my code is more clear, it should be more clear"
            },
            {
              "seconds": 369,
              "text": "and people who are coming to it should have a very good understanding"
            },
            {
              "seconds": 373,
              "text": "of what is the input and what is the output."
            },
            {
              "seconds": 376,
              "text": "I also found a possible bug by reusing the result variable"
            },
            {
              "seconds": 379,
              "text": "so I could annotate that, in retrospect I should have just renamed the variable"
            },
            {
              "seconds": 383,
              "text": "but mypy can help you find these sorts of issues."
            }
          ]
        },
        {
          "lecture_id": 120708,
          "lecture_title": "Walk-through: Annotations",
          "vimeo_id": 7111117459330883,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to look at annotate_test.py."
            },
            {
              "seconds": 3,
              "text": "The first thing it says to do is to make a copy of py3code.py to py3code.pyORIG"
            },
            {
              "seconds": 8,
              "text": "So I've got those files in my documents directory."
            },
            {
              "seconds": 12,
              "text": "I'm going to say copy documents talkpy labs in py3code"
            },
            {
              "seconds": 23,
              "text": "and let's just copy that to py3code.pyORIG"
            },
            {
              "seconds": 26,
              "text": "You can do this through an explorer window if you're on Windows"
            },
            {
              "seconds": 30,
              "text": "or from the terminal if you want to, either way."
            },
            {
              "seconds": 33,
              "text": "Okay, so there we go."
            },
            {
              "seconds": 36,
              "text": "Next thing it says is to use virtual environment and pip to install mypy."
            },
            {
              "seconds": 41,
              "text": "So I'm in my directory where my virtual environment is,"
            },
            {
              "seconds": 45,
              "text": "I've got it activated so I can say pip install mypy here"
            },
            {
              "seconds": 50,
              "text": "and it will go out and fetch it and install it."
            },
            {
              "seconds": 53,
              "text": "Okay, so now I should have mypy in my path and I can run it."
            },
            {
              "seconds": 58,
              "text": "Excellent, okay."
            },
            {
              "seconds": 61,
              "text": "Next thing it says is to run mypy-- strict on py3code, let's try that."
            },
            {
              "seconds": 66,
              "text": "So I'm going to go into my directory where I have the labs here."
            },
            {
              "seconds": 74,
              "text": "I'm going to say mypy--strict on py3code,"
            },
            {
              "seconds": 86,
              "text": "mypy--strict on py3code.py."
            },
            {
              "seconds": 92,
              "text": "Okay, and I get a bunch of things,"
            },
            {
              "seconds": 94,
              "text": "on line 4 we're missing an annotation, line 7 we're missing an annotation,"
            },
            {
              "seconds": 98,
              "text": "on line 10 missing an annotation, line 15 missing an annotation."
            },
            {
              "seconds": 102,
              "text": "So let's go through and see if we can fix some of these things here."
            },
            {
              "seconds": 106,
              "text": "Let's open up py3code, line 4 it says we're missing an annotation,"
            },
            {
              "seconds": 110,
              "text": "that's this guy right here."
            },
            {
              "seconds": 112,
              "text": "So it looks like this is returning an integer,"
            },
            {
              "seconds": 114,
              "text": "so let's add an annotation here to just say return int,"
            },
            {
              "seconds": 117,
              "text": "and let's run it and see if that fixed it."
            },
            {
              "seconds": 124,
              "text": "Okay, and so now I no longer have that there."
            },
            {
              "seconds": 136,
              "text": "I'm just going to copy and paste this so I can quickly throw these on here."
            },
            {
              "seconds": 149,
              "text": "All of these methods here return an integer."
            },
            {
              "seconds": 152,
              "text": "Okay, let me run mypy again and see what it's complaining about now."
            },
            {
              "seconds": 157,
              "text": "We're now in line 44, function is missing an annotation on 44."
            },
            {
              "seconds": 163,
              "text": "So here's 44, this is our force guy and we've got mass and acceleration,"
            },
            {
              "seconds": 167,
              "text": "so I'm just going to say that mass is a float and acceleration is a float"
            },
            {
              "seconds": 172,
              "text": "and those return an int and quad here."
            },
            {
              "seconds": 179,
              "text": "I'm going to say a is a float and b is a float and c is a float"
            },
            {
              "seconds": 194,
              "text": "and this also returns a float here, and we'll change this guy,"
            },
            {
              "seconds": 199,
              "text": "it should return a float instead of an int."
            },
            {
              "seconds": 208,
              "text": "Okay, we got on line 52 incompatible return type"
            },
            {
              "seconds": 212,
              "text": "got tuple of float float and not an expected float."
            },
            {
              "seconds": 215,
              "text": "Interesting, okay on 52 it says that we're returning this guy as a float and this guy's a float."
            },
            {
              "seconds": 222,
              "text": "So, let's see, we can use PyCharm to fix that for us,"
            },
            {
              "seconds": 230,
              "text": "it has the smarts to fixes this for us."
            },
            {
              "seconds": 231,
              "text": "Another thing we might want to do is you might want to just say this is a quad result here"
            },
            {
              "seconds": 237,
              "text": "and put that up here and say quad result here"
            },
            {
              "seconds": 249,
              "text": "that way if I'm getting these quad results in other places I can reuse that if I want to."
            },
            {
              "seconds": 256,
              "text": "Okay, and it says that tuple is not defined, let's define tuple."
            },
            {
              "seconds": 260,
              "text": "We can probably use PyCharm to do that, so import this name, and it's typing.tuple."
            },
            {
              "seconds": 270,
              "text": "So if you're not familiar with that, there's the typing library"
            },
            {
              "seconds": 272,
              "text": "and you can import that tuple guy."
            },
            {
              "seconds": 275,
              "text": "And the nice thing about using the tuple here as we use these square brackets"
            },
            {
              "seconds": 277,
              "text": "and we can say that this is a tuple of floats"
            },
            {
              "seconds": 280,
              "text": "rather than just saying that it is of the tuple class"
            },
            {
              "seconds": 283,
              "text": "we're specifying what is inside the tuple, kind of cool."
            },
            {
              "seconds": 287,
              "text": "Let's run it again and make sure it works."
            },
            {
              "seconds": 290,
              "text": "Okay, we're good to go there. Let's go back to our annotate test."
            },
            {
              "seconds": 295,
              "text": "Okay, run py3code with this super test and keyword test."
            },
            {
              "seconds": 303,
              "text": "Okay, so let's try and do this here."
            },
            {
              "seconds": 307,
              "text": "We're going to run py3code with super test and keyword test"
            },
            {
              "seconds": 313,
              "text": "with ignore missing imports, I'll just copy this."
            },
            {
              "seconds": 321,
              "text": "Okay my copy didn't work, so ignore my copy"
            },
            {
              "seconds": 324,
              "text": "mypy --strict py3code and it says ignore missing imports, so we'll ignore."
            },
            {
              "seconds": 337,
              "text": "Missing Imports tells it that if you've got import data"
            },
            {
              "seconds": 342,
              "text": "that you don't have type information for it, just ignore that don't complain about it."
            },
            {
              "seconds": 347,
              "text": "So I wanted this to do super test and keyword only test I believe."
            },
            {
              "seconds": 354,
              "text": "Okay, and so if we do this, now we're getting function is missing a type annotation there,"
            },
            {
              "seconds": 360,
              "text": "keyword test and super tests are missing type annotations."
            },
            {
              "seconds": 366,
              "text": "In this case, it's not missing anything extra in py3code."
            },
            {
              "seconds": 369,
              "text": "So there aren't any other issues."
            },
            {
              "seconds": 372,
              "text": "We could go through super test and we could add annotations"
            },
            {
              "seconds": 375,
              "text": "to super test if we wanted to here."
            },
            {
              "seconds": 382,
              "text": "So let's look at super test, on line 3, it says function 3, 31 and 33."
            },
            {
              "seconds": 388,
              "text": "So here's line 3, we could just say that this returns none here,"
            },
            {
              "seconds": 402,
              "text": "31 def speed this returns an int"
            },
            {
              "seconds": 407,
              "text": "and 33, cannot assign to a method."
            },
            {
              "seconds": 415,
              "text": "Okay, in that case, it's just complaining, it's just giving us a warning"
            },
            {
              "seconds": 418,
              "text": "it's saying you know what, you're doing some monkey patching here,"
            },
            {
              "seconds": 420,
              "text": "you probably shouldn't do that."
            },
            {
              "seconds": 427,
              "text": "Okay, 31 is still complaining,"
            },
            {
              "seconds": 431,
              "text": "it's saying I take a self so this would actually be a character,"
            },
            {
              "seconds": 439,
              "text": "let's see if that resolves that issue."
            },
            {
              "seconds": 443,
              "text": "Okay, and keyword has a couple of things"
            },
            {
              "seconds": 448,
              "text": "and it's actually complaining about the test here."
            },
            {
              "seconds": 451,
              "text": "So in the keyword test saying too many positional arguments for force and quad,"
            },
            {
              "seconds": 456,
              "text": "that's kind of cool, note that this is our actual test that's calling this."
            },
            {
              "seconds": 460,
              "text": "If we were using mypy in the continuous integration situation here"
            },
            {
              "seconds": 465,
              "text": "note that we're intentionally calling this in a bad way,"
            },
            {
              "seconds": 468,
              "text": "we would want to probably turn off mypy for this keyword test"
            },
            {
              "seconds": 472,
              "text": "because this is a false positive here."
            },
            {
              "seconds": 477,
              "text": "Okay, so hopefully you got a little bit of a feel for adding type annotations here."
            },
            {
              "seconds": 483,
              "text": "It's not too difficult, and we saw that we can do some cool things"
            },
            {
              "seconds": 487,
              "text": "I had erroneously put float here as the return type"
            },
            {
              "seconds": 491,
              "text": "and mypy told me that that's not what it returned, it actually returns a tuple."
            },
            {
              "seconds": 495,
              "text": "So this is a great feature that's coming out"
            },
            {
              "seconds": 498,
              "text": "and I hope you can take advantage of it to make your code more robust"
            },
            {
              "seconds": 502,
              "text": "or find bugs earlier in your code."
            }
          ]
        },
        {
          "lecture_id": 120709,
          "lecture_title": "3rd-party Annotation tools (combined)",
          "vimeo_id": 7111924854047459,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to talk about 3rd-party annotation tooling."
            },
            {
              "seconds": 3,
              "text": "These are tools that are useful when using annotations that Python 3 supports."
            },
            {
              "seconds": 8,
              "text": "We're going to look at a couple tools here one is MonkeyType,"
            },
            {
              "seconds": 12,
              "text": "this is created by the people at Instagram"
            },
            {
              "seconds": 14,
              "text": "and this is a tool that allows you to run your code"
            },
            {
              "seconds": 17,
              "text": "and as it's running, it will trace it and keep track of the types"
            },
            {
              "seconds": 20,
              "text": "and then it will generate some type information for you."
            },
            {
              "seconds": 22,
              "text": "Similar project is called PyAnnotate, this is by Dropbox"
            },
            {
              "seconds": 26,
              "text": "and this is very similar, it does basically the same thing."
            },
            {
              "seconds": 28,
              "text": "Basically the difference between these two is that MonkeyType is focused on Python 3,"
            },
            {
              "seconds": 33,
              "text": "whereas PyAnnotate has Python 2 support"
            },
            {
              "seconds": 36,
              "text": "because Dropbox has a lot of Python 2 code and they want to add types to it."
            },
            {
              "seconds": 41,
              "text": "There's another tool called PyType, which is very similar to mypy,"
            },
            {
              "seconds": 45,
              "text": "it does type checking and we'll look at that as well."
            },
            {
              "seconds": 48,
              "text": "We'll also look at mypy a little bit."
            }
          ]
        },
        {
          "lecture_id": 120710,
          "lecture_title": "3rd-party: monkeytype",
          "vimeo_id": 7111094157879488,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In order to use the monkeytype tool,"
            },
            {
              "seconds": 2,
              "text": "rather than just analyzing your code, you actually need to run it."
            },
            {
              "seconds": 5,
              "text": "So you probably need a driver file or some test scripts or something,"
            },
            {
              "seconds": 8,
              "text": "while it's running, it will drop some information into a sqlite file"
            },
            {
              "seconds": 12,
              "text": "and then with that sqlite file, you can tell it to annotate code with type information."
            },
            {
              "seconds": 17,
              "text": "We're going to look at the same markov file that we were looking at previously"
            },
            {
              "seconds": 21,
              "text": "and here for monkeytype, I'm going to make a code runner,"
            },
            {
              "seconds": 24,
              "text": "I'm just going to call it run test.py, it's going to import doc test"
            },
            {
              "seconds": 28,
              "text": "and it's going to import the markov module that we have"
            },
            {
              "seconds": 31,
              "text": "and it's just going to run the doc tests on the module"
            },
            {
              "seconds": 33,
              "text": "and hopefully using that information,"
            },
            {
              "seconds": 35,
              "text": "It will be able to give us some type information."
            },
            {
              "seconds": 38,
              "text": "Using monkeytype is pretty straightforward."
            },
            {
              "seconds": 40,
              "text": "I say pip install monkeytype to get it installed"
            },
            {
              "seconds": 43,
              "text": "and then I rather than running Python on my code"
            },
            {
              "seconds": 46,
              "text": "I say monkeytype run with the runner file,"
            },
            {
              "seconds": 49,
              "text": "and in this case again, it's going to run through that doc test"
            },
            {
              "seconds": 53,
              "text": "and trace the code and remember those types and put them in a sqlite file."
            },
            {
              "seconds": 58,
              "text": "And then after I've done that, I can run monkeytype stub markov"
            },
            {
              "seconds": 61,
              "text": "that will create the stub information."
            },
            {
              "seconds": 64,
              "text": "And so this is what it outputs, it just prints this out to standard out"
            },
            {
              "seconds": 67,
              "text": "and you can see that it has added some types"
            },
            {
              "seconds": 71,
              "text": "to my functions and to my methods."
            },
            {
              "seconds": 74,
              "text": "One thing to note is that it added Python 3 style annotation support"
            },
            {
              "seconds": 78,
              "text": "so this looks pretty good, if you look at the types that it added"
            },
            {
              "seconds": 82,
              "text": "for example in the git table function,"
            },
            {
              "seconds": 84,
              "text": "you'll note that it added this nested dictionary of strings mapping the dictionaries,"
            },
            {
              "seconds": 89,
              "text": "of strings mapping the integers, so that's pretty good."
            },
            {
              "seconds": 92,
              "text": "And it looks like all the type information there"
            },
            {
              "seconds": 95,
              "text": "is pretty correct and should be good to use."
            }
          ]
        },
        {
          "lecture_id": 120711,
          "lecture_title": "3rd-party: pyannotate",
          "vimeo_id": 7111429320051003,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Let's look at the pyannotate tool,"
            },
            {
              "seconds": 2,
              "text": "again, this is very similar to monkeytype."
            },
            {
              "seconds": 4,
              "text": "We run our code and again we might need a driver file, this is not static."
            },
            {
              "seconds": 8,
              "text": "In this case, it's going to click information in a Json file"
            },
            {
              "seconds": 10,
              "text": "and then we tell it to annotate our code with our type information,"
            },
            {
              "seconds": 14,
              "text": "very easy install, I just say pip install pyannotate"
            },
            {
              "seconds": 17,
              "text": "and then I'm going to run a driver file."
            },
            {
              "seconds": 19,
              "text": "And then after I've run that driver file, I'm going to say pyannotate - w"
            },
            {
              "seconds": 23,
              "text": "that means write the markov.py file or update it with the type information."
            },
            {
              "seconds": 28,
              "text": "Here's my driver file, I'm going to import doc test and markov"
            },
            {
              "seconds": 31,
              "text": "and I'm also going to import the collect types from the pyannotate runtime module"
            },
            {
              "seconds": 36,
              "text": "and you can see all this is doing is it's saying if I'm running this"
            },
            {
              "seconds": 40,
              "text": "then I'm going to init my types collection"
            },
            {
              "seconds": 43,
              "text": "and then it's going to have a context manager there"
            },
            {
              "seconds": 45,
              "text": "that's going to run my code inside of the context manager"
            },
            {
              "seconds": 48,
              "text": "that collects the information"
            },
            {
              "seconds": 50,
              "text": "and then it's going to dump that information into a Json file."
            },
            {
              "seconds": 53,
              "text": "Here's a diff of the output that comes out of that."
            },
            {
              "seconds": 56,
              "text": "We see that it has imported from typing optional and dict"
            },
            {
              "seconds": 59,
              "text": "so it's got some imports there"
            },
            {
              "seconds": 61,
              "text": "and we see that it's added some type information here as a comment,"
            },
            {
              "seconds": 64,
              "text": "so this is the Python 2 style of annotation there"
            },
            {
              "seconds": 68,
              "text": "and those types look fine, it's also done some typing here."
            },
            {
              "seconds": 73,
              "text": "So it says that data in is an optional string that looks okay"
            },
            {
              "seconds": 77,
              "text": "and note that get table also looks like it's returning this nested data structure"
            },
            {
              "seconds": 83,
              "text": "of dictionaries, mapping strings to subdictionaries, mapping strings to counts of strings."
            },
            {
              "seconds": 89,
              "text": "So all of these types look good."
            },
            {
              "seconds": 91,
              "text": "They're just in the Python 2 style rather than Python 3,"
            },
            {
              "seconds": 94,
              "text": "note that we can use those in Python 3 as well."
            },
            {
              "seconds": 97,
              "text": "Again, pyannotate supports Python 2.7 style annotations"
            },
            {
              "seconds": 101,
              "text": "as of when this video was recorded."
            }
          ]
        },
        {
          "lecture_id": 120712,
          "lecture_title": "3rd-party: mypy",
          "vimeo_id": 7111630325202471,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Let's look at mypy a little bit more."
            },
            {
              "seconds": 2,
              "text": "I'm going to contrast this with a tool that Google has in a minute here."
            },
            {
              "seconds": 5,
              "text": "So mypy supports Python 3 style annotations,"
            },
            {
              "seconds": 10,
              "text": "it also supports Python 2 style annotations"
            },
            {
              "seconds": 13,
              "text": "and it supports what are called stub files."
            },
            {
              "seconds": 16,
              "text": "So if you have some code that you need to type check"
            },
            {
              "seconds": 19,
              "text": "or you want to type check against but you can't change that code,"
            },
            {
              "seconds": 22,
              "text": "such as code in the standard library or whatnot,"
            },
            {
              "seconds": 24,
              "text": "you can use these stub files, these are pyi files"
            },
            {
              "seconds": 27,
              "text": "that just have type information in them."
            },
            {
              "seconds": 29,
              "text": "Mypy can run against all of these."
            },
            {
              "seconds": 32,
              "text": "If you want to create a stub file, if you are using a third-party library"
            },
            {
              "seconds": 35,
              "text": "and can't push code back upstream or they don't want to include type information,"
            },
            {
              "seconds": 40,
              "text": "you can also create stub files as well."
            },
            {
              "seconds": 42,
              "text": "Mypy ships with a stub gen.py tool to create stub files."
            },
            {
              "seconds": 46,
              "text": "And one of the values of having these stub files is"
            },
            {
              "seconds": 49,
              "text": "it gives a little bit more checking to validate"
            },
            {
              "seconds": 53,
              "text": "that you haven't had typos in what you're calling"
            },
            {
              "seconds": 56,
              "text": "and that the methods and functions that you're calling all exist."
            },
            {
              "seconds": 58,
              "text": "Here's an example of running mypy,"
            },
            {
              "seconds": 61,
              "text": "it's pretty easy to install, we just pip install it"
            },
            {
              "seconds": 63,
              "text": "and then we can say Python -m mypy on what we need to check"
            },
            {
              "seconds": 68,
              "text": "or we can call the mypy executable itself on the file."
            },
            {
              "seconds": 71,
              "text": "And again, this is static type checking, it's not going to execute the markov code per se"
            },
            {
              "seconds": 77,
              "text": "but it's going to look at it and try and divine what the types are."
            },
            {
              "seconds": 81,
              "text": "And in this case, I'm going to get some errors"
            },
            {
              "seconds": 84,
              "text": "you'll note that the tooling that I just ran previously for pyannotate"
            },
            {
              "seconds": 88,
              "text": "added some type information to my markov file,"
            },
            {
              "seconds": 92,
              "text": "and now when I run mypy against it, it's going to complain"
            },
            {
              "seconds": 95,
              "text": "because it's going to start type checking those things."
            },
            {
              "seconds": 98,
              "text": "So it complained about line 38 and line 57."
            },
            {
              "seconds": 100,
              "text": "It says we need type annotations for a variable."
            },
            {
              "seconds": 103,
              "text": "These are what those two lines look like."
            },
            {
              "seconds": 105,
              "text": "We are making the tables attribute in the class instance,"
            },
            {
              "seconds": 109,
              "text": "and we also have a results attribute this table creation as well."
            },
            {
              "seconds": 114,
              "text": "So interestingly enough, monkey type and pyannotate,"
            },
            {
              "seconds": 119,
              "text": "they didn't create the types for these guys internally,"
            },
            {
              "seconds": 123,
              "text": "they created the function and method types, but not the internal types"
            },
            {
              "seconds": 127,
              "text": "that mypy was looking at in this case."
            },
            {
              "seconds": 129,
              "text": "Here's an example of removing the errors for the tables guy."
            },
            {
              "seconds": 133,
              "text": "I can just do an inline definition here for the type on the variable here."
            },
            {
              "seconds": 137,
              "text": "It's that nested guy, and if I was being a little bit more user-friendly,"
            },
            {
              "seconds": 142,
              "text": "I'd probably define this up above as a table result"
            },
            {
              "seconds": 146,
              "text": "and just point this at table result instead, make it a little bit more easy,"
            },
            {
              "seconds": 152,
              "text": "this is a little bit too nested and we're going to use table result in a couple of places in this file,"
            },
            {
              "seconds": 158,
              "text": "so it makes sense to reuse that code."
            },
            {
              "seconds": 159,
              "text": "One of the other things you can do is integrate mypy with continuous integration tools"
            },
            {
              "seconds": 163,
              "text": "so you can run things like --cobertura-xml-report"
            },
            {
              "seconds": 167,
              "text": "and that will give you a line-by-line report on how your type information is."
            },
            {
              "seconds": 172,
              "text": "It will give it a ranking of it and you can integrate that"
            },
            {
              "seconds": 176,
              "text": "and if you're interested in tracking these things,"
            },
            {
              "seconds": 179,
              "text": "this is something that's interesting to you and called quality,"
            },
            {
              "seconds": 182,
              "text": "then you can measure it and keep track of it with your continuous integration."
            },
            {
              "seconds": 185,
              "text": "Another nice little feature in mypy is the reveal type function."
            },
            {
              "seconds": 189,
              "text": "You don't need to import it, but when you're running my type against the module,"
            },
            {
              "seconds": 192,
              "text": "you can just say reveal type of some variable"
            },
            {
              "seconds": 195,
              "text": "and mypy will try and divine what it is."
            },
            {
              "seconds": 198,
              "text": "It does an okay job, sometimes it can't really guess what it is and so it just returns any,"
            },
            {
              "seconds": 202,
              "text": "in this case, I've got a file that takes an integer and a float"
            },
            {
              "seconds": 206,
              "text": "and it ads those two and it's asking if I add those two,"
            },
            {
              "seconds": 209,
              "text": "what's the type of this res variable, and we know that it's a float"
            },
            {
              "seconds": 214,
              "text": "if we have used Python for a while, but maybe you don't"
            },
            {
              "seconds": 217,
              "text": "or maybe you've got some other type that you're not quite sure what it is."
            },
            {
              "seconds": 220,
              "text": "You run that with mypy and it's going to tell you that this type is a float"
            },
            {
              "seconds": 225,
              "text": "so you can put your type information in there if you want to."
            }
          ]
        },
        {
          "lecture_id": 120713,
          "lecture_title": "3rd-party tool summary",
          "vimeo_id": 7111586868367461,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In summary, these tools, they're all third-party tools, they are not in the standard library,"
            },
            {
              "seconds": 4,
              "text": "I view a lot of them as works-in-progress."
            },
            {
              "seconds": 7,
              "text": "They seem to do an okay job and especially the tracing ones"
            },
            {
              "seconds": 12,
              "text": "will sort of get you off and running pretty quickly to add type information."
            },
            {
              "seconds": 17,
              "text": "Pytype, I saw some errors in there and I tried to dig in a little bit"
            },
            {
              "seconds": 23,
              "text": "then dig in too far with the errors that it was throwing."
            },
            {
              "seconds": 26,
              "text": "Monkeytype, I also had some cases where it would throw errors on me."
            },
            {
              "seconds": 30,
              "text": "But remember, these are live projects and most of these have been updated"
            },
            {
              "seconds": 34,
              "text": "within the past month or so and so people are working on them."
            },
            {
              "seconds": 38,
              "text": "Keep an eye on them, they might be useful to add type information if you want them."
            },
            {
              "seconds": 43,
              "text": "But again, if you just add types to your Python code,"
            },
            {
              "seconds": 46,
              "text": "you're not going to get any benefit, you need to use some other tools"
            },
            {
              "seconds": 49,
              "text": "such as mypy to do some static validation of that."
            }
          ]
        },
        {
          "lecture_id": 120714,
          "lecture_title": "Walk-through (part 1): Annotation Tooling",
          "vimeo_id": 7111889115166343,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video, we're going to look at annotate3rd_test.py."
            },
            {
              "seconds": 4,
              "text": "So the first thing it says is it says copy py3code.pyORIG to py3mt.py and py3pa.py."
            },
            {
              "seconds": 17,
              "text": "So here, I've got my directory with my files in it"
            },
            {
              "seconds": 19,
              "text": "and it says copy py3code.pyORIG to py3mt.py and py3pa.py."
            },
            {
              "seconds": 31,
              "text": "Okay, install monkeytype."
            },
            {
              "seconds": 34,
              "text": "I'm in my virtual environment, so I just need to say"
            },
            {
              "seconds": 37,
              "text": "pip install monkeytype here and that should get it."
            },
            {
              "seconds": 41,
              "text": "Okay, it looks like it worked."
            },
            {
              "seconds": 45,
              "text": "Create a function test_mt that exercises py3mt.py in runmt.py."
            },
            {
              "seconds": 53,
              "text": "I need to make a runmt.py, I'm going to say touch runmt.py,"
            },
            {
              "seconds": 58,
              "text": "run monkeytype.py here and we'll split my view here."
            },
            {
              "seconds": 69,
              "text": "Okay, so we need to say create a function test_mt,"
            },
            {
              "seconds": 75,
              "text": "and it needs to have this code here in it."
            },
            {
              "seconds": 87,
              "text": "So let's plop this code in it."
            },
            {
              "seconds": 91,
              "text": "Okay, and it needs to say we need to import this code."
            },
            {
              "seconds": 94,
              "text": "So we're going to say from py3.mt import force and quad and Mario."
            },
            {
              "seconds": 107,
              "text": "Okay, and let's run test_mt at the bottom here."
            },
            {
              "seconds": 113,
              "text": "Okay, and it says create a stub for py3mt.py in py3mt.pyi,"
            },
            {
              "seconds": 122,
              "text": "so we're going to have to use monkeytype to create a stub here."
            },
            {
              "seconds": 131,
              "text": "So the first thing we need to do is run a Python script under monkeytype tracing."
            },
            {
              "seconds": 136,
              "text": "So we're going to say monkeytype run"
            },
            {
              "seconds": 141,
              "text": "and let's run this guy that we just created here, which is called run_mt,"
            },
            {
              "seconds": 149,
              "text": "I got a syntax error, I better fix that syntax error here."
            },
            {
              "seconds": 152,
              "text": "Okay, I have now run it and let's see if we can generate a stub here."
            },
            {
              "seconds": 161,
              "text": "So let's say stub -h and see what the options are for stub."
            },
            {
              "seconds": 165,
              "text": "It says generate a stub and a module path and our module is going to be run in py3mt,"
            },
            {
              "seconds": 174,
              "text": "so stub py3mt, and this is the stub right here"
            },
            {
              "seconds": 181,
              "text": "so I can pipe this into py3mt.pyi and there is my little stub."
            },
            {
              "seconds": 189,
              "text": "You'll notice what it did, it imported the tuple class from the typing module,"
            },
            {
              "seconds": 194,
              "text": "and for force, it said that that returns a float"
            },
            {
              "seconds": 197,
              "text": "and it said the quad returns a tuple of float float,"
            },
            {
              "seconds": 200,
              "text": "character speed returns an int and Mario speed returns an int."
            },
            {
              "seconds": 206,
              "text": "So it didn't type all of the guys, but just a few of them, but that's pretty nice."
            },
            {
              "seconds": 211,
              "text": "But note that it did this not by inspection of the code, but by running the code,"
            },
            {
              "seconds": 217,
              "text": "so if you'll remember in our runmt, we are calling force,"
            },
            {
              "seconds": 223,
              "text": "we're calling quad and we're calling Mario speed,"
            },
            {
              "seconds": 226,
              "text": "we're not calling the other methods of Mario."
            },
            {
              "seconds": 229,
              "text": "And so that's how it determined what those types are."
            },
            {
              "seconds": 235,
              "text": "So the next thing it says to do is run mypy against py3mt.py"
            },
            {
              "seconds": 238,
              "text": "so let's try and run mypy against py3mt.py, we don't get any errors."
            },
            {
              "seconds": 257,
              "text": "And if we call it with strict then we're going to get a few errors here."
            },
            {
              "seconds": 264,
              "text": "Note that if we call strict on pyi, we're going to get on line 4 and line 7"
            },
            {
              "seconds": 271,
              "text": "it says it's missing a function."
            },
            {
              "seconds": 273,
              "text": "So let's just look at line 4 and line 7 and see if we can divine what's going on there."
            },
            {
              "seconds": 280,
              "text": "Okay, line 4 it says it's missing some type information here,"
            },
            {
              "seconds": 284,
              "text": "so that's probably because we don't have float for mass or float for acceleration."
            },
            {
              "seconds": 297,
              "text": "Okay, and probably same thing on line 7 here,"
            },
            {
              "seconds": 299,
              "text": "we don't have type information there either"
            },
            {
              "seconds": 302,
              "text": "so interestingly enough, monkeytype only gave us the return types,"
            },
            {
              "seconds": 307,
              "text": "it did not give us the input types."
            },
            {
              "seconds": 309,
              "text": "This video showed how to use monkeytype to create a stub file"
            },
            {
              "seconds": 314,
              "text": "and do some type checking by running some code and creating that stub file,"
            },
            {
              "seconds": 319,
              "text": "we'll show how to use pyannotate in another video."
            }
          ]
        },
        {
          "lecture_id": 120715,
          "lecture_title": "Walk-through (part 2): Annotation Tooling",
          "vimeo_id": 7111879685272983,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to talk about annotate 3rd and the pyannotate section."
            },
            {
              "seconds": 5,
              "text": "So we're assuming that you've already done steps 1 through 4 here."
            },
            {
              "seconds": 8,
              "text": "The first step is to install pyannotate,"
            },
            {
              "seconds": 11,
              "text": "I've got my virtual env active over here."
            },
            {
              "seconds": 14,
              "text": "I'm just going to say pip install pyannotate."
            },
            {
              "seconds": 19,
              "text": "Okay, the next one is to create a function test_pa that exercises pi3pa.py"
            },
            {
              "seconds": 25,
              "text": "and sticks the Json output into type_info.json."
            },
            {
              "seconds": 29,
              "text": "So I'm going to make a file similar to our runmt.py called runpa, touch runpa.py"
            },
            {
              "seconds": 37,
              "text": "and let's open runpa.py here."
            },
            {
              "seconds": 41,
              "text": "I'll split my screen here so we can see both of these."
            },
            {
              "seconds": 45,
              "text": "Okay, so there's py3pa.py, let's open runpa.py."
            },
            {
              "seconds": 52,
              "text": "I want this to be similar to runmt, so we'll just copy all this,"
            },
            {
              "seconds": 58,
              "text": "it's going to be very similar to this, but we're going to change a little bit"
            },
            {
              "seconds": 60,
              "text": "we're going to change the mt to pa."
            },
            {
              "seconds": 79,
              "text": "Okay, if you go to the pyannotate website, it's got some boilerplate here"
            },
            {
              "seconds": 83,
              "text": "that we can put, we need to make this little context manager here"
            },
            {
              "seconds": 87,
              "text": "and we need to do our import, so we'll drop in the boiler plate here,"
            },
            {
              "seconds": 96,
              "text": "and let's do our import from pyannotate import."
            },
            {
              "seconds": 104,
              "text": "Okay, so we import this collect types guide, we init the collect types"
            },
            {
              "seconds": 108,
              "text": "and then we make context manager,"
            },
            {
              "seconds": 110,
              "text": "with our context manager we run our code and then we dump our stats here"
            },
            {
              "seconds": 115,
              "text": "and according to here it says that we want to dump it into this guy type_info.json."
            },
            {
              "seconds": 124,
              "text": "So we'll do that type_info.json here."
            },
            {
              "seconds": 130,
              "text": "Okay, so I think we've got that part."
            },
            {
              "seconds": 135,
              "text": "We've got the function test_pa, and it exercises our code,"
            },
            {
              "seconds": 140,
              "text": "now let's run this, we're just going to run this with Python"
            },
            {
              "seconds": 144,
              "text": "and then using pyannotate that should look at this type_info guy here."
            },
            {
              "seconds": 150,
              "text": "Let's just say Python runpa.py, it doesn't say anything"
            },
            {
              "seconds": 156,
              "text": "but now it should be a type_info in here, let's just look at type info"
            },
            {
              "seconds": 158,
              "text": "and it looks like it makes sense, when we call character.speed,"
            },
            {
              "seconds": 162,
              "text": "it should return an int and it had one sample in there, it looks okay."
            },
            {
              "seconds": 167,
              "text": "Force looks like it took an int and a float and returned a float."
            },
            {
              "seconds": 171,
              "text": "So looks like that's doing okay,"
            },
            {
              "seconds": 174,
              "text": "it looks like quad was called with ints and returned floats."
            },
            {
              "seconds": 179,
              "text": "So we can call pyannotate, you can just say pyannotate.h"
            },
            {
              "seconds": 183,
              "text": "it's going to give you a little help documentation."
            },
            {
              "seconds": 186,
              "text": "Let's say pyannotate and we have py3pa.py and it says"
            },
            {
              "seconds": 190,
              "text": "I don't have type_info.json, interesting,"
            },
            {
              "seconds": 193,
              "text": "we got to change our name here, type_info.json."
            },
            {
              "seconds": 209,
              "text": "Okay, and now if we run it, we get this little guy here"
            },
            {
              "seconds": 213,
              "text": "and it says this is the refactor, this is the diff that it would make"
            },
            {
              "seconds": 218,
              "text": "and note that it's making Python 2 comments here"
            },
            {
              "seconds": 221,
              "text": "instead of doing the Python 3 annotations."
            },
            {
              "seconds": 225,
              "text": "So this is a supported syntax for Python 2"
            },
            {
              "seconds": 228,
              "text": "and at the end it says note that this was a dry run"
            },
            {
              "seconds": 231,
              "text": "we can use -w to actually write the file."
            },
            {
              "seconds": 234,
              "text": "So let's use -w to write the file here."
            },
            {
              "seconds": 237,
              "text": "And if we look at py3pa now,"
            },
            {
              "seconds": 240,
              "text": "he's got the type annotations in the comments here, cool."
            },
            {
              "seconds": 244,
              "text": "And it says run mypy against py3pa, let's run mypy against this"
            },
            {
              "seconds": 248,
              "text": "and see what complaints we get here."
            },
            {
              "seconds": 252,
              "text": "Okay, no complaints there,"
            },
            {
              "seconds": 254,
              "text": "we'll just turn on the strict and see if strict complains about anything else."
            },
            {
              "seconds": 258,
              "text": "So that says we are still missing some stuff,"
            },
            {
              "seconds": 260,
              "text": "and so this shows the gradual typing of mypy"
            },
            {
              "seconds": 265,
              "text": "that it only checks what's annotated"
            },
            {
              "seconds": 268,
              "text": "and we could go in and add these other annotations,"
            },
            {
              "seconds": 271,
              "text": "we saw how to do that previously,"
            },
            {
              "seconds": 273,
              "text": "but luckily pyannotate gives us a little leg up"
            },
            {
              "seconds": 277,
              "text": "if we've got tests or something that we can run and get that information in there,"
            },
            {
              "seconds": 281,
              "text": "that will just give us a little head start to get that running."
            },
            {
              "seconds": 283,
              "text": "Another benefit of this pyannotate code again is that it works in Python 2 & 3."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12008,
      "chapter_title": "The standard library",
      "lectures": [
        {
          "lecture_id": 120801,
          "lecture_title": "Print Function",
          "vimeo_id": 7111120730928228,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about the print function."
            },
            {
              "seconds": 2,
              "text": "One of the biggest changes for Python 3 is the print function."
            },
            {
              "seconds": 7,
              "text": "In Python 2 print was not a function, but it was a statement, it was built in into the language"
            },
            {
              "seconds": 13,
              "text": "and that's changed in Python 3 just to make things a little bit more consistent."
            },
            {
              "seconds": 16,
              "text": "Guido wanted to change that into a function."
            },
            {
              "seconds": 20,
              "text": "Let's look at some of the features or changes that that brings."
            },
            {
              "seconds": 23,
              "text": "In Python 3, rather than calling print as a statement, we call it as a function"
            },
            {
              "seconds": 29,
              "text": "and so you'll note that there are now parentheses"
            },
            {
              "seconds": 32,
              "text": "when we call something as a callable in Python, we insert parentheses there."
            },
            {
              "seconds": 36,
              "text": "So we're invoking print and we're passing in one and the string one as parameters"
            },
            {
              "seconds": 43,
              "text": "and note that Python prints out 1 and puts a space in there and then print another one."
            },
            {
              "seconds": 48,
              "text": "It also puts a new line at the end here that you can't really see, but it's doing that."
            },
            {
              "seconds": 53,
              "text": "Now if we change this a little bit, so one of the things that Python 3 brings about"
            },
            {
              "seconds": 57,
              "text": "is it allows us to use keyword arguments,"
            },
            {
              "seconds": 60,
              "text": "And we can use 2 keyword arguments with the print function"
            },
            {
              "seconds": 63,
              "text": "sep and end, and sep is what goes in between the arguments that we provide"
            },
            {
              "seconds": 67,
              "text": "and end is what goes in the end."
            },
            {
              "seconds": 70,
              "text": "The default sep is a space and the default for end is a new line."
            },
            {
              "seconds": 73,
              "text": "You'll note that I change them here and we see that I've changed the output here,"
            },
            {
              "seconds": 77,
              "text": "it doesn't put a new line at the end."
            },
            {
              "seconds": 79,
              "text": "Here's just another slide showing that the sep comes in between the arguments"
            },
            {
              "seconds": 83,
              "text": "and end comes at the end,"
            },
            {
              "seconds": 85,
              "text": "if we have multiple arguments sep will be inserted between each one of those."
            },
            {
              "seconds": 88,
              "text": "And that's it, there isn't that much to it"
            },
            {
              "seconds": 90,
              "text": "other than this is meant to be a thing that makes Python more consistent"
            },
            {
              "seconds": 94,
              "text": "and to eliminate some of the statements in Python 2."
            },
            {
              "seconds": 98,
              "text": "I'll just go on a little rant here about print"
            },
            {
              "seconds": 100,
              "text": "I personally think that you shouldn't check-in print into your code."
            },
            {
              "seconds": 103,
              "text": "If you need to print something you're probably either logging it"
            },
            {
              "seconds": 107,
              "text": "or wanting to log it for debugging purposes."
            },
            {
              "seconds": 110,
              "text": "So you should use the logging module for that."
            },
            {
              "seconds": 112,
              "text": "And if you want to print something out to the screen,"
            },
            {
              "seconds": 115,
              "text": "you can be slightly more explicit by calling the write method"
            },
            {
              "seconds": 118,
              "text": "on the sys.stdout attribute found in the system module,"
            },
            {
              "seconds": 122,
              "text": "that will write out to the standard out which typically writes out to the screen."
            },
            {
              "seconds": 126,
              "text": "I think that's a little bit more explicit and conveys your intention,"
            },
            {
              "seconds": 130,
              "text": "whereas print, it's not sure whether you want something go out to the screen always"
            },
            {
              "seconds": 134,
              "text": "or whether you just want it there for debug purposes."
            },
            {
              "seconds": 136,
              "text": "So if you sort of draw a line in the sand and say"
            },
            {
              "seconds": 139,
              "text": "if I need to print something for debug, I'm going to use logging,"
            },
            {
              "seconds": 142,
              "text": "if I need to print something out to the screen in production code or whatnot,"
            },
            {
              "seconds": 145,
              "text": "I'll call sys.stdout.write"
            },
            {
              "seconds": 148,
              "text": "Thanks for watching, I hope you learned a little bit about the print function in this video."
            }
          ]
        },
        {
          "lecture_id": 120802,
          "lecture_title": "Walk-through: Print Function",
          "vimeo_id": 7111831048999733,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at print_test.py, open it up in your editor."
            },
            {
              "seconds": 4,
              "text": "Let's run it and make sure that it works."
            },
            {
              "seconds": 6,
              "text": "So in order to run it, I right click in PyCharm and say run print_test"
            },
            {
              "seconds": 10,
              "text": "this just validates that it's being run with pytest, in this case it is,"
            },
            {
              "seconds": 15,
              "text": "it says there are 2 failures, let's look at the test here."
            },
            {
              "seconds": 18,
              "text": "There are 2 failures because there are 2 tests"
            },
            {
              "seconds": 21,
              "text": "this one here that starts with test and this function here that starts with test."
            },
            {
              "seconds": 24,
              "text": "The description is this comment right here and we need to do what it says."
            },
            {
              "seconds": 28,
              "text": "It says print the numbers from 10 down to 0 with a space between them"
            },
            {
              "seconds": 32,
              "text": "and a new line at the end."
            },
            {
              "seconds": 34,
              "text": "And so the default behavior for the print function"
            },
            {
              "seconds": 36,
              "text": "puts a space between a new line at the end, so let's just try and say print nums"
            },
            {
              "seconds": 40,
              "text": "and run that and see what happens here."
            },
            {
              "seconds": 43,
              "text": "Okay, we still get 2 failures, let's see if the output from pytest helps us at all."
            },
            {
              "seconds": 50,
              "text": "We have an assertion, the assertion failed and said"
            },
            {
              "seconds": 53,
              "text": "that this string here is not equal to this string,"
            },
            {
              "seconds": 56,
              "text": "the difference between these two strings is"
            },
            {
              "seconds": 59,
              "text": "that this one has a list embedded in it, and this one does not."
            },
            {
              "seconds": 63,
              "text": "So when we print out an object here, it just prints the __stir__ version of that"
            },
            {
              "seconds": 68,
              "text": "and if we want to make it so rather than the print out a list"
            },
            {
              "seconds": 73,
              "text": "we want the individual items of the list, we need to use what's called unpacking"
            },
            {
              "seconds": 76,
              "text": "so we can just put a star in front of that and that should unpack them."
            },
            {
              "seconds": 81,
              "text": "Let's try it again, unpack the individual items from that string"
            },
            {
              "seconds": 85,
              "text": "and it looks like we only get one failure now, so we're good with this first one."
            },
            {
              "seconds": 88,
              "text": "Let's look at the assignment for the second one,"
            },
            {
              "seconds": 91,
              "text": "print the numbers from 10 down to 0 with a - * - between them"
            },
            {
              "seconds": 96,
              "text": "and no new line at the end."
            },
            {
              "seconds": 98,
              "text": "So print, we're going to say *nums here again,"
            },
            {
              "seconds": 101,
              "text": "and we're going to say sep is equal to - * - and end is equal to a blank string."
            },
            {
              "seconds": 111,
              "text": "Let's run it and make sure that it works."
            },
            {
              "seconds": 114,
              "text": "Okay, it looks like it works, let's look at the test a little bit"
            },
            {
              "seconds": 117,
              "text": "and try and dig into what's actually going on here."
            },
            {
              "seconds": 120,
              "text": "If you'll notice the import here, I'm importing stringIO"
            },
            {
              "seconds": 124,
              "text": "this is an object that behaves as a file buffer,"
            },
            {
              "seconds": 128,
              "text": "and what I'm doing here is patching or monkey patching sys.stdout,"
            },
            {
              "seconds": 132,
              "text": "I'm creating a stringIO instance, and pointing sys.stdout to it."
            },
            {
              "seconds": 137,
              "text": "So when I call print down here, rather than printing out to the screen,"
            },
            {
              "seconds": 141,
              "text": "it's printing out the string buffer"
            },
            {
              "seconds": 143,
              "text": "and we're pulling the value from that stream buffer out and checking the value of it."
            },
            {
              "seconds": 148,
              "text": "So that's how our little test is working."
            },
            {
              "seconds": 150,
              "text": "Hopefully you understand a little bit about print now"
            },
            {
              "seconds": 153,
              "text": "and again, in Python 3 print is now a function"
            },
            {
              "seconds": 156,
              "text": "and we can use these keyword arguments to change the behavior of the function."
            }
          ]
        },
        {
          "lecture_id": 120803,
          "lecture_title": "Walk-through: pathlib",
          "vimeo_id": 7111160775311480,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about pathlib."
            },
            {
              "seconds": 2,
              "text": "This came about through peps 428 and 519."
            },
            {
              "seconds": 5,
              "text": "So 428 adds pathlib to Python 3, this came about in Python 3.4."
            },
            {
              "seconds": 11,
              "text": "519 adds protocols for paths so that standard libraries"
            },
            {
              "seconds": 15,
              "text": "that support operations on paths can use pathlib."
            },
            {
              "seconds": 20,
              "text": "Pathlib is included in the standard library"
            },
            {
              "seconds": 22,
              "text": "so you can create a path by importing the path class from pathlib."
            },
            {
              "seconds": 27,
              "text": "Here I'm making a path called env in my temp directory"
            },
            {
              "seconds": 31,
              "text": "and if this path exists on my file, and in my case it does,"
            },
            {
              "seconds": 35,
              "text": "I can say list env.iterdir and that gets me back at generator"
            },
            {
              "seconds": 41,
              "text": "and if I materialize that into a list,"
            },
            {
              "seconds": 43,
              "text": "it gives me back a sequence of all these posix paths"
            },
            {
              "seconds": 47,
              "text": "which have everything that is in that directory."
            },
            {
              "seconds": 51,
              "text": "Now posix path, because I'm running this on my Mac, that's what I get back."
            },
            {
              "seconds": 55,
              "text": "If I were to run this on a Windows machine,"
            },
            {
              "seconds": 57,
              "text": "I would get back a Windows path if temp env existed on a Windows machine."
            },
            {
              "seconds": 61,
              "text": "One of the nice things about this path instance"
            },
            {
              "seconds": 64,
              "text": "or these path classes that we can create"
            },
            {
              "seconds": 67,
              "text": "is that we can do various manipulations on them."
            },
            {
              "seconds": 70,
              "text": "So it has overloaded the slash operator to do concatenation."
            },
            {
              "seconds": 74,
              "text": "So if I want to make a file called missing inside of this env directory,"
            },
            {
              "seconds": 79,
              "text": "I can say m=env / missing and that concatenates missing on to the end"
            },
            {
              "seconds": 84,
              "text": "and it gives me back a posix path that has missing on the end."
            },
            {
              "seconds": 87,
              "text": "Note that / will work on Windows systems as well"
            },
            {
              "seconds": 90,
              "text": "and rather than giving back a posix path"
            },
            {
              "seconds": 92,
              "text": "if this temp env existed on my machine, it would give me back a Windows path."
            },
            {
              "seconds": 98,
              "text": "I can call .exist and that says does this path exist,"
            },
            {
              "seconds": 101,
              "text": "and it says false, missing doesn't exist."
            },
            {
              "seconds": 104,
              "text": "Also on my path, I can say open"
            },
            {
              "seconds": 108,
              "text": "and I can pass in if I want to write to it or whatnot."
            },
            {
              "seconds": 111,
              "text": "I can put that in context manager that will give me a file handle"
            },
            {
              "seconds": 113,
              "text": "and I can write to that file."
            },
            {
              "seconds": 115,
              "text": "I can do things like say parts and that will give me back a tuple"
            },
            {
              "seconds": 118,
              "text": "of the various parts of the path,"
            },
            {
              "seconds": 121,
              "text": "note that it puts this leading / in here for the root,"
            },
            {
              "seconds": 124,
              "text": "and we can say open again to read from it and read from it."
            },
            {
              "seconds": 128,
              "text": "And then if we want to delete from it, we can say unlink."
            },
            {
              "seconds": 131,
              "text": "The nice thing about these is these are cross-platform."
            },
            {
              "seconds": 134,
              "text": "These will work on Windows or posix systems,"
            },
            {
              "seconds": 137,
              "text": "so Linux or Mac or other Unix systems."
            },
            {
              "seconds": 141,
              "text": "Here are some more examples of some manipulation that we can do,"
            },
            {
              "seconds": 144,
              "text": "note that in here I'm saying m.parent,"
            },
            {
              "seconds": 146,
              "text": "that gives me the parent path of my directory"
            },
            {
              "seconds": 150,
              "text": "and then I'm concatenating on bin and concatenating on activate this.py,"
            },
            {
              "seconds": 154,
              "text": "and on that py path I can say what's the root there, and it says the root is that,"
            },
            {
              "seconds": 160,
              "text": "what's the drive there, and it says the drive is that,"
            },
            {
              "seconds": 162,
              "text": "what's the anchor, the anchor is this combination of root and drive,"
            },
            {
              "seconds": 166,
              "text": "so drive here, this is Windows specific,"
            },
            {
              "seconds": 169,
              "text": "and if you're dealing with the c drive or the d drive or whatnot,"
            },
            {
              "seconds": 173,
              "text": "that will pop up in there."
            },
            {
              "seconds": 176,
              "text": "The anchor here is the combination of root and drive."
            },
            {
              "seconds": 179,
              "text": "A couple of other things you can do"
            },
            {
              "seconds": 181,
              "text": "so I can say what's the parent path and the parent path of my py guy,"
            },
            {
              "seconds": 184,
              "text": "which is the activate file is tmp/env/bin."
            },
            {
              "seconds": 188,
              "text": "I can say what's my name and it will give me just the name of my file,"
            },
            {
              "seconds": 192,
              "text": "I can say what's my suffix, my suffix is .py,"
            },
            {
              "seconds": 195,
              "text": "I can give it this stem attribute, that's the file name without the suffix,"
            },
            {
              "seconds": 201,
              "text": "I can say is this an absolute path, it says true."
            },
            {
              "seconds": 204,
              "text": "I can do matching against it with simple globbing operators,"
            },
            {
              "seconds": 207,
              "text": "so does this match *.py, yes, it does match *.py."
            },
            {
              "seconds": 211,
              "text": "Pathlib makes a distinction between what it calls pure paths and concrete paths."
            },
            {
              "seconds": 215,
              "text": "We mostly deal with concrete paths."
            },
            {
              "seconds": 218,
              "text": "These are paths that have access to the file system,"
            },
            {
              "seconds": 220,
              "text": "but you can also make Windows or posix pure paths"
            },
            {
              "seconds": 223,
              "text": "on either operating system for manipulation."
            },
            {
              "seconds": 226,
              "text": "So if I'm on a server that's a Linux server,"
            },
            {
              "seconds": 230,
              "text": "but I need to manipulate Windows paths,"
            },
            {
              "seconds": 232,
              "text": "I can create a Windows path and manipulate it and get the drive and whatnot"
            },
            {
              "seconds": 237,
              "text": "and it will treat that as a Windows path and do the correct thing for me there."
            },
            {
              "seconds": 242,
              "text": "If we have concrete paths, we can do system calls on that."
            },
            {
              "seconds": 244,
              "text": "Here I'm on my py path, I can say cwd, what's the current working directory,"
            },
            {
              "seconds": 250,
              "text": "note that this is a method on this class,"
            },
            {
              "seconds": 252,
              "text": "but I can also call a class method on path"
            },
            {
              "seconds": 256,
              "text": "because current working directory isn't dependent on a path,"
            },
            {
              "seconds": 259,
              "text": "it's dependent on your current process or where you are,"
            },
            {
              "seconds": 263,
              "text": "in this case, I'm running this from the temp directory."
            },
            {
              "seconds": 265,
              "text": "I can ask what the home is on any path,"
            },
            {
              "seconds": 268,
              "text": "or I can call it directly on the class,"
            },
            {
              "seconds": 270,
              "text": "in this case, my home is users/matt."
            },
            {
              "seconds": 272,
              "text": "I can say give me the stat, this gives me the modification times of my file here."
            },
            {
              "seconds": 278,
              "text": "I can also do things like say expand user with the tilde"
            },
            {
              "seconds": 282,
              "text": "and that gives me where my home directory is,"
            },
            {
              "seconds": 286,
              "text": "we can do globbing operators here,"
            },
            {
              "seconds": 288,
              "text": "so I can say I want to get the home path and I want to glob onto that"
            },
            {
              "seconds": 293,
              "text": "anything that ends in py and I can get all the py files in my home directory."
            },
            {
              "seconds": 298,
              "text": "This is commented out because there's a lot of output here,"
            },
            {
              "seconds": 300,
              "text": "but I can also use a glob operator with **,"
            },
            {
              "seconds": 304,
              "text": "if you use a ** that does a recursive search."
            },
            {
              "seconds": 307,
              "text": "So this is going to search through everything in my home directory that's a Python file."
            },
            {
              "seconds": 310,
              "text": "So nice functionality there to allow you to do various operations on a path."
            },
            {
              "seconds": 315,
              "text": "So in this video we talked about paths,"
            },
            {
              "seconds": 318,
              "text": "this is a nice feature that's been added in Python 3."
            },
            {
              "seconds": 321,
              "text": "This has combined a lot of the functionality in the OS modul,"
            },
            {
              "seconds": 325,
              "text": "a lot of people have been using third-party path libraries,"
            },
            {
              "seconds": 328,
              "text": "and so this is a welcomed feature into Python 3."
            },
            {
              "seconds": 331,
              "text": "Hopefully you can make use of this if you're dealing with files and directories."
            }
          ]
        },
        {
          "lecture_id": 120804,
          "lecture_title": "Walk-through: pathlib",
          "vimeo_id": 7111741365320731,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at path test, open that up in your editor."
            },
            {
              "seconds": 3,
              "text": "Let's run it and make sure that our environment is configured."
            },
            {
              "seconds": 9,
              "text": "Okay, we have one error, we're not getting failure with importing pytest,"
            },
            {
              "seconds": 13,
              "text": "so we're good there and we have one test function."
            },
            {
              "seconds": 16,
              "text": "Let's go through this and figure out what's going on."
            },
            {
              "seconds": 19,
              "text": "The first part, get the contents of the current directory using the path module"
            },
            {
              "seconds": 23,
              "text": "store the results in cur, the variable called cur."
            },
            {
              "seconds": 27,
              "text": "So in Python 3, there is now a library called pathlib,"
            },
            {
              "seconds": 34,
              "text": "and we can say from pathlib import path"
            },
            {
              "seconds": 39,
              "text": "and let's get the current module, current equals path"
            },
            {
              "seconds": 45,
              "text": "and period should be the current guy."
            },
            {
              "seconds": 50,
              "text": "If you want the contents of that you say iterdir,"
            },
            {
              "seconds": 54,
              "text": "and that will give you what is in the directory."
            },
            {
              "seconds": 57,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 64,
              "text": "Okay, so we're only getting one failure which is fine"
            },
            {
              "seconds": 68,
              "text": "because we have one test and we're getting an error on line 16."
            },
            {
              "seconds": 72,
              "text": "So it looks like the first guy worked."
            },
            {
              "seconds": 75,
              "text": "So what iterdir does, given a path it gives you a sequence"
            },
            {
              "seconds": 78,
              "text": "that has all of the results in it or all of the files and directories that are in that."
            },
            {
              "seconds": 84,
              "text": "So our test is just saying is path test in the current directory,"
            },
            {
              "seconds": 89,
              "text": "and because we're in that directory, it is. Cool."
            },
            {
              "seconds": 92,
              "text": "Make a path with a file named test.txt, and store it in test file."
            },
            {
              "seconds": 99,
              "text": "So test file equals path, and we're going to say test.txt, that should work."
            },
            {
              "seconds": 108,
              "text": "I'll just run it and see if it works."
            },
            {
              "seconds": 111,
              "text": "Okay, we're now on line 23, so we're down here."
            },
            {
              "seconds": 114,
              "text": "Write hello world to test file,"
            },
            {
              "seconds": 117,
              "text": "we can use this path guy as we would a result of an open in the context manager"
            },
            {
              "seconds": 125,
              "text": "so I can say with test file and then I can call on that open"
            },
            {
              "seconds": 132,
              "text": "and I can pass in a mode,"
            },
            {
              "seconds": 135,
              "text": "so I'm going to pass in the mode write"
            },
            {
              "seconds": 137,
              "text": "and I'm going to say as f out: and I'll say f out.write, and we'll write hello world."
            },
            {
              "seconds": 144,
              "text": "At this point, after we've exited from this, test file should exist,"
            },
            {
              "seconds": 148,
              "text": "it should have a name and we should assert that hello world is in there."
            },
            {
              "seconds": 154,
              "text": "Let's run it and make sure it works."
            },
            {
              "seconds": 156,
              "text": "Okay, we're now down to line 32, so we're at this last part."
            },
            {
              "seconds": 161,
              "text": "Delete the test file."
            },
            {
              "seconds": 163,
              "text": "So we have test file, how do we delete it? There is no delete."
            },
            {
              "seconds": 166,
              "text": "Is there a remove? There is no remove."
            },
            {
              "seconds": 171,
              "text": "Is there an rm? There's an rm dir."
            },
            {
              "seconds": 173,
              "text": "So none of those are the way to delete a file,"
            },
            {
              "seconds": 176,
              "text": "the correct pronunciation of this is unlink."
            },
            {
              "seconds": 179,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 182,
              "text": "Cool, we're good."
            },
            {
              "seconds": 184,
              "text": "So hopefully, this gives you a brief chance to play around with path."
            },
            {
              "seconds": 188,
              "text": "You can get the contents of a directory by saying iterdir,"
            },
            {
              "seconds": 191,
              "text": "you can create a path, you can write to it by putting in a context manager"
            },
            {
              "seconds": 196,
              "text": "and calling the open method on it, rather than using the built-in open function"
            },
            {
              "seconds": 201,
              "text": "and you can delete it if you want to as well."
            }
          ]
        },
        {
          "lecture_id": 120805,
          "lecture_title": "Enum",
          "vimeo_id": 7111015363242406,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to talk about the enum library,"
            },
            {
              "seconds": 2,
              "text": "this came in Python 3.4 with Pep 435."
            },
            {
              "seconds": 5,
              "text": "In the pep we read, enumeration is a set of symbolic names"
            },
            {
              "seconds": 8,
              "text": "bound to unique constant values."
            },
            {
              "seconds": 10,
              "text": "Within an enumeration, the values can be compared by identity"
            },
            {
              "seconds": 14,
              "text": "and the numeration itself can be iterated over."
            },
            {
              "seconds": 17,
              "text": "If you're not familiar with enumerations in other languages,"
            },
            {
              "seconds": 19,
              "text": "they allow you to hard-code magic numbers and make use of those"
            },
            {
              "seconds": 23,
              "text": "and you could do that in Python prior by making globals"
            },
            {
              "seconds": 26,
              "text": "and making all capitalized variable name and setting equal to some value."
            },
            {
              "seconds": 31,
              "text": "There are a few features that enumerations have"
            },
            {
              "seconds": 33,
              "text": "that make them slightly better to use. Here's an example."
            },
            {
              "seconds": 36,
              "text": "I'm going to import the enum class from the enum module"
            },
            {
              "seconds": 40,
              "text": "and then I just define a class"
            },
            {
              "seconds": 42,
              "text": "in this case, I'm going to define a class called bike"
            },
            {
              "seconds": 44,
              "text": "and there are various types of bikes."
            },
            {
              "seconds": 46,
              "text": "So there might be a road bike or mountain biker or a cross bike or a trike."
            },
            {
              "seconds": 49,
              "text": "and maybe I'm going to be switching on these different bike types or whatnot."
            },
            {
              "seconds": 53,
              "text": "Inside of my class, as attributes I say road is equal to 1,"
            },
            {
              "seconds": 57,
              "text": "mountain is equal to 2, etc."
            },
            {
              "seconds": 59,
              "text": "And I can define numbers that give values for those."
            },
            {
              "seconds": 64,
              "text": "If you want to enumerate all the different possibilities of what are in a bike"
            },
            {
              "seconds": 68,
              "text": "you can loop over that and you can say"
            },
            {
              "seconds": 71,
              "text": "well there's road, mountain, cross and trike,"
            },
            {
              "seconds": 74,
              "text": "you can also do comparisons using the equality operator."
            },
            {
              "seconds": 77,
              "text": "So the last bike in the enumeration was trike,"
            },
            {
              "seconds": 80,
              "text": "and is that equal to a bike.trike, yes, that is the case."
            },
            {
              "seconds": 85,
              "text": "Trike is I believe number 4 here"
            },
            {
              "seconds": 87,
              "text": "so you could say is bike equal equal to 4."
            },
            {
              "seconds": 91,
              "text": "That's what we're trying to get around."
            },
            {
              "seconds": 93,
              "text": "We're trying to get around magic numbers"
            },
            {
              "seconds": 95,
              "text": "where you're using number that has a unique meaning for you,"
            },
            {
              "seconds": 98,
              "text": "but maybe to someone else who's reading it doesn't make sense."
            },
            {
              "seconds": 101,
              "text": "So bike.trike is very explicit and makes the code more readable."
            },
            {
              "seconds": 105,
              "text": "If we want to access these enumerations,"
            },
            {
              "seconds": 108,
              "text": "you can access them in different ways"
            },
            {
              "seconds": 110,
              "text": "so you can do the by attribute, so you can just say .mountain"
            },
            {
              "seconds": 113,
              "text": "you can also say bike 2, you can call it and pass in 2"
            },
            {
              "seconds": 117,
              "text": "and that will give you what the enumeration is."
            },
            {
              "seconds": 120,
              "text": "You can also do it by index name."
            },
            {
              "seconds": 123,
              "text": "So there's an index operation that says mountain"
            },
            {
              "seconds": 125,
              "text": "and that gives you back the enumeration."
            },
            {
              "seconds": 128,
              "text": "All these are the same."
            },
            {
              "seconds": 130,
              "text": "I prefer this first one I think it's the most readable."
            },
            {
              "seconds": 132,
              "text": "Identity comparisons also work with enumerations as well."
            },
            {
              "seconds": 135,
              "text": "So you can say bike.mountain is bike.mountain and that is true."
            },
            {
              "seconds": 139,
              "text": "So it's not going to make a new instance of those."
            },
            {
              "seconds": 141,
              "text": "There's an alternate construction that we can use to create enumerations here."
            },
            {
              "seconds": 145,
              "text": "This is similar to the named tuple construction."
            },
            {
              "seconds": 147,
              "text": "We're going to make a variable here called bike or bike2, camel case"
            },
            {
              "seconds": 152,
              "text": "because it's class like and then we're going to pass in the name of the class here."
            },
            {
              "seconds": 157,
              "text": "And then we're going to pass in the different enumerations in here."
            },
            {
              "seconds": 160,
              "text": "And in this case, we don't need to provide the numbers"
            },
            {
              "seconds": 163,
              "text": "we'll get default numbers for them,"
            },
            {
              "seconds": 165,
              "text": "so I can say bike2 what's the 2, the 2 was in this case mountain"
            },
            {
              "seconds": 170,
              "text": "and what is road and that was this one right here bike road,"
            },
            {
              "seconds": 175,
              "text": "which has a value of 1."
            },
            {
              "seconds": 177,
              "text": "This video discussed enumerations in Python."
            },
            {
              "seconds": 179,
              "text": "This is included in Python 3."
            },
            {
              "seconds": 181,
              "text": "This is just a little library that's meant to make your code more readable."
            },
            {
              "seconds": 185,
              "text": "If you're using hard coded numbers all over the place"
            },
            {
              "seconds": 188,
              "text": "consider using enumerations,"
            },
            {
              "seconds": 190,
              "text": "or if you have different categorical types that you're using"
            },
            {
              "seconds": 194,
              "text": "consider using enumerations to make your code more readable."
            }
          ]
        },
        {
          "lecture_id": 120806,
          "lecture_title": "Walk-through: Enum",
          "vimeo_id": 7111619870236966,
          "subtitles": [
            {
              "seconds": 0,
              "text": "We're going to look at the enum test file, open that up,"
            },
            {
              "seconds": 3,
              "text": "we'll see that at the top here we've got a red, green and blue variable defined"
            },
            {
              "seconds": 7,
              "text": "and we've got a function here that's testing that whatever is passed in"
            },
            {
              "seconds": 10,
              "text": "is equal to these variables."
            },
            {
              "seconds": 12,
              "text": "This is prime candidate to replace with enum."
            },
            {
              "seconds": 14,
              "text": "Let's look at what it says to do."
            },
            {
              "seconds": 17,
              "text": "Create an enumeration color that has red, green and blue"
            },
            {
              "seconds": 20,
              "text": "as the different members, use the class style by subclassing enum."
            },
            {
              "seconds": 23,
              "text": "And in parentheses, normally these are created at the global level."
            },
            {
              "seconds": 27,
              "text": "Let's import the enum class, that's in the standard library these days."
            },
            {
              "seconds": 32,
              "text": "I'm going to say from the enum module import capital Enum."
            },
            {
              "seconds": 39,
              "text": "And then we're going to make a class called color"
            },
            {
              "seconds": 41,
              "text": "and it's going to subclass enum."
            },
            {
              "seconds": 45,
              "text": "And I'm just going to give it a couple attributes"
            },
            {
              "seconds": 47,
              "text": "red is equal to 1, blue is equal to 2 and green is equal to 3."
            },
            {
              "seconds": 54,
              "text": "It's all we need to do, very similar to the variables."
            },
            {
              "seconds": 56,
              "text": "But we're just putting this in the namespace of a class here"
            },
            {
              "seconds": 59,
              "text": "and by subclassing enum we get some of the benefits of using that."
            },
            {
              "seconds": 62,
              "text": "Let's run this and see how the test work."
            },
            {
              "seconds": 69,
              "text": "Okay, so it looks like I passed that first part"
            },
            {
              "seconds": 71,
              "text": "and now it's asking me to do some refactoring."
            },
            {
              "seconds": 74,
              "text": "So let's go down and read the next part."
            },
            {
              "seconds": 77,
              "text": "Okay, refactor get_rgb to use the color enumeration."
            },
            {
              "seconds": 81,
              "text": "So right now get_rgb is not using color,"
            },
            {
              "seconds": 84,
              "text": "it's using this integer variables that we've defined a pair."
            },
            {
              "seconds": 89,
              "text": "So all we need to do is say color.red"
            },
            {
              "seconds": 92,
              "text": "and same thing here color.green and same thing here color.blue."
            },
            {
              "seconds": 108,
              "text": "And presumably whoever's calling get_rgb would pass in color.red or whatnot."
            },
            {
              "seconds": 113,
              "text": "Just run that and make sure that works."
            },
            {
              "seconds": 116,
              "text": "Okay, we are now good with that part."
            },
            {
              "seconds": 119,
              "text": "Let's go to the next part, create the numeration pet that has dog, cat and fish"
            },
            {
              "seconds": 123,
              "text": "as the different members, call the enum class to create it."
            },
            {
              "seconds": 127,
              "text": "So in this case, we're going to call enum rather than subclasses it,"
            },
            {
              "seconds": 131,
              "text": "it looks similar to the name tuple if you're familiar with that."
            },
            {
              "seconds": 135,
              "text": "So we would say pet is equal to enum."
            },
            {
              "seconds": 146,
              "text": "It says it has a dog, cat and fish."
            },
            {
              "seconds": 150,
              "text": "So the first parameter that we give to calling the enum class is"
            },
            {
              "seconds": 155,
              "text": "we give it the name of the class that we're making"
            },
            {
              "seconds": 157,
              "text": "or the name of the enumeration, very similar to name tuple"
            },
            {
              "seconds": 160,
              "text": "and then we're going to say dog, cat and fish like that."
            },
            {
              "seconds": 166,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 170,
              "text": "Okay, so these are two different ways of declaring an enumeration,"
            },
            {
              "seconds": 174,
              "text": "one is by subclassing enum, the other is by calling it, passing in the name"
            },
            {
              "seconds": 179,
              "text": "and passing in the comma separated list of those values."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12009,
      "chapter_title": "Asynchronous Programming",
      "lectures": [
        {
          "lecture_id": 120901,
          "lecture_title": "asyncio Definitions",
          "vimeo_id": 7111623654409731,
          "subtitles": [
            {
              "seconds": 0,
              "text": "We're going to look at asyncio, specifically pep 526"
            },
            {
              "seconds": 4,
              "text": "and the tooling that came in Python 3.6."
            },
            {
              "seconds": 8,
              "text": "Asyncio came about during Python 3.4 time frame"
            },
            {
              "seconds": 12,
              "text": "and Python 3.6 added some new syntax to make it nicer to use."
            },
            {
              "seconds": 15,
              "text": "Let's talk about some terms first to get these straight"
            },
            {
              "seconds": 19,
              "text": "what is concurrency, concurrency means that we're sharing resources."
            },
            {
              "seconds": 23,
              "text": "One way to visualize this is a juggler who has multiple balls."
            },
            {
              "seconds": 28,
              "text": "Each of those balls is a resource and he's juggling them."
            },
            {
              "seconds": 30,
              "text": "Similarly, a CPU on a computer juggles multiple resources."
            },
            {
              "seconds": 35,
              "text": "It can run multiple things,"
            },
            {
              "seconds": 38,
              "text": "a single CPU cannot run multiple things at the same time,"
            },
            {
              "seconds": 40,
              "text": "but what it's doing is it's shifting between those very quickly."
            },
            {
              "seconds": 43,
              "text": "Parallelism, which some people confuse for concurrency, but it's different,"
            },
            {
              "seconds": 47,
              "text": "parallelism means doing multiple things at the same time."
            },
            {
              "seconds": 50,
              "text": "So if I have some parallel code,"
            },
            {
              "seconds": 52,
              "text": "it can run something faster than doing something at once."
            },
            {
              "seconds": 57,
              "text": "So an example here would be a CPU that has multiple cores."
            },
            {
              "seconds": 63,
              "text": "It can run code twice as fast as that code is run to take advantage of both CPUs."
            },
            {
              "seconds": 68,
              "text": "If we're going back to our juggler example,"
            },
            {
              "seconds": 71,
              "text": "this would be multiple jugglers juggling multiple balls,"
            },
            {
              "seconds": 74,
              "text": "presumably multiple jugglers who are juggling can juggle more balls"
            },
            {
              "seconds": 78,
              "text": "than just one juggler, if they don't have to coordinate among themselves per se."
            },
            {
              "seconds": 82,
              "text": "A couple of other things to be aware of,"
            },
            {
              "seconds": 84,
              "text": "one is a thread, a thread is a operating system construct for doing something,"
            },
            {
              "seconds": 89,
              "text": "a thread runs on a CPU, if you have multiple CPUs"
            },
            {
              "seconds": 93,
              "text": "and your code can run in multiple threads,"
            },
            {
              "seconds": 96,
              "text": "it's possible that each of those threads could take advantage"
            },
            {
              "seconds": 99,
              "text": "of a single CPU and make it run faster."
            },
            {
              "seconds": 102,
              "text": "Now, this isn't the case in Python,"
            },
            {
              "seconds": 104,
              "text": "Python has what's called the gil or global interpreter lock"
            },
            {
              "seconds": 107,
              "text": "which limits multi-threaded code in Python to only run on one CPU"
            },
            {
              "seconds": 111,
              "text": "regardless of how many CPUs are on the system."
            },
            {
              "seconds": 114,
              "text": "Another thing to be aware of is what's called a green thread,"
            },
            {
              "seconds": 117,
              "text": "green threads are VM level threads,"
            },
            {
              "seconds": 120,
              "text": "so they're not done at the operating system level"
            },
            {
              "seconds": 122,
              "text": "but they're done at a programming or user level"
            },
            {
              "seconds": 125,
              "text": "and these are a little bit lighter weight, but they don't scale across CPUs."
            },
            {
              "seconds": 129,
              "text": "And we'll see how asyncio basically allows you"
            },
            {
              "seconds": 133,
              "text": "to use green threads or run different contexts across a CPU inside of a VM,"
            },
            {
              "seconds": 141,
              "text": "but doesn't necessarily allow you to take advantage of multiple CPUs."
            },
            {
              "seconds": 145,
              "text": "A couple other terms we'll talk about here,"
            },
            {
              "seconds": 148,
              "text": "synchronous, synchronous means if I'm going to run something,"
            },
            {
              "seconds": 151,
              "text": "if I'm synchronous I wait till the execution is done before I run something else."
            },
            {
              "seconds": 155,
              "text": "And asynchronous code is where I kick off execution"
            },
            {
              "seconds": 157,
              "text": "and maybe I have a callback or some way to figure out when it's done"
            },
            {
              "seconds": 161,
              "text": "and after I kicked off execution, I'm going to move on to some other code"
            },
            {
              "seconds": 166,
              "text": "until I get this call back or mechanism that tells me that it's done."
            },
            {
              "seconds": 169,
              "text": "That's asynchronous code."
            }
          ]
        },
        {
          "lecture_id": 120902,
          "lecture_title": "Concurrency Example",
          "vimeo_id": 7111623147005186,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Here's an example of concurrency."
            },
            {
              "seconds": 2,
              "text": "Here I've got Python running over here"
            },
            {
              "seconds": 4,
              "text": "and Python is going to paint three pictures."
            },
            {
              "seconds": 7,
              "text": "And so I'm going to just do some work"
            },
            {
              "seconds": 10,
              "text": "and after I've done a little bit work on one picture,"
            },
            {
              "seconds": 13,
              "text": "I'm going to do some work on another one"
            },
            {
              "seconds": 15,
              "text": "and then I'll do some work on another one"
            },
            {
              "seconds": 17,
              "text": "and I'll keep doing that shifting between them"
            },
            {
              "seconds": 20,
              "text": "until I'm finally done at some point."
            },
            {
              "seconds": 22,
              "text": "This is concurrency, I'm juggling multiple paintings"
            },
            {
              "seconds": 25,
              "text": "with a single CPU or a single Python process."
            }
          ]
        },
        {
          "lecture_id": 120903,
          "lecture_title": "Python's GIL",
          "vimeo_id": 7111745260105095,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Python has what's called gil, and gil has a couple bonuses"
            },
            {
              "seconds": 3,
              "text": "or things that it gives you, it gives you simplified garbage collection."
            },
            {
              "seconds": 7,
              "text": "It also allows you to avoid none thread safe code with other threads,"
            },
            {
              "seconds": 11,
              "text": "but it has some drawbacks, one is that you can only run"
            },
            {
              "seconds": 14,
              "text": "one native thread at a time on Python."
            },
            {
              "seconds": 17,
              "text": "So even if you have multiple CPUs on your computer,"
            },
            {
              "seconds": 19,
              "text": "you're only going to be able to take advantage of one of them"
            },
            {
              "seconds": 22,
              "text": "using threading in Python, if you use a library called multiprocessing"
            },
            {
              "seconds": 26,
              "text": "that gets around it by launching multiple processes, Python processes"
            },
            {
              "seconds": 30,
              "text": "and each one of those processes can use the CPU."
            },
            {
              "seconds": 33,
              "text": "There's a little bit more overhead to that"
            },
            {
              "seconds": 35,
              "text": "because it's got to pass around the information, it can't share it as easily."
            },
            {
              "seconds": 39,
              "text": "Another minus of the gil is that if you have cpu-bound code"
            },
            {
              "seconds": 42,
              "text": "it's going to be a little bit slower and this sort of relates to the other one"
            },
            {
              "seconds": 46,
              "text": "that we can't parallelize them easily from Python."
            }
          ]
        },
        {
          "lecture_id": 120904,
          "lecture_title": "Parallelism and Asynchrony Compared",
          "vimeo_id": 7111745726648458,
          "subtitles": [
            {
              "seconds": 0,
              "text": "So here's an example of parallelism."
            },
            {
              "seconds": 2,
              "text": "We talked about concurrency here, we have three Python processes"
            },
            {
              "seconds": 5,
              "text": "and each of them is going to create their own painting."
            },
            {
              "seconds": 8,
              "text": "And so the first one can do a little bit of work and do a little more work"
            },
            {
              "seconds": 11,
              "text": "and if I had multiple cores, if I had at least three cores"
            },
            {
              "seconds": 15,
              "text": "while that one was running this other process could be doing his work"
            },
            {
              "seconds": 18,
              "text": "and another process could be doing its work,"
            },
            {
              "seconds": 20,
              "text": "and so we can see that this takes about a third as much time"
            },
            {
              "seconds": 24,
              "text": "as our prior concurrent version, if we are able to do this in a parallel manner."
            },
            {
              "seconds": 29,
              "text": "Now, let's go back to our concurrent way when we have one Python process"
            },
            {
              "seconds": 33,
              "text": "and let's think about maybe painting a little bit more"
            },
            {
              "seconds": 37,
              "text": "if you've painted a little bit, you might know"
            },
            {
              "seconds": 39,
              "text": "that when you're painting you put some paint on the canvas"
            },
            {
              "seconds": 42,
              "text": "or if you're water coloring you get the paper wet and then you paint on it"
            },
            {
              "seconds": 47,
              "text": "and then typically you have some period after you've painted where you let it dry."
            },
            {
              "seconds": 51,
              "text": "And so we're going to just put on some grey blocks here"
            },
            {
              "seconds": 54,
              "text": "and this grey block indicates that the paint is drying,"
            },
            {
              "seconds": 56,
              "text": "now, if you are painting three paintings,"
            },
            {
              "seconds": 60,
              "text": "it could be the case that you paint and then dry and wait for that drying"
            },
            {
              "seconds": 64,
              "text": "and then start working on the next one."
            },
            {
              "seconds": 67,
              "text": "And this would be a synchronous manner of doing that"
            },
            {
              "seconds": 69,
              "text": "but you'll note that all this drying time here with the gray drying time,"
            },
            {
              "seconds": 73,
              "text": "you're not really painting, you're just waiting for it to dry."
            },
            {
              "seconds": 75,
              "text": "So that could be wasted time."
            },
            {
              "seconds": 77,
              "text": "If we move this to an asynchronous model and the asynchronous model says"
            },
            {
              "seconds": 81,
              "text": "if I'm going to be waiting on something"
            },
            {
              "seconds": 84,
              "text": "and I know that at some point it will be done,"
            },
            {
              "seconds": 86,
              "text": "as soon as I need to start waiting, like I start painting and then I start waiting here,"
            },
            {
              "seconds": 91,
              "text": "I'm going to say go ahead and wait, but I'm not going to wait till you're done drying,"
            },
            {
              "seconds": 96,
              "text": "I'm just going to go off and I'm going to start painting on my next guy"
            },
            {
              "seconds": 99,
              "text": "until he needs to dry, and then I'm going to start painting on my next guy"
            },
            {
              "seconds": 103,
              "text": "and I'm going to repeat that."
            },
            {
              "seconds": 105,
              "text": "And that way I can take advantage of this drying time or whatnot."
            },
            {
              "seconds": 110,
              "text": "This grey indicates drying time."
            },
            {
              "seconds": 113,
              "text": "This is similar to code in the real world."
            },
            {
              "seconds": 115,
              "text": "There is some code where you do some CPU heavy work,"
            },
            {
              "seconds": 118,
              "text": "but then you have some work that's what we call IO bound"
            },
            {
              "seconds": 121,
              "text": "where it's going over the network or it's going over the file system"
            },
            {
              "seconds": 125,
              "text": "and Python is not really doing anything, but it's waiting for data to come back."
            },
            {
              "seconds": 129,
              "text": "So this is what we call IO bound"
            },
            {
              "seconds": 132,
              "text": "and if you have something that's IO bound and you have lots of IO bound stuff,"
            },
            {
              "seconds": 137,
              "text": "then you can take advantage of this asynchronous way of programming"
            },
            {
              "seconds": 141,
              "text": "to not worry about IO bound stuff and move on to other stuff."
            }
          ]
        },
        {
          "lecture_id": 120905,
          "lecture_title": "Painting Code Example",
          "vimeo_id": 7111000144093885,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Here's some example code for painting."
            },
            {
              "seconds": 3,
              "text": "I've got a canvas here and I've got a paint method"
            },
            {
              "seconds": 5,
              "text": "and this is our CPU work here."
            },
            {
              "seconds": 8,
              "text": "We're just going to say loop over some number here"
            },
            {
              "seconds": 12,
              "text": "and do a mod operation and check that at zero"
            },
            {
              "seconds": 15,
              "text": "and then when you're done with your painting or your CPU work"
            },
            {
              "seconds": 19,
              "text": "you're going to make a little instance attribute called start"
            },
            {
              "seconds": 22,
              "text": "and you're going to say I'm going to be done and dry them out after start."
            },
            {
              "seconds": 27,
              "text": "So we're going to say two seconds after that we're going to let it dry."
            },
            {
              "seconds": 30,
              "text": "And then we have another method down below called is dry"
            },
            {
              "seconds": 34,
              "text": "that just says if the current time is greater than the end, then yeah, we're done."
            },
            {
              "seconds": 37,
              "text": "Otherwise, we're not done,"
            },
            {
              "seconds": 39,
              "text": "and I'm going to write a little decorator here,"
            },
            {
              "seconds": 41,
              "text": "this decorator will wrap a function and just tell how long it takes."
            },
            {
              "seconds": 45,
              "text": "So I'm not going to really talk about how decorators work per se"
            },
            {
              "seconds": 48,
              "text": "but just know that it returns a new function called inner"
            },
            {
              "seconds": 53,
              "text": "that's going to call the original function,"
            },
            {
              "seconds": 55,
              "text": "but it's going to start a timer before it and it's going to print"
            },
            {
              "seconds": 58,
              "text": "how long it took inside of there,"
            },
            {
              "seconds": 60,
              "text": "just for kick so we can have some timing information."
            },
            {
              "seconds": 64,
              "text": "Okay, so on my machine, I've got some code here that I'm going to call"
            },
            {
              "seconds": 68,
              "text": "and I'm going to call paint, a paint function,"
            },
            {
              "seconds": 71,
              "text": "it's going to create a canvas and then it's going to call paint"
            },
            {
              "seconds": 74,
              "text": "which is the CPU heavy part."
            },
            {
              "seconds": 76,
              "text": "And then it's going to do this little loop here"
            },
            {
              "seconds": 79,
              "text": "where it's going to wait if it's dry"
            },
            {
              "seconds": 81,
              "text": "and it's going to say if it's not dry sleep for a half second."
            },
            {
              "seconds": 84,
              "text": "So we could say that this is the IO portion"
            },
            {
              "seconds": 87,
              "text": "it's waiting for something to happen, but it's not really doing any work."
            },
            {
              "seconds": 91,
              "text": "And if I run this, and I say I want to do three paintings"
            },
            {
              "seconds": 94,
              "text": "one naive way to do it is just say run paint and do paint"
            },
            {
              "seconds": 97,
              "text": "and then paint and then do paint,"
            },
            {
              "seconds": 100,
              "text": "that will make three paintings or three canvases."
            },
            {
              "seconds": 102,
              "text": "If I do this in a sequential manner like this,"
            },
            {
              "seconds": 104,
              "text": "it says that it takes 6.03 seconds to do that."
            },
            {
              "seconds": 108,
              "text": "So a little bit of overhead for the CPU heavy stuff"
            },
            {
              "seconds": 111,
              "text": "and then some drying time that we've added in there."
            },
            {
              "seconds": 114,
              "text": "We can switch this to an asynchronous manner by using this asyncio library."
            },
            {
              "seconds": 118,
              "text": "So in order to use this I'm going to change my function"
            },
            {
              "seconds": 121,
              "text": "I'm going to put an async in front of it"
            },
            {
              "seconds": 123,
              "text": "and the rest of my code looks very similar, I've still got my while loop"
            },
            {
              "seconds": 126,
              "text": "but here I'm going to put an await statement here"
            },
            {
              "seconds": 130,
              "text": "and I'm going to say await asyncio sleep a half-second"
            },
            {
              "seconds": 134,
              "text": "rather than time.sleep .5 seconds"
            },
            {
              "seconds": 137,
              "text": "and this is what's called a coroutine."
            },
            {
              "seconds": 139,
              "text": "This is an asynchronous coroutine,"
            },
            {
              "seconds": 142,
              "text": "and it gives us the ability to run code that is interruptible"
            },
            {
              "seconds": 146,
              "text": "that has portions where you wait for something else to happen"
            },
            {
              "seconds": 149,
              "text": "or you can hand off control for something else to happen."
            },
            {
              "seconds": 152,
              "text": "So I've got a little function that's going to run this."
            },
            {
              "seconds": 155,
              "text": "What we're going to do is we're going to make a loop here."
            },
            {
              "seconds": 158,
              "text": "We're going to get what we call an event loop and then in this event loop,"
            },
            {
              "seconds": 162,
              "text": "we're going to call a function called gather."
            },
            {
              "seconds": 166,
              "text": "This is an asyncio, we're going to gather three instances of this async paint."
            },
            {
              "seconds": 171,
              "text": "We're going to get three co-routines"
            },
            {
              "seconds": 173,
              "text": "and it's going to return what's called a future here."
            },
            {
              "seconds": 175,
              "text": "And this future is something that it can run and interrupt"
            },
            {
              "seconds": 178,
              "text": "and get some result back at some point in the future when it's done."
            },
            {
              "seconds": 182,
              "text": "And then in our loop we just say run until complete future"
            },
            {
              "seconds": 186,
              "text": "and this will run this code, but interestingly enough,"
            },
            {
              "seconds": 189,
              "text": "when we run this code on my machine this takes two seconds,"
            },
            {
              "seconds": 192,
              "text": "even though it does three paintings."
            },
            {
              "seconds": 194,
              "text": "So what it's doing here is it's going to say"
            },
            {
              "seconds": 196,
              "text": "I'm going to start painting my first guy"
            },
            {
              "seconds": 198,
              "text": "and then I'm going to check if he's dry,"
            },
            {
              "seconds": 201,
              "text": "if he's not, I'm going to call this await asyncio sleep"
            },
            {
              "seconds": 204,
              "text": "and when you call await here, that gives it the ability"
            },
            {
              "seconds": 207,
              "text": "to go off to another coroutine"
            },
            {
              "seconds": 210,
              "text": "and so it starts going on the other work, and then the other work starts a canvas"
            },
            {
              "seconds": 214,
              "text": "and then it jumps into that await, and then says okay I can do other work"
            },
            {
              "seconds": 218,
              "text": "and so it goes into the third one, and then all of them get painted"
            },
            {
              "seconds": 222,
              "text": "and then they just go into this while loop"
            },
            {
              "seconds": 225,
              "text": "where it's going to keep calling await every half second"
            },
            {
              "seconds": 227,
              "text": "and it's going to see if they're done,"
            },
            {
              "seconds": 229,
              "text": "and if they are done that's great, it will take them off"
            },
            {
              "seconds": 231,
              "text": "if they're not it's going to say, okay, I'm going to go and check the next one"
            },
            {
              "seconds": 234,
              "text": "and so it sort of repeats doing that and it can do that at the same time."
            },
            {
              "seconds": 237,
              "text": "So this is an example of asynchronous code,"
            },
            {
              "seconds": 240,
              "text": "the cool thing about this is that it's not written with callbacks."
            },
            {
              "seconds": 243,
              "text": "And so if you sort of squint at it and if you got rid of async"
            },
            {
              "seconds": 247,
              "text": "and you got rid of a wait there,"
            },
            {
              "seconds": 249,
              "text": "it really looks very similar to our prior code"
            },
            {
              "seconds": 252,
              "text": "where we're just saying get a canvas painted and while it's not dry sleep."
            },
            {
              "seconds": 256,
              "text": "So that's the benefit of this asynchronous code,"
            },
            {
              "seconds": 258,
              "text": "note that we do have to have an event loop"
            },
            {
              "seconds": 261,
              "text": "and there's some overhead and construction of that in order to run it"
            },
            {
              "seconds": 264,
              "text": "you have to schedule these coroutines in order to run them."
            }
          ]
        },
        {
          "lecture_id": 120906,
          "lecture_title": "asyncio Building Blocks",
          "vimeo_id": 7111303063333264,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Let's look at some of the basics that are required to do this,"
            },
            {
              "seconds": 2,
              "text": "again, you need an event loop, this manages your work."
            },
            {
              "seconds": 4,
              "text": "You need some co-routines."
            },
            {
              "seconds": 6,
              "text": "You need to have functions that are suspendable,"
            },
            {
              "seconds": 8,
              "text": "they have to have an await in there"
            },
            {
              "seconds": 10,
              "text": "so that they can hand off the work to someone else,"
            },
            {
              "seconds": 12,
              "text": "they can't just be CPU heavy functions"
            },
            {
              "seconds": 14,
              "text": "or they'll never hand off to someone else"
            },
            {
              "seconds": 16,
              "text": "and you'll basically be getting the same throughput that you would be getting"
            },
            {
              "seconds": 20,
              "text": "by doing this in a synchronous manner."
            },
            {
              "seconds": 22,
              "text": "A couple of other things,"
            },
            {
              "seconds": 24,
              "text": "there's what's called a future and a future is something"
            },
            {
              "seconds": 26,
              "text": "that may have a result in the future."
            },
            {
              "seconds": 28,
              "text": "There's what's called a task, and a task is a subclass of a future"
            },
            {
              "seconds": 31,
              "text": "that allows you to take a coroutine"
            },
            {
              "seconds": 33,
              "text": "and basically make it implement this future interface that Python uses."
            },
            {
              "seconds": 38,
              "text": "There's also what we call context switch"
            },
            {
              "seconds": 40,
              "text": "and basically context switch is when we call this await,"
            },
            {
              "seconds": 43,
              "text": "under the covers this loop is going to switch"
            },
            {
              "seconds": 45,
              "text": "from one of these co-routines to another one"
            },
            {
              "seconds": 47,
              "text": "and you can think of this, remember we talked about threading"
            },
            {
              "seconds": 51,
              "text": "and that you can use native threads,"
            },
            {
              "seconds": 53,
              "text": "we can think of this context switch"
            },
            {
              "seconds": 55,
              "text": "that rather than going from one thread to another"
            },
            {
              "seconds": 57,
              "text": "we're going from a green thread to another green thread"
            },
            {
              "seconds": 59,
              "text": "a basic thread that's implemented inside of the virtual machine."
            },
            {
              "seconds": 63,
              "text": "That's a context switch, and this event loop manages that for us."
            },
            {
              "seconds": 68,
              "text": "We talked a little bit about blocking and non-blocking."
            },
            {
              "seconds": 70,
              "text": "So blocking is you wait until your work is done before proceeding"
            },
            {
              "seconds": 74,
              "text": "we talked about that with our painting,"
            },
            {
              "seconds": 76,
              "text": "you waited until your paint was completely dry before proceeding"
            },
            {
              "seconds": 79,
              "text": "and non-blocking, we hand off control while running,"
            },
            {
              "seconds": 83,
              "text": "so if we're doing a non-blocking painting, we paint"
            },
            {
              "seconds": 85,
              "text": "and then if it needs to dry we go and paint something else,"
            },
            {
              "seconds": 88,
              "text": "until that needs to dry and then we go pay something else"
            },
            {
              "seconds": 91,
              "text": "and we repeat that process."
            }
          ]
        },
        {
          "lecture_id": 120907,
          "lecture_title": "asyncio When and Why",
          "vimeo_id": 7111831264197432,
          "subtitles": [
            {
              "seconds": 0,
              "text": "So Python provides in 3.6 these new keywords, async and await,"
            },
            {
              "seconds": 5,
              "text": "and if you put async in front of a def that makes it a coroutine"
            },
            {
              "seconds": 10,
              "text": "that you can use in this asyncio framework,"
            },
            {
              "seconds": 13,
              "text": "and when you want to hand off control of something else you call await."
            },
            {
              "seconds": 17,
              "text": "So the benefit of this asyncio library is that"
            },
            {
              "seconds": 21,
              "text": "it allows you to write asynchronous code in a sequential style."
            },
            {
              "seconds": 24,
              "text": "Remember I had that slide where I said"
            },
            {
              "seconds": 26,
              "text": "if you get rid of the async and the await, it looks sequential."
            },
            {
              "seconds": 29,
              "text": "There's other asynchronous libraries in Python"
            },
            {
              "seconds": 31,
              "text": "and many of them allow you to write asynchronous code"
            },
            {
              "seconds": 34,
              "text": "but do so with callbacks and if you're familiar with callbacks that can get a little confusing,"
            },
            {
              "seconds": 39,
              "text": "and Guido van Rossum, the creator of Python"
            },
            {
              "seconds": 41,
              "text": "who actually worked on asyncio for a long time, is not a big fan of callbacks,"
            },
            {
              "seconds": 46,
              "text": "and so he didn't really want to introduce callbacks into the standard library,"
            },
            {
              "seconds": 50,
              "text": "but he wanted something that allowed us to take advantage"
            },
            {
              "seconds": 53,
              "text": "of asynchronous programming, but make it look as normal"
            },
            {
              "seconds": 57,
              "text": "and someone who is used to Python programming"
            },
            {
              "seconds": 61,
              "text": "can look at it and should be able"
            },
            {
              "seconds": 63,
              "text": "to wrap their head around what's going on there."
            },
            {
              "seconds": 66,
              "text": "Why or when would you want to take advantage of this?"
            },
            {
              "seconds": 68,
              "text": "Again, if you have lots of io,"
            },
            {
              "seconds": 71,
              "text": "these asynchronous programs scale better than threads or processes."
            },
            {
              "seconds": 77,
              "text": "There is overhead to creating a thread in Python,"
            },
            {
              "seconds": 80,
              "text": "Python threads are native threads, they are operating system threads"
            },
            {
              "seconds": 84,
              "text": "and there is overhead the order of megabytes per thread."
            },
            {
              "seconds": 87,
              "text": "And so if you've got thousands of requests coming in to a web server or whatnot,"
            },
            {
              "seconds": 92,
              "text": "you've got each of those as a thread,"
            },
            {
              "seconds": 95,
              "text": "each of those is going to have some overhead to it"
            },
            {
              "seconds": 98,
              "text": "and a process has even more overhead than a thread does."
            },
            {
              "seconds": 102,
              "text": "But if you have stuff that has a lot of io latency such as a server or whatnot,"
            },
            {
              "seconds": 107,
              "text": "then you can use these native threads or this asynchronous style programming"
            },
            {
              "seconds": 111,
              "text": "to scale better, but one thing to be aware of is that your whole stack"
            },
            {
              "seconds": 116,
              "text": "basically needs to be asyncio aware."
            },
            {
              "seconds": 118,
              "text": "Once you put code in there that blocks or just takes up the CPU"
            },
            {
              "seconds": 122,
              "text": "and doesn't allow anything else to run"
            },
            {
              "seconds": 125,
              "text": "you're going to have throughput that's going to suffer"
            },
            {
              "seconds": 127,
              "text": "because it's not going to allow other code to run."
            },
            {
              "seconds": 130,
              "text": "So you really need to have code that has awaits in it"
            },
            {
              "seconds": 134,
              "text": "and allows other code to run."
            },
            {
              "seconds": 137,
              "text": "So some of the components that you all need,"
            },
            {
              "seconds": 139,
              "text": "we need a function that will suspend and resume these co-routines."
            },
            {
              "seconds": 141,
              "text": "We need an event loop that keeps track of the functions and their states"
            },
            {
              "seconds": 144,
              "text": "and we'll run them and manage them."
            },
            {
              "seconds": 146,
              "text": "If we have long-running CPU tasks, these need to call await."
            },
            {
              "seconds": 151,
              "text": "So the other code can run or else we need to use"
            },
            {
              "seconds": 154,
              "text": "what's called an executor to run those in their own thread"
            },
            {
              "seconds": 157,
              "text": "so that they don't interrupt or basically block"
            },
            {
              "seconds": 161,
              "text": "the asynchronous code from running."
            }
          ]
        },
        {
          "lecture_id": 120908,
          "lecture_title": "Cooperative Multitasking From the Ground Up",
          "vimeo_id": 7111399391596822,
          "subtitles": [
            {
              "seconds": 0,
              "text": "I'm going to go through some code here"
            },
            {
              "seconds": 2,
              "text": "just to give you some insight into how you could make your own asynchronous library"
            },
            {
              "seconds": 8,
              "text": "and I didn't come up with this, this was from a presentation I saw"
            },
            {
              "seconds": 11,
              "text": "from Robert Smallshire, and so I'll credit him on this, this isn't his code,"
            },
            {
              "seconds": 16,
              "text": "but this is adapted code from him,"
            },
            {
              "seconds": 18,
              "text": "but I really like the approach here to give you some insight"
            },
            {
              "seconds": 21,
              "text": "into developing an asynchronous framework."
            },
            {
              "seconds": 24,
              "text": "Here, I've got a function called map,"
            },
            {
              "seconds": 26,
              "text": "and if you're familiar with functional programming,"
            },
            {
              "seconds": 28,
              "text": "map takes a function and a sequence"
            },
            {
              "seconds": 30,
              "text": "and it applies that function to every item in the sequence."
            },
            {
              "seconds": 32,
              "text": "So this should be pretty straightforward."
            },
            {
              "seconds": 34,
              "text": "We're creating a result list here"
            },
            {
              "seconds": 36,
              "text": "and we're just looping over our sequence and we're appending into that."
            },
            {
              "seconds": 40,
              "text": "We could use a list comprehension or whatnot for this, but bare with me for a minute,"
            },
            {
              "seconds": 43,
              "text": "if we wanted to make this asynchronous, then we've got to change it a little bit"
            },
            {
              "seconds": 47,
              "text": "it's got to yield, it's got to give something else the chance to run"
            },
            {
              "seconds": 51,
              "text": "and so I'm going to put a yield in here"
            },
            {
              "seconds": 53,
              "text": "and I'm going to change it to say async map here."
            },
            {
              "seconds": 56,
              "text": "So this looks very similar, I just put a yield in there and it says"
            },
            {
              "seconds": 58,
              "text": "after I do some work, yield give something else the ability to run."
            },
            {
              "seconds": 62,
              "text": "So if you're familiar with generators,"
            },
            {
              "seconds": 64,
              "text": "you'll know that generators in Python allow you to call them"
            },
            {
              "seconds": 67,
              "text": "and once you call them and they get to this yield point"
            },
            {
              "seconds": 70,
              "text": "they freeze their state and then when you call next on them,"
            },
            {
              "seconds": 73,
              "text": "when you're looping over a generator,"
            },
            {
              "seconds": 75,
              "text": "you can resume the state exactly where it left off."
            },
            {
              "seconds": 79,
              "text": "So we're going to change this function into a generator"
            },
            {
              "seconds": 82,
              "text": "so that we can loop over it and we can call next on it."
            },
            {
              "seconds": 85,
              "text": "So here's an example of doing that here."
            },
            {
              "seconds": 87,
              "text": "Our function is a generator and we're going to make an instance of this generator,"
            },
            {
              "seconds": 91,
              "text": "we're going to pass in a lambda in there that just adds to something"
            },
            {
              "seconds": 94,
              "text": "and we're going to pass in range of 3 so 0 up not including 3"
            },
            {
              "seconds": 98,
              "text": "and if you're familiar with the iteration protocol, how for loops work under the covers,"
            },
            {
              "seconds": 103,
              "text": "basically you get an iterator and then you call next on that iterator."
            },
            {
              "seconds": 106,
              "text": "Well generator in Python is an iterator and so you can call next on a generator."
            },
            {
              "seconds": 111,
              "text": "So I'm going to call next on it and that's going to say"
            },
            {
              "seconds": 114,
              "text": "okay, I'm going to apply lambda to the first guy in range."
            },
            {
              "seconds": 119,
              "text": "The first guy in range is zero the lambda adds 2 to zero,"
            },
            {
              "seconds": 123,
              "text": "and at that point it's going to append that and it's going to yield"
            },
            {
              "seconds": 126,
              "text": "and so it yielded, it appended into our result that guy, the 2"
            },
            {
              "seconds": 131,
              "text": "and then we're going to call next again"
            },
            {
              "seconds": 133,
              "text": "and it will put three in that result"
            },
            {
              "seconds": 136,
              "text": "and note that it's giving me back my interpreter here."
            },
            {
              "seconds": 139,
              "text": "I have my interpreter back, I'm doing this from the console here"
            },
            {
              "seconds": 142,
              "text": "and maybe I do some other work, I can say 5+7. Well, that's 12,"
            },
            {
              "seconds": 146,
              "text": "and now I want to go back and I want to do this again."
            },
            {
              "seconds": 149,
              "text": "So I call next again and it does some more work"
            },
            {
              "seconds": 152,
              "text": "and it's going to stick 4 on the end, the iteration protocol when I call next again, I'm done,"
            },
            {
              "seconds": 156,
              "text": "It's going to give me a stop iteration"
            },
            {
              "seconds": 157,
              "text": "but note that since I returned the result list that comes in my exception here."
            },
            {
              "seconds": 163,
              "text": "So the stop iteration also has my result at the end of it."
            },
            {
              "seconds": 167,
              "text": "So that's pretty cool, so I can take that concept here and make a function from it now."
            },
            {
              "seconds": 172,
              "text": "So I'm going to make a function called runner that takes a generator"
            },
            {
              "seconds": 175,
              "text": "and it's just going to go into a while loop and it's going to call next repeatedly"
            },
            {
              "seconds": 178,
              "text": "until I get a stop iteration and when I get to stop iteration exception,"
            },
            {
              "seconds": 182,
              "text": "I'm going to say well pull off the value guy"
            },
            {
              "seconds": 184,
              "text": "because that's going to be whatever the generator returned."
            },
            {
              "seconds": 187,
              "text": "And we can run that here and we can see that"
            },
            {
              "seconds": 189,
              "text": "when I pass in the same code here that I had previously"
            },
            {
              "seconds": 192,
              "text": "I pass it into my runner function, I get that result out of it."
            },
            {
              "seconds": 196,
              "text": "Pretty cool, but what this is allowing me to do is"
            },
            {
              "seconds": 198,
              "text": "right after this next here, I could work on something else"
            },
            {
              "seconds": 202,
              "text": "or have multiple generators that I'm working on at the same time."
            },
            {
              "seconds": 206,
              "text": "So in order to do that, we're going to make a class called a task"
            },
            {
              "seconds": 210,
              "text": "a task will wrap a generator, we're just going to pass a generator into it and it will have an ID."
            },
            {
              "seconds": 215,
              "text": "So we're going to just take an ID and keep track of our generator as instances in there."
            },
            {
              "seconds": 221,
              "text": "The ID is tracked as a class variable here."
            },
            {
              "seconds": 224,
              "text": "Okay, so now we have a task, let's make a scheduler,"
            },
            {
              "seconds": 227,
              "text": "a scheduler is going to take task and it's going to run them."
            },
            {
              "seconds": 231,
              "text": "We're going to import from the collections module,"
            },
            {
              "seconds": 233,
              "text": "let's call the deck or the double ended queue."
            },
            {
              "seconds": 236,
              "text": "This allows us to efficiently stick things in the front and in the back"
            },
            {
              "seconds": 240,
              "text": "and pull them off at either end very quickly."
            },
            {
              "seconds": 242,
              "text": "What we're going to do is stick tasks into our deck"
            },
            {
              "seconds": 245,
              "text": "pull them off the front and then stick them"
            },
            {
              "seconds": 247,
              "text": "back into the other end as we're working on them."
            },
            {
              "seconds": 249,
              "text": "So we're going to have a deck here with our tasks in it"
            },
            {
              "seconds": 252,
              "text": "and we're going to make 2 other attributes, results and exceptions,"
            },
            {
              "seconds": 254,
              "text": "those are both dictionaries, they're going to map the task ID"
            },
            {
              "seconds": 257,
              "text": "to either the result that came out of it or if there is an exception"
            },
            {
              "seconds": 261,
              "text": "they're going to map the task to the exception."
            },
            {
              "seconds": 263,
              "text": "And then we have an add method and add method takes a generator"
            },
            {
              "seconds": 266,
              "text": "and it just sticks it into our tasks list after it wraps it with the task class."
            },
            {
              "seconds": 271,
              "text": "Now, we have the run method,"
            },
            {
              "seconds": 273,
              "text": "this is where the meat of our scheduler is."
            },
            {
              "seconds": 276,
              "text": "It's just going to be very similar to what we saw before here."
            },
            {
              "seconds": 278,
              "text": "We're going to have a while loop it's going to have an infinite loop."
            },
            {
              "seconds": 281,
              "text": "It's going to say if we don't have any tasks pop out of there."
            },
            {
              "seconds": 284,
              "text": "Otherwise, what we're going to do is"
            },
            {
              "seconds": 286,
              "text": "we're going to get our first task, our T from the left hand side"
            },
            {
              "seconds": 289,
              "text": "and we're going to call next on it."
            },
            {
              "seconds": 291,
              "text": "We're going to print out that we're running it,"
            },
            {
              "seconds": 293,
              "text": "but we're going to call next on it."
            },
            {
              "seconds": 295,
              "text": "So it's going to do some work until it gets to that yield,"
            },
            {
              "seconds": 297,
              "text": "and it might have other things that happen, we might get a stop iteration."
            },
            {
              "seconds": 301,
              "text": "So we might be done with that generator."
            },
            {
              "seconds": 302,
              "text": "If we did get a stop iteration that indicates that we're done"
            },
            {
              "seconds": 305,
              "text": "and we're going to stick into our results dictionary whatever we got for the value there."
            },
            {
              "seconds": 310,
              "text": "We might also get an exception, if some exception happen"
            },
            {
              "seconds": 312,
              "text": "so we can just remember our exception."
            },
            {
              "seconds": 315,
              "text": "If our generator is still running, so we didn't get a stop iteration or an exception,"
            },
            {
              "seconds": 318,
              "text": "we're going to stick it back into the end of this deck."
            },
            {
              "seconds": 321,
              "text": "So it's going to come back in the other end"
            },
            {
              "seconds": 323,
              "text": "and then we're going to come back up to the top here"
            },
            {
              "seconds": 326,
              "text": "and we're going to get our next task here"
            },
            {
              "seconds": 328,
              "text": "and we're going to work on that one, and we'll just keep working on these"
            },
            {
              "seconds": 331,
              "text": "and they're all going to yield or they should yield"
            },
            {
              "seconds": 333,
              "text": "and allow other tasks to work at the same time."
            },
            {
              "seconds": 336,
              "text": "And at some point, all the tasks will be done, we'll break out of this."
            },
            {
              "seconds": 339,
              "text": "So let's just look at an example of running this here."
            },
            {
              "seconds": 342,
              "text": "I'm going to make two generators async map g1 and another one async map"
            },
            {
              "seconds": 348,
              "text": "one is adding to the other, one has a lambda that is multiplying by 3"
            },
            {
              "seconds": 352,
              "text": "and they have slightly different input sizes,"
            },
            {
              "seconds": 355,
              "text": "we'll make an instance of our scheduler and we'll just add those two generators to them"
            },
            {
              "seconds": 359,
              "text": "and then we'll call run and we'll see that run is switching off between the two"
            },
            {
              "seconds": 362,
              "text": "it's going to say I'm running 1 now, I'm running 2, now I'm running 1,"
            },
            {
              "seconds": 365,
              "text": "and at some point 1, which is only three long, gets finished"
            },
            {
              "seconds": 369,
              "text": "and it says this is the result of running that"
            },
            {
              "seconds": 372,
              "text": "and it keeps working and now it's just working on 2, and then it gets the result of 2."
            },
            {
              "seconds": 377,
              "text": "And finally it's done, we can say what are the results of the scheduler"
            },
            {
              "seconds": 381,
              "text": "and it says well the results from task 1 are this"
            },
            {
              "seconds": 385,
              "text": "and the results of task 2 are that, but note that it interwove those results."
            },
            {
              "seconds": 390,
              "text": "It worked on both of them at the same time."
            },
            {
              "seconds": 392,
              "text": "Hopefully, that gives you some insight into how you can yield"
            },
            {
              "seconds": 396,
              "text": "and allow something else to run and then come back and work on something else."
            },
            {
              "seconds": 400,
              "text": "So as long as we have these yields or awaits in Python 3.6"
            },
            {
              "seconds": 405,
              "text": "in our coroutines that we're creating,"
            },
            {
              "seconds": 408,
              "text": "we can take advantage of this asyncio framework"
            }
          ]
        },
        {
          "lecture_id": 120909,
          "lecture_title": "Cooperative Multitasking, Async Version",
          "vimeo_id": 7111355869327876,
          "subtitles": [
            {
              "seconds": 0,
              "text": "So again, if you're using asyncio, all your code needs to be infected or whatnot,"
            },
            {
              "seconds": 4,
              "text": "everything a coroutine calls should be async if you're awaiting it,"
            },
            {
              "seconds": 9,
              "text": "it can call other functions if it's just calling them directly and getting the results."
            },
            {
              "seconds": 12,
              "text": "But if you're calling another coroutine, then you need to await that"
            },
            {
              "seconds": 15,
              "text": "or you need to iterate over the results of those."
            },
            {
              "seconds": 17,
              "text": "So if I want to convert this prior code that I have,"
            },
            {
              "seconds": 20,
              "text": "to use asyncio rather than the little framework I had,"
            },
            {
              "seconds": 23,
              "text": "what I need to do is I'm going to replace def async_"
            },
            {
              "seconds": 26,
              "text": "and I'm just going to put async def and I'm going to create a coroutine"
            },
            {
              "seconds": 30,
              "text": "and then instead of yield, I had yield in there,"
            },
            {
              "seconds": 33,
              "text": "if you have yield or yield from I'm going to replace that with await"
            },
            {
              "seconds": 37,
              "text": "and then I'm going to pass in a future to get back the results."
            },
            {
              "seconds": 40,
              "text": "So the code will change slightly but it should be very similar."
            },
            {
              "seconds": 43,
              "text": "So we'll see here that I have now acync amap"
            },
            {
              "seconds": 47,
              "text": "and I'm passing in a future here, but I still have a function and the sequence"
            },
            {
              "seconds": 50,
              "text": "and then I'm looping over my sequence"
            },
            {
              "seconds": 53,
              "text": "and I'm appending the result of my function"
            },
            {
              "seconds": 55,
              "text": "and then at this point, I'm calling await and I'm sleeping for 0"
            },
            {
              "seconds": 59,
              "text": "what sleeping for 0 on asyncio effectively does"
            },
            {
              "seconds": 63,
              "text": "is it says you know what, give someone else a chance to run."
            },
            {
              "seconds": 66,
              "text": "And so this is the point where someone else can run their code,"
            },
            {
              "seconds": 69,
              "text": "and then at the end when I'm done,"
            },
            {
              "seconds": 72,
              "text": "I'm just going to stick onto my future the results that I got."
            },
            {
              "seconds": 74,
              "text": "So I'm going to create an event loop,"
            },
            {
              "seconds": 76,
              "text": "I'm going to create a future to hold the result of my first guy,"
            },
            {
              "seconds": 80,
              "text": "I am going to create another future to hold my result of my second guy"
            },
            {
              "seconds": 83,
              "text": "and I'll pass those in and I'll have to coroutines,"
            },
            {
              "seconds": 86,
              "text": "one called t1 and one called t2."
            },
            {
              "seconds": 88,
              "text": "And then I'm going to call an asyncio function called gather"
            },
            {
              "seconds": 92,
              "text": "that takes multiple co-routines and gives me a future"
            },
            {
              "seconds": 95,
              "text": "and then I'm just going to on my loop here say"
            },
            {
              "seconds": 98,
              "text": "run until complete this coroutine that has both of them in there,"
            },
            {
              "seconds": 101,
              "text": "and then at that point, when that's done, it will return"
            },
            {
              "seconds": 104,
              "text": "and I can say f1 give me the result, here's the result from f1"
            },
            {
              "seconds": 108,
              "text": "and here's the result from f 2 and I can close my loop if I want to at the end there."
            },
            {
              "seconds": 112,
              "text": "So again, there's a few things that you need for your asyncio code."
            },
            {
              "seconds": 116,
              "text": "You need to have an event loop, so you create a loop,"
            },
            {
              "seconds": 118,
              "text": "you call run until complete and then when you're done, you close it."
            },
            {
              "seconds": 123,
              "text": "Pretty straightforward, but again, you need to have co-routines"
            },
            {
              "seconds": 126,
              "text": "and you need to have an event loop that can manage and run those for you."
            },
            {
              "seconds": 129,
              "text": "So that's the basic steps that we do for using our event loop."
            }
          ]
        },
        {
          "lecture_id": 120910,
          "lecture_title": "Coroutine Requirements",
          "vimeo_id": 7111462729390794,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Let's talk about what's found in a coroutine."
            },
            {
              "seconds": 3,
              "text": "Again, you need to declare a coroutine with async before the def"
            },
            {
              "seconds": 5,
              "text": "any non blocking code, you need to call await before it in Python 3.6"
            },
            {
              "seconds": 10,
              "text": "and again, this allows you to do that context switch"
            },
            {
              "seconds": 13,
              "text": "from one green thread to another"
            },
            {
              "seconds": 16,
              "text": "you can't call await in functions, they can only be called in coroutines."
            },
            {
              "seconds": 18,
              "text": "anything that has an async def."
            },
            {
              "seconds": 21,
              "text": "If you want to return a value, there's a couple ways that you can return a value"
            },
            {
              "seconds": 24,
              "text": "we can pass in this future that we saw"
            },
            {
              "seconds": 26,
              "text": "and just say future.set result,"
            },
            {
              "seconds": 28,
              "text": "we can also return from a coroutine."
            },
            {
              "seconds": 31,
              "text": "And then when we say run until complete"
            },
            {
              "seconds": 35,
              "text": "we will get a future as a result and we can call result on that"
            },
            {
              "seconds": 39,
              "text": "to pull off the result of what's returned."
            },
            {
              "seconds": 42,
              "text": "So those are a couple ways to return a value."
            },
            {
              "seconds": 44,
              "text": "Typically, I find myself using futures because it seems for me"
            },
            {
              "seconds": 48,
              "text": "to make it a little bit more clear"
            },
            {
              "seconds": 50,
              "text": "because you need to pack all these things into the event loop"
            },
            {
              "seconds": 52,
              "text": "and typically you have multiple things running"
            },
            {
              "seconds": 55,
              "text": "and so my code seems to have futures"
            },
            {
              "seconds": 57,
              "text": "rather than just returning the result from the gathered future"
            },
            {
              "seconds": 61,
              "text": "from every coroutine that I'm collecting together."
            },
            {
              "seconds": 65,
              "text": "These coroutines need to be put into the event loop"
            },
            {
              "seconds": 67,
              "text": "and so to put them into the event loop we can say asyncio wait"
            },
            {
              "seconds": 71,
              "text": "or asyncio gather or we can just pass in a coroutine"
            },
            {
              "seconds": 75,
              "text": "directly into that run until complete"
            },
            {
              "seconds": 78,
              "text": "wait and gather allow us to take multiple coroutines"
            },
            {
              "seconds": 80,
              "text": "and make a new future out of those to pass into our loop."
            },
            {
              "seconds": 85,
              "text": "Let's look at the interface for future and what we can do with the future."
            },
            {
              "seconds": 89,
              "text": "So there are a couple ways to create futures."
            },
            {
              "seconds": 92,
              "text": "You can call the constructor, but I'd advise against that"
            },
            {
              "seconds": 94,
              "text": "rather I would call, if you're creating a future loop create future."
            },
            {
              "seconds": 98,
              "text": "This allows you if you're using an alternate event loop,"
            },
            {
              "seconds": 102,
              "text": "they can create their own future that has an alternate implementation"
            },
            {
              "seconds": 104,
              "text": "rather than hard coding it to the asyncio future that's in there."
            },
            {
              "seconds": 108,
              "text": "So there could be some optimizations that alternate event loops"
            },
            {
              "seconds": 110,
              "text": "that you could plug in as using,"
            },
            {
              "seconds": 112,
              "text": "but this is the interface for futures"
            },
            {
              "seconds": 114,
              "text": "once we have a future we can call await on it"
            },
            {
              "seconds": 116,
              "text": "and that waits until result arrives,"
            },
            {
              "seconds": 119,
              "text": "we can call set result on it, we can call set exception on it,"
            },
            {
              "seconds": 122,
              "text": "we can have a call back on it."
            },
            {
              "seconds": 125,
              "text": "We can pass in a function and that function will be called with the future"
            },
            {
              "seconds": 128,
              "text": "when the callback is done."
            },
            {
              "seconds": 130,
              "text": "We can call exception to get the returned exception"
            },
            {
              "seconds": 133,
              "text": "and we can call result to get the returned result."
            },
            {
              "seconds": 136,
              "text": "Note that if the future does not yet have a result,"
            },
            {
              "seconds": 138,
              "text": "this will raise an invalid state error."
            },
            {
              "seconds": 141,
              "text": "It could also return a cancelled error if the future was canceled."
            },
            {
              "seconds": 144,
              "text": "So typically, we don't like go into a loop and call if f result and try"
            },
            {
              "seconds": 149,
              "text": "and see if there's an error there"
            },
            {
              "seconds": 151,
              "text": "rather we use this code right here, result is equal to yield from f"
            },
            {
              "seconds": 155,
              "text": "and that will give us our result."
            },
            {
              "seconds": 158,
              "text": "We don't have to go into a loop or anything."
            },
            {
              "seconds": 160,
              "text": "If we want to cancel our future, we can say cancel"
            },
            {
              "seconds": 162,
              "text": "and we can get the status of whether it's done or canceled."
            }
          ]
        },
        {
          "lecture_id": 120911,
          "lecture_title": "Tasks",
          "vimeo_id": 7111830814698285,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Okay, let's look at a task."
            },
            {
              "seconds": 2,
              "text": "A task is responsible for executing a coroutine object in an event loop,"
            },
            {
              "seconds": 5,
              "text": "don't directly create task instances use the ensure future function."
            },
            {
              "seconds": 8,
              "text": "Let's see why it says that."
            },
            {
              "seconds": 10,
              "text": "So again, this task will wrap a coroutine and allow us to use it in an event loop"
            },
            {
              "seconds": 15,
              "text": "and ensure future is a more general function."
            },
            {
              "seconds": 18,
              "text": "It takes any awaitable object and is item potent so you can call it multiple times,"
            },
            {
              "seconds": 22,
              "text": "but it does return a task for you, something that you can run."
            },
            {
              "seconds": 26,
              "text": "A couple of tips here, use loop create future instead of future"
            },
            {
              "seconds": 30,
              "text": "to create a future again because you might have an optimized future on a certain loop."
            },
            {
              "seconds": 36,
              "text": "Use asyncio gather or asyncio ensure future to create tasks from coroutines."
            },
            {
              "seconds": 40,
              "text": "And if you want to speed up your loop or whatnot"
            },
            {
              "seconds": 43,
              "text": "you can use a third-party loop, uvloop is one that has a faster loop implementation"
            },
            {
              "seconds": 47,
              "text": "that's not in the standard library."
            },
            {
              "seconds": 49,
              "text": "You can also time out a list of co-routines if you want to"
            },
            {
              "seconds": 52,
              "text": "by calling asyncio wait and passing a list of coroutines and give it a timeout"
            },
            {
              "seconds": 57,
              "text": "that will run for the given amount and will time out otherwise."
            }
          ]
        },
        {
          "lecture_id": 120912,
          "lecture_title": "asyncio Tips and Tools",
          "vimeo_id": 7111813167771339,
          "subtitles": [
            {
              "seconds": 0,
              "text": "If you want to use asyncio you need to be aware"
            },
            {
              "seconds": 3,
              "text": "that your code needs to be infested or whatnot."
            },
            {
              "seconds": 5,
              "text": "It needs to call await and use other code that allows you to wait"
            },
            {
              "seconds": 10,
              "text": "and run other code or is interruptable."
            },
            {
              "seconds": 13,
              "text": "And so there are a bunch of libraries on GitHub"
            },
            {
              "seconds": 15,
              "text": "that are compatible with asyncio."
            },
            {
              "seconds": 18,
              "text": "Tips for debugging you can use pdb to debug,"
            },
            {
              "seconds": 21,
              "text": "if you've tried to use pdb with threading, it can be a pain"
            },
            {
              "seconds": 25,
              "text": "because it may or may not stop and then it may be confusing"
            },
            {
              "seconds": 28,
              "text": "because Python is trying to run while you're trying to do pdb or whatnot."
            },
            {
              "seconds": 31,
              "text": "But in this case because there's only one process running"
            },
            {
              "seconds": 36,
              "text": "you can use pdb to debug."
            },
            {
              "seconds": 38,
              "text": "There's a couple other tools you might want to look into"
            },
            {
              "seconds": 40,
              "text": "these aren't included in the standard library, but they're there,"
            },
            {
              "seconds": 44,
              "text": "aioconsole and aiomonitor, these allow you"
            },
            {
              "seconds": 48,
              "text": "to have a repl that is asyncio aware"
            },
            {
              "seconds": 51,
              "text": "and allows you to directly call await and async coroutines"
            },
            {
              "seconds": 55,
              "text": "rather than having to put them into loops."
            },
            {
              "seconds": 58,
              "text": "So it's a little bit easier to debug that way."
            },
            {
              "seconds": 60,
              "text": "If you're doing testing you need to have an event loop"
            },
            {
              "seconds": 63,
              "text": "and your testing framework needs to be aware of that"
            },
            {
              "seconds": 66,
              "text": "so you can roll your own or if you don't want to roll your own"
            },
            {
              "seconds": 68,
              "text": "you can take advantage of stuff that's already there."
            },
            {
              "seconds": 71,
              "text": "So there's one called asynctest, this is on top of the unit test framework"
            },
            {
              "seconds": 74,
              "text": "and there's another called pytest asyncio"
            },
            {
              "seconds": 77,
              "text": "which is compatible with pytest."
            },
            {
              "seconds": 80,
              "text": "We've looked at a lot in this section."
            },
            {
              "seconds": 82,
              "text": "We've talked about asyncio, what it means to be concurrent versus parallel"
            },
            {
              "seconds": 86,
              "text": "and how you can use non-blocking code to not wait if you're using asyncio."
            }
          ]
        },
        {
          "lecture_id": 120913,
          "lecture_title": "Walk-through: Asyncio",
          "vimeo_id": 7111885842480743,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Test, open that up and your editor and see if we can get it going."
            },
            {
              "seconds": 3,
              "text": "So the first thing you're going to have to do is use pip to install pytest asyncio"
            },
            {
              "seconds": 9,
              "text": "this is a pytest plugin to enable asynchronous testing."
            },
            {
              "seconds": 14,
              "text": "Let's run my test here and see if this works."
            },
            {
              "seconds": 16,
              "text": "So I'm going to hit run asyncio test."
            },
            {
              "seconds": 22,
              "text": "I have not installed asyncio test so I can do that either from PyCharm"
            },
            {
              "seconds": 27,
              "text": "or I can do that from the command line here."
            },
            {
              "seconds": 30,
              "text": "I'm going to do it from the command line."
            },
            {
              "seconds": 32,
              "text": "I'm in the directory where my virtual environment is created on my machine"
            },
            {
              "seconds": 36,
              "text": "and I'm just going to say bin pip install pytest asyncio"
            },
            {
              "seconds": 45,
              "text": "and that should go out and get that and install it."
            },
            {
              "seconds": 48,
              "text": "So that's how we would install from the command line"
            },
            {
              "seconds": 51,
              "text": "making sure that I'm running pip from my virtual environment."
            },
            {
              "seconds": 56,
              "text": "Go back and run this guy again and let's see if he passes that guy."
            },
            {
              "seconds": 61,
              "text": "Okay, now we have installed pytest asyncio,"
            },
            {
              "seconds": 64,
              "text": "let's do the next part here."
            },
            {
              "seconds": 66,
              "text": "Write a coroutine add2 that accepts two parameters"
            },
            {
              "seconds": 69,
              "text": "adds them and calls asyncio.sleep(0) finally it returns the sum."
            },
            {
              "seconds": 74,
              "text": "So in order to make a coroutine, we need to say async def"
            },
            {
              "seconds": 79,
              "text": "and it's going to be called add2,"
            },
            {
              "seconds": 82,
              "text": "it's going to take two parameters X and Y"
            },
            {
              "seconds": 85,
              "text": "so it says it's going to add them."
            },
            {
              "seconds": 87,
              "text": "So I'm going to say result is equal to X plus Y"
            },
            {
              "seconds": 89,
              "text": "and then it says it wants us to call asyncio sleep"
            },
            {
              "seconds": 93,
              "text": "so asyncio.sleep(0) because this is an async call here,"
            },
            {
              "seconds": 99,
              "text": "we can't just cut like this, we need to say await asyncio sleep"
            },
            {
              "seconds": 103,
              "text": "and I have an issue here, it says I need to import asyncio."
            },
            {
              "seconds": 108,
              "text": "So let's say import that and then let's return the result here"
            },
            {
              "seconds": 112,
              "text": "again the benefit of calling asyncio sleep in a coroutine"
            },
            {
              "seconds": 116,
              "text": "is it gives the event loop the opportunity to run something else."
            },
            {
              "seconds": 119,
              "text": "So a single coroutine can't hog the CPU"
            },
            {
              "seconds": 125,
              "text": "run this and make sure that it works."
            },
            {
              "seconds": 129,
              "text": "Okay, so it looks like the add2 part is working."
            },
            {
              "seconds": 133,
              "text": "Next part says write a coroutine avg that takes two parameters"
            },
            {
              "seconds": 138,
              "text": "coroutines and size, it loops over coroutines and gets the values from them"
            },
            {
              "seconds": 142,
              "text": "when it has pulled out size values, it returns the average of those values"
            },
            {
              "seconds": 147,
              "text": "and says make sure you put in await call in it."
            },
            {
              "seconds": 150,
              "text": "If you want a well-behaving coroutine you need to put an await call in it."
            },
            {
              "seconds": 154,
              "text": "So we need to say async, because we're making a coroutine,"
            },
            {
              "seconds": 157,
              "text": "def avg and it's going to have some coroutines."
            },
            {
              "seconds": 160,
              "text": "So maybe I say cos and I'm going to say size,"
            },
            {
              "seconds": 165,
              "text": "after I get values from those, I'm going to average them."
            },
            {
              "seconds": 169,
              "text": "So I'm going to loop over my corotines for co in cos,"
            },
            {
              "seconds": 174,
              "text": "I need to accumulate the results of those."
            },
            {
              "seconds": 178,
              "text": "So I'm going to say result is equal to an empty list."
            },
            {
              "seconds": 180,
              "text": "I'm going to say res.append await co"
            },
            {
              "seconds": 184,
              "text": "I'm going to wait on that coroutine in my list of coroutines."
            },
            {
              "seconds": 187,
              "text": "Again when you call it coroutine, you need to say await on it."
            },
            {
              "seconds": 191,
              "text": "And if the length of res is equal to size,"
            },
            {
              "seconds": 196,
              "text": "then I'm going to say return the sum of res divided by the length of res"
            },
            {
              "seconds": 204,
              "text": "and that should give me the average of the first size coroutine results,"
            },
            {
              "seconds": 211,
              "text": "presumably those are giving me numerical values."
            },
            {
              "seconds": 220,
              "text": "And when I run that it appears to work."
            },
            {
              "seconds": 222,
              "text": "So again, key here is you want to have that await in there"
            },
            {
              "seconds": 225,
              "text": "so that you can give the event loop the ability to call another coroutine"
            },
            {
              "seconds": 232,
              "text": "if it wants to and do some switching between them."
            }
          ]
        },
        {
          "lecture_id": 120914,
          "lecture_title": "asyncio Context Managers",
          "vimeo_id": 7111258989592521,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about asynchronous context managers."
            },
            {
              "seconds": 3,
              "text": "These were discussed in pep 492, it came out in Python 3.5."
            },
            {
              "seconds": 7,
              "text": "Let's look at the protocol for asynchronicity in Python 3."
            },
            {
              "seconds": 12,
              "text": "There's a couple protocols that you can implement."
            },
            {
              "seconds": 14,
              "text": "If you want to define your own class that behaves as a coroutine,"
            },
            {
              "seconds": 18,
              "text": "you can implement the __await__ method"
            },
            {
              "seconds": 20,
              "text": "that means that you can call await on it and get the results from that."
            },
            {
              "seconds": 24,
              "text": "You can also Implement an asynchronous iterator and we'll talk about those,"
            },
            {
              "seconds": 28,
              "text": "and in this section, we're going to talk about asynchronous context managers."
            },
            {
              "seconds": 31,
              "text": "So they have a __aenter__ and a __aexit__ method."
            },
            {
              "seconds": 35,
              "text": "If you're not familiar with context managers,"
            },
            {
              "seconds": 37,
              "text": "let's briefly discuss what traditional context managers look like,"
            },
            {
              "seconds": 40,
              "text": "again in Python, these are things that you can put in a with statement"
            },
            {
              "seconds": 44,
              "text": "so I can open a file with a with statement"
            },
            {
              "seconds": 47,
              "text": "and within the indented portion of that block the file is going to be opened"
            },
            {
              "seconds": 51,
              "text": "and when I exit out of it, it's going to close it for me."
            },
            {
              "seconds": 54,
              "text": "So the traditional thinking about when to use a context manager is"
            },
            {
              "seconds": 57,
              "text": "if you have some logic you want to insert before a block"
            },
            {
              "seconds": 61,
              "text": "and some logic that you want to insert after,"
            },
            {
              "seconds": 63,
              "text": "either one of those makes a good case for using a context manager."
            },
            {
              "seconds": 66,
              "text": "And in that case you implement a __enter__ and a __exit__ method."
            },
            {
              "seconds": 70,
              "text": "Here's a brief example of doing that."
            },
            {
              "seconds": 73,
              "text": "Here's a silly little context manager called runner."
            },
            {
              "seconds": 76,
              "text": "We're going to pass an item into the constructor"
            },
            {
              "seconds": 78,
              "text": "and then when we enter into the block,"
            },
            {
              "seconds": 80,
              "text": "we're going to assume that the item that we passed in is a dictionary"
            },
            {
              "seconds": 83,
              "text": "and we're going to set the key running to true,"
            },
            {
              "seconds": 84,
              "text": "when we exit out of that block, we will set the key running to false."
            },
            {
              "seconds": 88,
              "text": "Down here below we can see we're actually running this"
            },
            {
              "seconds": 91,
              "text": "and you can see that here inside of this block"
            },
            {
              "seconds": 93,
              "text": "while we are in this block, the running key on item is set to true"
            },
            {
              "seconds": 98,
              "text": "as soon as we unindent out of that block running is set to false."
            },
            {
              "seconds": 102,
              "text": "So right at the start this with corresponds to this __enter__ method"
            },
            {
              "seconds": 106,
              "text": "and when we unindent down here, right before this guy,"
            },
            {
              "seconds": 109,
              "text": "we are at the __exit__ method, right there."
            },
            {
              "seconds": 113,
              "text": "So that's how you can control inserting logic before and after."
            },
            {
              "seconds": 117,
              "text": "On this page, I'm linking to a nice little project."
            },
            {
              "seconds": 120,
              "text": "It's a Linux window manager utility, but it allows you to run external processes"
            },
            {
              "seconds": 127,
              "text": "asynchronously in a context manager."
            },
            {
              "seconds": 130,
              "text": "Let's look at some of the content of that"
            },
            {
              "seconds": 132,
              "text": "and we can see that it implements this context manager"
            },
            {
              "seconds": 134,
              "text": "for asynchronous context managers protocol."
            },
            {
              "seconds": 137,
              "text": "You can see that there's a __aenter__ method"
            },
            {
              "seconds": 140,
              "text": "and interestingly enough, because it's defined with async here,"
            },
            {
              "seconds": 143,
              "text": "we can call await within it."
            },
            {
              "seconds": 145,
              "text": "So that's sort of the key to the asynchronous context manager"
            },
            {
              "seconds": 148,
              "text": "is within aenter and aexit,"
            },
            {
              "seconds": 151,
              "text": "you can call asynchronous co-routines as well."
            },
            {
              "seconds": 154,
              "text": "And this _AIOPopen guy"
            },
            {
              "seconds": 157,
              "text": "who again runs a processed asynchronously is awaitable,"
            },
            {
              "seconds": 162,
              "text": "so we see that he has a __await__ method defined as well."
            },
            {
              "seconds": 165,
              "text": "And in the constructor here you pass in a coroutine,"
            },
            {
              "seconds": 168,
              "text": "he's yielding from that and returning from that inside of the aenter there."
            },
            {
              "seconds": 173,
              "text": "I am not going to dig into much more of what's going on,"
            },
            {
              "seconds": 175,
              "text": "but I just wanted to make you aware of key difference"
            },
            {
              "seconds": 178,
              "text": "between an asynchronous context manager and a normal context manager."
            },
            {
              "seconds": 181,
              "text": "So if you need to do logic from a coroutine inside an enter or exit block,"
            },
            {
              "seconds": 188,
              "text": "you would use an asynchronous context manager"
            },
            {
              "seconds": 190,
              "text": "because inside of there you can call await."
            },
            {
              "seconds": 193,
              "text": "Here's another example, we're just going to look at quickly."
            },
            {
              "seconds": 195,
              "text": "This is heavily inspired by the async timeout project, I'll link there to the GitHub,"
            },
            {
              "seconds": 200,
              "text": "but we're defining a class called timeout"
            },
            {
              "seconds": 202,
              "text": "and we're going to use a timeout context manager"
            },
            {
              "seconds": 205,
              "text": "to be able to timeout co-routines."
            },
            {
              "seconds": 207,
              "text": "Here we're just going to show the constructor"
            },
            {
              "seconds": 210,
              "text": "we can pass in a timeout value,"
            },
            {
              "seconds": 211,
              "text": "how long we want to timeout, we'll pass in a loop."
            },
            {
              "seconds": 213,
              "text": "Inside of it, we're going to make it canceled attribute"
            },
            {
              "seconds": 216,
              "text": "that says we have not cancelled what we're running"
            },
            {
              "seconds": 219,
              "text": "and a handler, this handler will be called if we're going to cancel what's running."
            },
            {
              "seconds": 223,
              "text": "Here we see the asynchronous protocol being implemented,"
            },
            {
              "seconds": 226,
              "text": "we see an async def __aenter__, so that's when we enter the block"
            },
            {
              "seconds": 233,
              "text": "and you can see that when we enter the block,"
            },
            {
              "seconds": 235,
              "text": "we're going to get the current time on the loop"
            },
            {
              "seconds": 237,
              "text": "and we're going to add the timeout to it."
            },
            {
              "seconds": 240,
              "text": "And that's when we want to timeout this block."
            },
            {
              "seconds": 242,
              "text": "We're going to get a task, we'll show the get task implementation below"
            },
            {
              "seconds": 245,
              "text": "and we'll set a handler, on the loop we'll say call at"
            },
            {
              "seconds": 248,
              "text": "at some time when we're going to call our self cancel method"
            },
            {
              "seconds": 253,
              "text": "and that gives us back a handler."
            },
            {
              "seconds": 255,
              "text": "We also have the __aexit__ and you can see that"
            },
            {
              "seconds": 260,
              "text": "this is very analogous to the traditional context manager,"
            },
            {
              "seconds": 263,
              "text": "we get back an exception and a value and a traceback"
            },
            {
              "seconds": 266,
              "text": "if there was an exception thrown from within the context"
            },
            {
              "seconds": 270,
              "text": "and here you can see that if the canceled flag is set,"
            },
            {
              "seconds": 273,
              "text": "then we raise the asyncio timeout error,"
            },
            {
              "seconds": 276,
              "text": "otherwise, if we have a handler we're going to cancel that handler"
            },
            {
              "seconds": 279,
              "text": "and set the handler to none and we're going to set the test to none."
            },
            {
              "seconds": 283,
              "text": "Here we have the implementation of the cancel method."
            },
            {
              "seconds": 285,
              "text": "It just calls cancel on the task and sets cancel to true."
            },
            {
              "seconds": 289,
              "text": "Down below we have the get task function that takes a loop"
            },
            {
              "seconds": 292,
              "text": "and returns the current task in the block."
            },
            {
              "seconds": 295,
              "text": "Here's an example of running that,"
            },
            {
              "seconds": 297,
              "text": "we can see when we use an asynchronous context manager"
            },
            {
              "seconds": 300,
              "text": "instead of saying just with we have to say async with."
            },
            {
              "seconds": 304,
              "text": "Here we're saying that we're going to time out after two seconds."
            },
            {
              "seconds": 307,
              "text": "We're going to pass in our loop as well,"
            },
            {
              "seconds": 309,
              "text": "and we're just going to sleep for one second here."
            },
            {
              "seconds": 311,
              "text": "So this will not timeout, it should print done and after."
            },
            {
              "seconds": 314,
              "text": "If we change this value in here from 1 to say 3 or some value greater than 2,"
            },
            {
              "seconds": 319,
              "text": "then this would time out and instead of saying done here,"
            },
            {
              "seconds": 323,
              "text": "it would print timeout and it's going to raise this asyncio timeout error."
            },
            {
              "seconds": 328,
              "text": "We can handle that with a try block if we want to"
            },
            {
              "seconds": 331,
              "text": "and do the appropriate thing at that point."
            },
            {
              "seconds": 333,
              "text": "So this is a simple example of using a context manager that is asynchronous."
            },
            {
              "seconds": 339,
              "text": "In this video we talked about asynchronous context managers."
            },
            {
              "seconds": 341,
              "text": "Again, the key here is that you implement the protocol"
            },
            {
              "seconds": 345,
              "text": "and the key difference between these context managers"
            },
            {
              "seconds": 347,
              "text": "and traditional context managers is that you can await from within them."
            }
          ]
        },
        {
          "lecture_id": 120915,
          "lecture_title": "Walk-through: Asyncio Context Managers",
          "vimeo_id": 7111917271320114,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at async context test.py"
            },
            {
              "seconds": 4,
              "text": "Let's look at the first test, it says write an asynchronous context manager staller,"
            },
            {
              "seconds": 8,
              "text": "it should accept a time in seconds when the context is entered,"
            },
            {
              "seconds": 12,
              "text": "it should pause for that many seconds, call asyncio sleep."
            },
            {
              "seconds": 15,
              "text": "Okay, so let's make a staller."
            },
            {
              "seconds": 18,
              "text": "We have to define a class called staller"
            },
            {
              "seconds": 20,
              "text": "and we need to define a constructor __init__"
            },
            {
              "seconds": 25,
              "text": "and it needs to take some time in seconds"
            },
            {
              "seconds": 28,
              "text": "and because this is an import there rather than saying time,"
            },
            {
              "seconds": 34,
              "text": "maybe I'll just say amount and I'll say self.amount is equal to amount."
            },
            {
              "seconds": 38,
              "text": "Now we need to define the implementation for the asynchronous protocol"
            },
            {
              "seconds": 42,
              "text": "of the context manager and that is defining __aenter__ and __aexit__"
            },
            {
              "seconds": 49,
              "text": "and because this is asynchronous,"
            },
            {
              "seconds": 51,
              "text": "we're going to put an async right in front of that def there."
            },
            {
              "seconds": 55,
              "text": "Okay, it says when we enter we want to call asyncio.sleep"
            },
            {
              "seconds": 61,
              "text": "and we want to sleep for self.amt"
            },
            {
              "seconds": 64,
              "text": "and we're getting squiggles here in PyCharm"
            },
            {
              "seconds": 66,
              "text": "because we need to import asyncio there"
            },
            {
              "seconds": 70,
              "text": "and because we're calling an asynchronous function,"
            },
            {
              "seconds": 73,
              "text": "remember, whenever we call asynchronous functions, we need to await them."
            },
            {
              "seconds": 76,
              "text": "So this is a function that can call asynchronous functions"
            },
            {
              "seconds": 82,
              "text": "because it is defined with async in front of it."
            },
            {
              "seconds": 84,
              "text": "Great, we just also need to define the async def __aexit__"
            },
            {
              "seconds": 90,
              "text": "and this doesn't need to do anything, so we'll just pass here."
            },
            {
              "seconds": 94,
              "text": "Let's run this and make sure that it works,"
            },
            {
              "seconds": 96,
              "text": "so I'll just right-click and say run this."
            },
            {
              "seconds": 98,
              "text": "And it looks like I'm on the second part here,"
            },
            {
              "seconds": 102,
              "text": "so this is my staller context manager,"
            },
            {
              "seconds": 105,
              "text": "it takes an amount that we want to stall"
            },
            {
              "seconds": 108,
              "text": "and when we enter the context it will sleep for that amount before starting the context."
            },
            {
              "seconds": 113,
              "text": "We can look down at the test here just to make sure that that's what's going on."
            },
            {
              "seconds": 116,
              "text": "We have a time, we keep track of the time before we go into it,"
            },
            {
              "seconds": 120,
              "text": "we're going to say we're going to stall for one second"
            },
            {
              "seconds": 122,
              "text": "and then we're going to enter it, we're going to look at our time"
            },
            {
              "seconds": 125,
              "text": "and we're going to assert that our time difference"
            },
            {
              "seconds": 128,
              "text": "is greater than or equal to 1 second, which it appears to be now."
            },
            {
              "seconds": 131,
              "text": "The next one says write an asynchronous context manager closer."
            },
            {
              "seconds": 133,
              "text": "It should accept an object and call the .close method on it when the context exits."
            },
            {
              "seconds": 139,
              "text": "Okay class closer, we need the constructor,"
            },
            {
              "seconds": 146,
              "text": "and it needs some object here, I'm just going to say obj"
            },
            {
              "seconds": 150,
              "text": "and let's say self.obj is equal to obj,"
            },
            {
              "seconds": 153,
              "text": "and we need a __aenter__, __aexit__ async def __aenter__"
            },
            {
              "seconds": 161,
              "text": "and this doesn't need to do anything here"
            },
            {
              "seconds": 164,
              "text": "and we need a async def __aexit__"
            },
            {
              "seconds": 170,
              "text": "and when we exit we need to make sure that we call closer here"
            },
            {
              "seconds": 174,
              "text": "so you can say self.obj.close."
            },
            {
              "seconds": 181,
              "text": "Let's run this and make sure it works."
            },
            {
              "seconds": 184,
              "text": "Okay, it looks like it worked and we can look at the test down here."
            },
            {
              "seconds": 190,
              "text": "The test just makes a class called CloseMe and if you call close on it,"
            },
            {
              "seconds": 195,
              "text": "it sets an attribute called closed is equal to true"
            },
            {
              "seconds": 197,
              "text": "and inside of here, we just create an instance of CloseMe"
            },
            {
              "seconds": 201,
              "text": "and we put it in our async context manager here"
            },
            {
              "seconds": 204,
              "text": "and we don't do anything, we just assert that after we're done closed is called."
            },
            {
              "seconds": 210,
              "text": "Note that nowhere inside of this code have we called closed"
            },
            {
              "seconds": 215,
              "text": "but we passed the c object into closer and it called that when it exited out of it."
            },
            {
              "seconds": 221,
              "text": "Hopefully you have a little bit more understanding"
            },
            {
              "seconds": 224,
              "text": "how to use these asynchronous context managers"
            },
            {
              "seconds": 226,
              "text": "the key point being that if you want to do some asynchronous calling"
            },
            {
              "seconds": 232,
              "text": "you can do that inside of the __enter__ or __exit__ if you want to."
            },
            {
              "seconds": 237,
              "text": "Note that closer doesn't do any asynchronous calling."
            },
            {
              "seconds": 240,
              "text": "It just closes an object so you can make the context managers like that"
            },
            {
              "seconds": 245,
              "text": "as well if you want to."
            }
          ]
        },
        {
          "lecture_id": 120916,
          "lecture_title": "asyncio Context Iterators",
          "vimeo_id": 7111923546656679,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to look at asynchronous iterators."
            },
            {
              "seconds": 3,
              "text": "These were described in pep 492, it came out in Python 3.5."
            },
            {
              "seconds": 6,
              "text": "Again, here's the protocol for asynchronicity,"
            },
            {
              "seconds": 9,
              "text": "we can make co-routines and we saw that we can define those with async def."
            },
            {
              "seconds": 15,
              "text": "You can also define a class that's awaitable, if you implement the __await__ method"
            },
            {
              "seconds": 19,
              "text": "we can make iterators by defining two methods here."
            },
            {
              "seconds": 23,
              "text": "We can define __aiter__ and __anext__."
            },
            {
              "seconds": 27,
              "text": "These are analogous to iterators in normal Python,"
            },
            {
              "seconds": 30,
              "text": "in synchronous Python where we define __iter__ and __next__."
            },
            {
              "seconds": 35,
              "text": "Here, we're going to show an example of an asynchronous iterator."
            },
            {
              "seconds": 38,
              "text": "This is implementing a basic version of range,"
            },
            {
              "seconds": 41,
              "text": "it's just going to do it asynchronously."
            },
            {
              "seconds": 43,
              "text": "So we're going to make a class called Arange,"
            },
            {
              "seconds": 45,
              "text": "it's going to have a constructor that takes a start and an end"
            },
            {
              "seconds": 47,
              "text": "and the end is optional, if the end is not set,"
            },
            {
              "seconds": 50,
              "text": "then we use the start as the end value when we start at 0."
            },
            {
              "seconds": 54,
              "text": "We're going to define two methods in here,"
            },
            {
              "seconds": 55,
              "text": "one is called __aiter__ and the other one is called __anext__"
            },
            {
              "seconds": 60,
              "text": "Note that __anext__ is a coroutine, we're defining it with async and aiter,"
            },
            {
              "seconds": 65,
              "text": "you can see in the implementation of the coroutine __anext__"
            },
            {
              "seconds": 69,
              "text": "that we look at our current value of start and if it's greater than or equal to the end"
            },
            {
              "seconds": 74,
              "text": "then we raise a stop async iteration."
            },
            {
              "seconds": 76,
              "text": "This is analogous to stop iteration in non asynchronous land"
            },
            {
              "seconds": 81,
              "text": "and if that isn't the case, we're going to increment the start value"
            },
            {
              "seconds": 85,
              "text": "and we're going to return the value there."
            },
            {
              "seconds": 87,
              "text": "So this should count up up to but not including the end number."
            },
            {
              "seconds": 92,
              "text": "Here's an example of running arange."
            },
            {
              "seconds": 94,
              "text": "We've got a routine called run arange and note that we have a for loop here"
            },
            {
              "seconds": 98,
              "text": "in front of our for loop we have async"
            },
            {
              "seconds": 100,
              "text": "so because this is the asynchronous iteration"
            },
            {
              "seconds": 103,
              "text": "we need to put async in front of our for loop"
            },
            {
              "seconds": 107,
              "text": "we can get our event loop and then say run until complete"
            },
            {
              "seconds": 109,
              "text": "and this will print out the numbers from 0 up to but not including 5"
            },
            {
              "seconds": 113,
              "text": "asynchronous iterators are pretty straightforward,"
            },
            {
              "seconds": 116,
              "text": "again, you just need to implement that __aiter__"
            },
            {
              "seconds": 119,
              "text": "and a coroutine called __anext__"
            },
            {
              "seconds": 122,
              "text": "and you can make something that you can use in asynchronous land."
            }
          ]
        },
        {
          "lecture_id": 120917,
          "lecture_title": "Walk-through: Asyncio Context Iterators",
          "vimeo_id": 7111137894720310,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at async iter test, open that up in your editor."
            },
            {
              "seconds": 4,
              "text": "The first part says write an asynchronous iterator countdown"
            },
            {
              "seconds": 6,
              "text": "that accepts a count and a delay, when looped over asynchronously,"
            },
            {
              "seconds": 10,
              "text": "it returns the numbers from count down to and including zero."
            },
            {
              "seconds": 14,
              "text": "It waits for delay seconds before returning the next value."
            },
            {
              "seconds": 19,
              "text": "Okay, so we need to define a class called count down"
            },
            {
              "seconds": 22,
              "text": "and it needs to have a constructor that has a count and a delay"
            },
            {
              "seconds": 27,
              "text": "so def __init__ and it needs to have a count and a delay in here"
            },
            {
              "seconds": 35,
              "text": "self.count is equal to count and self.delay is equal to delay."
            },
            {
              "seconds": 41,
              "text": "Okay, we need to implement this asynchronous iteration protocol."
            },
            {
              "seconds": 45,
              "text": "So the first one is def __aiter__,"
            },
            {
              "seconds": 50,
              "text": "and this can be defined as asynchronous or not,"
            },
            {
              "seconds": 53,
              "text": "it just depends on whether you want to do an asynchronous call"
            },
            {
              "seconds": 56,
              "text": "in this case, I don't want to, I'm just going to return self"
            },
            {
              "seconds": 59,
              "text": "and make this a self iterating coroutine."
            },
            {
              "seconds": 62,
              "text": "Now, I need to define a __anext__ and this does need to be an async call"
            },
            {
              "seconds": 68,
              "text": "so def __anext__."
            },
            {
              "seconds": 79,
              "text": "Okay, there's a __anext__ and inside of here,"
            },
            {
              "seconds": 82,
              "text": "we want to return count and then delay after each count."
            },
            {
              "seconds": 88,
              "text": "So we need to have some little logic there to say something like,"
            },
            {
              "seconds": 91,
              "text": "maybe I need to come up here and keep track of the value"
            },
            {
              "seconds": 94,
              "text": "that I'm going to return next."
            },
            {
              "seconds": 96,
              "text": "I'm going to say self.value is equal to count,"
            },
            {
              "seconds": 98,
              "text": "value is what I'm going to return."
            },
            {
              "seconds": 100,
              "text": "If self.val is equal to self.count, then let's just return self.val."
            },
            {
              "seconds": 111,
              "text": "So the first time we don't want to delay before we return the value,"
            },
            {
              "seconds": 114,
              "text": "so we want to say 10 and then wait for a second or whatever"
            },
            {
              "seconds": 117,
              "text": "and then say 9 and then wait for a second and keep going that way."
            },
            {
              "seconds": 120,
              "text": "Now, in this case, if self.val what we're going to return is equal to 0,"
            },
            {
              "seconds": 130,
              "text": "we also want to return self.val"
            },
            {
              "seconds": 140,
              "text": "and otherwise, we want to say we want to sleep for delay"
            },
            {
              "seconds": 144,
              "text": "and decrement our self.val."
            },
            {
              "seconds": 147,
              "text": "So we want to say await asyncio.sleep for self.delay"
            },
            {
              "seconds": 157,
              "text": "and then we want to return self.val"
            },
            {
              "seconds": 160,
              "text": "and we're going to say self.val minus equals 1 and return self.val."
            },
            {
              "seconds": 177,
              "text": "Okay, let's try this see if it works here."
            },
            {
              "seconds": 180,
              "text": "I'm going to say run async test, it thinks for a minute here"
            },
            {
              "seconds": 186,
              "text": "and I get an error on line 43."
            },
            {
              "seconds": 193,
              "text": "So that's this guy right here, I got an assertion error,"
            },
            {
              "seconds": 197,
              "text": "so down here we're basically unrolling this protocol here."
            },
            {
              "seconds": 200,
              "text": "We're saying get the aiter and then get a start time"
            },
            {
              "seconds": 206,
              "text": "and call next on it and the first value since we passed in 2 should be 2"
            },
            {
              "seconds": 210,
              "text": "and assert the time is less than half a second"
            },
            {
              "seconds": 214,
              "text": "since we're saying delay of 1 and then we're getting the next and saying that"
            },
            {
              "seconds": 219,
              "text": "the next value should be 1 and we got the next value was 2 instead of 1,"
            },
            {
              "seconds": 225,
              "text": "so let's go up here and look at our logic here."
            },
            {
              "seconds": 227,
              "text": "So the first time we returned self.val we didn't do anything,"
            },
            {
              "seconds": 233,
              "text": "so our self.val is just going to still be self.val."
            },
            {
              "seconds": 237,
              "text": "So maybe I want to say something like this"
            },
            {
              "seconds": 240,
              "text": "like val is equal to self.val and if val is equal to self.count, return val."
            },
            {
              "seconds": 248,
              "text": "And at this point we're going to say self.val minus equals 1 up here."
            },
            {
              "seconds": 260,
              "text": "And let's see if that works a little bit better."
            },
            {
              "seconds": 264,
              "text": "So in the first case, we'll say val is equal to self.val"
            },
            {
              "seconds": 269,
              "text": "which should be the start value."
            },
            {
              "seconds": 271,
              "text": "We're going to decrement our instance member which shouldn't affect val"
            },
            {
              "seconds": 275,
              "text": "and then if we're starting we're just going to return,"
            },
            {
              "seconds": 278,
              "text": "if we're at the end we're going to return."
            },
            {
              "seconds": 281,
              "text": "I think this is wrong, we don't want to return at the end,"
            },
            {
              "seconds": 284,
              "text": "we want to sleep before that, so we'll just get rid of that and we'll say"
            },
            {
              "seconds": 290,
              "text": "if val is less than 0 then we want to raise a stop async iteration."
            },
            {
              "seconds": 304,
              "text": "So that says we are done once we get 0"
            },
            {
              "seconds": 308,
              "text": "so don't do any more sleeping or whatever."
            },
            {
              "seconds": 311,
              "text": "Let's run this and see if it works."
            },
            {
              "seconds": 317,
              "text": "Okay, I got an asyncio is not defined here."
            },
            {
              "seconds": 320,
              "text": "I better fix that and make it defined,"
            },
            {
              "seconds": 326,
              "text": "import asyncio, let's run it again."
            },
            {
              "seconds": 334,
              "text": "And it looks like it worked that time."
            },
            {
              "seconds": 336,
              "text": "So it passed, note that it took 2 seconds to run, or a little bit more than 2 seconds,"
            },
            {
              "seconds": 340,
              "text": "which makes sense because I said I want to count down from 2"
            },
            {
              "seconds": 344,
              "text": "and I want to have a one second delay in between there."
            },
            {
              "seconds": 347,
              "text": "So it should give me 2, wait for one second, give me 1,"
            },
            {
              "seconds": 350,
              "text": "wait for a second, give me 0 and not wait after that."
            },
            {
              "seconds": 353,
              "text": "Note that the test here, we keep calling next"
            },
            {
              "seconds": 357,
              "text": "and we assert it, it raises that stop async iteration error."
            },
            {
              "seconds": 360,
              "text": "So this is a little bit trickier."
            },
            {
              "seconds": 364,
              "text": "There's some logic in here that you've got to sort of figure out"
            },
            {
              "seconds": 366,
              "text": "but once you've got it, you can see that you have a little asynchronous counter"
            },
            {
              "seconds": 372,
              "text": "that will count down and sleep in there."
            },
            {
              "seconds": 375,
              "text": "Again, note that this __anext__, this is a coroutine"
            },
            {
              "seconds": 380,
              "text": "and because it's defined with async we can call await in there."
            },
            {
              "seconds": 384,
              "text": "This gives anything else on the event loop that wants to run"
            },
            {
              "seconds": 387,
              "text": "a chance to run at that point in time."
            }
          ]
        },
        {
          "lecture_id": 120918,
          "lecture_title": "asyncio Generators",
          "vimeo_id": 7111775805086316,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video, we're going to talk about asynchronous generators."
            },
            {
              "seconds": 3,
              "text": "These are described in pep 525 Python 3.6"
            },
            {
              "seconds": 6,
              "text": "in the pep it describes some of the motivation for this"
            },
            {
              "seconds": 10,
              "text": "we'll just read this because I think it's pretty interesting."
            },
            {
              "seconds": 12,
              "text": "It says, however currently there is no equivalent concept"
            },
            {
              "seconds": 15,
              "text": "for the asynchronous iteration protocol async for."
            },
            {
              "seconds": 18,
              "text": "This makes writing asynchronous data producers unnecessarily complex"
            },
            {
              "seconds": 22,
              "text": "as one must define a class that implements __aiter__ and __anext__"
            },
            {
              "seconds": 27,
              "text": "to be able to use it in async for statement."
            },
            {
              "seconds": 30,
              "text": "So we saw how to implement a asynchronous iterator"
            },
            {
              "seconds": 33,
              "text": "and we saw that you can do that by implementing __aiter__ and __anext__"
            },
            {
              "seconds": 37,
              "text": "if you've done that with normal iterators in Python,"
            },
            {
              "seconds": 40,
              "text": "you'll note that typically it's a lot easier to do that with the generator"
            },
            {
              "seconds": 43,
              "text": "and this was the same motivation here."
            },
            {
              "seconds": 46,
              "text": "Also interesting to notice this next paragraph that's in the pep."
            },
            {
              "seconds": 49,
              "text": "It says performance is an additional point for this proposal"
            },
            {
              "seconds": 51,
              "text": "in our testing of the reference implementation"
            },
            {
              "seconds": 54,
              "text": "asynchronous generators are 2x faster than the equivalent"
            },
            {
              "seconds": 57,
              "text": "implemented as an asynchronous iterator."
            },
            {
              "seconds": 60,
              "text": "Kind of cool, you get some speed benefit and it's easier to write."
            },
            {
              "seconds": 63,
              "text": "So here's an example of the migration path."
            },
            {
              "seconds": 66,
              "text": "We are taking an asynchronous iterator"
            },
            {
              "seconds": 69,
              "text": "and we're starting to add a generator to it."
            },
            {
              "seconds": 72,
              "text": "Here I've got a class called GenRange,"
            },
            {
              "seconds": 74,
              "text": "and this is, again, similar to that Arange guy that we implemented before"
            },
            {
              "seconds": 77,
              "text": "you can give it a start and an optional end"
            },
            {
              "seconds": 79,
              "text": "and if you don't specify the end it will use start as the end."
            },
            {
              "seconds": 82,
              "text": "And then we notice that we have down below specified __aiter__"
            },
            {
              "seconds": 87,
              "text": "and in there, note that we are yielding the results,"
            },
            {
              "seconds": 91,
              "text": "we're just looping over range and yielding the result."
            },
            {
              "seconds": 94,
              "text": "So we're combining a generator with an iterator."
            },
            {
              "seconds": 97,
              "text": "Here's an example of running this"
            },
            {
              "seconds": 99,
              "text": "we can put it in a coroutine and because this is a coroutine itself"
            },
            {
              "seconds": 104,
              "text": "we need to put async in front of our for when we loop over it"
            },
            {
              "seconds": 108,
              "text": "and this will print the numbers from 0 up to but not including 5."
            },
            {
              "seconds": 111,
              "text": "Now we want to take that a step further"
            },
            {
              "seconds": 113,
              "text": "we can do the same thing with normal iterators."
            },
            {
              "seconds": 116,
              "text": "We can yield from __iter__ in there,"
            },
            {
              "seconds": 119,
              "text": "but wouldn't it be nicer if we could just make a generator function"
            },
            {
              "seconds": 122,
              "text": "that is a generator and we can do that,"
            },
            {
              "seconds": 124,
              "text": "here we have a function that is a generator"
            },
            {
              "seconds": 126,
              "text": "because it has a yield in it but it also has an async in front of it."
            },
            {
              "seconds": 130,
              "text": "So this is a synchronous generator."
            },
            {
              "seconds": 132,
              "text": "And this is the same implementation that we had before"
            },
            {
              "seconds": 134,
              "text": "but note that the logic is a lot simpler"
            },
            {
              "seconds": 138,
              "text": "and we don't have to keep track of state"
            },
            {
              "seconds": 140,
              "text": "because this freezes and comes back to itself like a normal generator in Python would,"
            },
            {
              "seconds": 145,
              "text": "so here's an example of using it, again because it is a coroutine"
            },
            {
              "seconds": 149,
              "text": "it behaves as a coroutine when we loop over it"
            },
            {
              "seconds": 152,
              "text": "we need to put that async in front of our for there,"
            },
            {
              "seconds": 154,
              "text": "but this will print the numbers from 0 up to but not including 5,"
            },
            {
              "seconds": 158,
              "text": "so that's how you can make a asynchronous genera tor in Python."
            },
            {
              "seconds": 161,
              "text": "Just put an async in front of your def there"
            },
            {
              "seconds": 165,
              "text": "and include a yield in your logic"
            },
            {
              "seconds": 167,
              "text": "and you now have an asynchronous generator."
            },
            {
              "seconds": 170,
              "text": "Hopefully, you can use these to make your code more succinct and more legible."
            }
          ]
        },
        {
          "lecture_id": 120919,
          "lecture_title": "Walk-through: Asyncio Generators",
          "vimeo_id": 7111732695893584,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at async gen test, open that up in your editor."
            },
            {
              "seconds": 4,
              "text": "And this is about making asynchronous generators."
            },
            {
              "seconds": 7,
              "text": "So it says write an a synchronous generator countdown"
            },
            {
              "seconds": 10,
              "text": "that accepts a count and a delay, when looped over asynchronously,"
            },
            {
              "seconds": 13,
              "text": "it returns the numbers from countdown to an including zero"
            },
            {
              "seconds": 16,
              "text": "it waits for delay seconds before returning the next value."
            },
            {
              "seconds": 19,
              "text": "This should be very familiar to you if you've already done async iter test."
            },
            {
              "seconds": 24,
              "text": "So let's make a generator that does this"
            },
            {
              "seconds": 27,
              "text": "the point of this is to show that generators are typically easier to implement"
            },
            {
              "seconds": 31,
              "text": "and easier to debug than iterators."
            },
            {
              "seconds": 34,
              "text": "So in order to make an a synchronous generator"
            },
            {
              "seconds": 37,
              "text": "we say async def and it's going to be called countdown,"
            },
            {
              "seconds": 40,
              "text": "it's going to accept count and delay"
            },
            {
              "seconds": 43,
              "text": "and I'm just going to go into a while loop here,"
            },
            {
              "seconds": 46,
              "text": "I am going to say while 1 and I will yield count"
            },
            {
              "seconds": 51,
              "text": "and if count equals 0 then I will break out of here."
            },
            {
              "seconds": 58,
              "text": "Otherwise, I will say count minus equals 1 and then I'm going to sleep"
            },
            {
              "seconds": 64,
              "text": "and I could just say time.sleep, but that's not going to be an asynchronous sleep."
            },
            {
              "seconds": 68,
              "text": "So in order to do an asynchronous sleep,"
            },
            {
              "seconds": 70,
              "text": "I need to import the asyncio library and then we need to await it."
            },
            {
              "seconds": 76,
              "text": "So we're going to call await asyncio.sleep."
            },
            {
              "seconds": 82,
              "text": "and we're going to sleep for delay seconds"
            },
            {
              "seconds": 85,
              "text": "again because I am in an asynchronous generator,"
            },
            {
              "seconds": 89,
              "text": "I can call await on an asynchronous function here"
            },
            {
              "seconds": 93,
              "text": "and that should be it, let's give it a test and make sure that it works here."
            },
            {
              "seconds": 97,
              "text": "So just run it here, it takes a while because it's doing some delaying here,"
            },
            {
              "seconds": 104,
              "text": "but it looked like it ran."
            },
            {
              "seconds": 106,
              "text": "This is the same test code basically as async iter test"
            },
            {
              "seconds": 109,
              "text": "and note that it takes 2 seconds to run"
            },
            {
              "seconds": 111,
              "text": "and if we come down here we say that we're counting down from 2 with 1 second delay."
            },
            {
              "seconds": 115,
              "text": "So that should take 2 seconds to run."
            },
            {
              "seconds": 117,
              "text": "You'll note that we're sort of unrolling the asynchronous iteration protocol down here"
            },
            {
              "seconds": 122,
              "text": "and asserting that we raise a stop async iteration error"
            },
            {
              "seconds": 126,
              "text": "You'll note that we don't explicitly raise that exception"
            },
            {
              "seconds": 129,
              "text": "but when the generator returns that raises the exception for us,"
            },
            {
              "seconds": 132,
              "text": "so thanks for watching this video."
            },
            {
              "seconds": 134,
              "text": "Hopefully you have a better feel for those a synchronous generators now"
            },
            {
              "seconds": 138,
              "text": "and you can hopefully take advantage of those and use those in your code."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12010,
      "chapter_title": "Language syntax",
      "lectures": [
        {
          "lecture_id": 121001,
          "lecture_title": "Exceptions",
          "vimeo_id": 7111792408991904,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we're going to talk about exception chaining."
            },
            {
              "seconds": 2,
              "text": "This came out in pepped 3134."
            },
            {
              "seconds": 5,
              "text": "There are a few new things that this introduces in Pythons exceptions."
            },
            {
              "seconds": 8,
              "text": "That's the __context__, __cause__ and the __traceback__."
            },
            {
              "seconds": 12,
              "text": "We'll look at all of them here."
            },
            {
              "seconds": 14,
              "text": "The motivation for this, the pep states that"
            },
            {
              "seconds": 16,
              "text": "during handling of one exception, exception a,"
            },
            {
              "seconds": 19,
              "text": "it may be possible that another exception, exception b, may occur."
            },
            {
              "seconds": 23,
              "text": "If this happens exception b is propagated outward and exception a is lost."
            },
            {
              "seconds": 27,
              "text": "In order to debug the problem, it's useful to know about both exceptions,"
            },
            {
              "seconds": 30,
              "text": "the __context__ attribute retains this information."
            },
            {
              "seconds": 33,
              "text": "So let's look at an example here."
            },
            {
              "seconds": 35,
              "text": "I'm trying to divide 1 by 0, I'll get a 0 division error"
            },
            {
              "seconds": 39,
              "text": "that will raise an exception and I can inspect that exception here"
            },
            {
              "seconds": 42,
              "text": "and note that I'm just printing the string of the exception,"
            },
            {
              "seconds": 46,
              "text": "the context of it, the __context__, the __cause__ and the __traceback__"
            },
            {
              "seconds": 50,
              "text": "and because this is the original exception here, I only have that exception,"
            },
            {
              "seconds": 54,
              "text": "there's no context no __context__ and no __cause__."
            },
            {
              "seconds": 56,
              "text": "There is a __traceback__ which has the __traceback__ for the exception."
            },
            {
              "seconds": 59,
              "text": "Now, let's change it a little bit."
            },
            {
              "seconds": 61,
              "text": "Let's make a function called divide work that does some division"
            },
            {
              "seconds": 64,
              "text": "and if there's a 0 division error, it will call log, the log function."
            },
            {
              "seconds": 69,
              "text": "And in this case, let's pretend that log talks to a cloud-based logging provider"
            },
            {
              "seconds": 75,
              "text": "and for some reason this is down."
            },
            {
              "seconds": 77,
              "text": "So instead of actually logging it raises a system error that says logging is not up."
            },
            {
              "seconds": 80,
              "text": "So now we're going to have a couple errors here"
            },
            {
              "seconds": 83,
              "text": "if we divide by 0 we're going to try and log that"
            },
            {
              "seconds": 86,
              "text": "and we're going to get another error that says a system error."
            },
            {
              "seconds": 89,
              "text": "So if we look at what happens when we say divide 5 by 0,"
            },
            {
              "seconds": 92,
              "text": "it gives us a traceback and it says we got to 0 division error"
            },
            {
              "seconds": 95,
              "text": "and it says during the handling of that 0 division error another exception occurred."
            },
            {
              "seconds": 100,
              "text": "We also got this system error logging is not up."
            },
            {
              "seconds": 103,
              "text": "Let's try and call our divide work with a 0 division error"
            },
            {
              "seconds": 107,
              "text": "and see what the exception looks like."
            },
            {
              "seconds": 109,
              "text": "If we inspect the exception, we'll see that we got the logging is not up exception."
            },
            {
              "seconds": 114,
              "text": "So this means we're getting a 0 division error,"
            },
            {
              "seconds": 116,
              "text": "which is trying to log that and it's getting the logging is not up error."
            },
            {
              "seconds": 120,
              "text": "If we look at the __context__ there, there we see the 0 division error"
            },
            {
              "seconds": 123,
              "text": "and there is no __cause__ and we see that we have a traceback."
            },
            {
              "seconds": 128,
              "text": "So by having multiple exceptions here we can inspect the __context__"
            },
            {
              "seconds": 133,
              "text": "and see where that exception came from,"
            },
            {
              "seconds": 136,
              "text": "in this case, the logging up exception came from having it as 0 division error."
            },
            {
              "seconds": 142,
              "text": "Let's look at the motivation for __cause__"
            },
            {
              "seconds": 144,
              "text": "it says sometimes it can be useful for an exception handler"
            },
            {
              "seconds": 147,
              "text": "to intentionally reraise an exception either to provide extra information"
            },
            {
              "seconds": 151,
              "text": "or to translate an exception to another type."
            },
            {
              "seconds": 154,
              "text": "The __cause__ attribute provides an explicit way"
            },
            {
              "seconds": 157,
              "text": "to record the direct cause of an exception"
            },
            {
              "seconds": 159,
              "text": "let's look at __cause__ here is some code that illustrates it"
            },
            {
              "seconds": 162,
              "text": "we still have our divide work function, it's changed a little bit."
            },
            {
              "seconds": 165,
              "text": "If we get a 0 division error, we're going to log that"
            },
            {
              "seconds": 168,
              "text": "and in this case our log will not fail, it's just going to print that out"
            },
            {
              "seconds": 172,
              "text": "but we are going to raise another exception"
            },
            {
              "seconds": 174,
              "text": "instead, we're going to raise it an arithmetic error,"
            },
            {
              "seconds": 176,
              "text": "and we're going to say raise that from the original exception."
            },
            {
              "seconds": 179,
              "text": "If we call it here, we can see that we get a 0 division error"
            },
            {
              "seconds": 183,
              "text": "and it says that the above exception was the direct cause"
            },
            {
              "seconds": 187,
              "text": "of the following exception, the arithmetic error."
            },
            {
              "seconds": 190,
              "text": "So the 0 division error caused reraised the arithmetic error from that 0 division error."
            },
            {
              "seconds": 196,
              "text": "And if we inspect the __cause__ attribute of the exception"
            },
            {
              "seconds": 200,
              "text": "the exception that we get is bad math and it was caused by the 0 division error,"
            },
            {
              "seconds": 206,
              "text": "note that the context is also the same error there with the same exception,"
            },
            {
              "seconds": 210,
              "text": "but because we said raise this new exception from the original exception,"
            },
            {
              "seconds": 216,
              "text": "this is the original exception that we raised from the 0 division error."
            },
            {
              "seconds": 222,
              "text": "Let's look at the motivation for adding __traceback__."
            },
            {
              "seconds": 224,
              "text": "It says adding the __traceback__ attribute to exception values"
            },
            {
              "seconds": 227,
              "text": "makes all the exception information accessible from a single place."
            },
            {
              "seconds": 231,
              "text": "Python 3 also added __traceback__ to the exception."
            },
            {
              "seconds": 235,
              "text": "The reason why they did this was just to make it nice to have around."
            },
            {
              "seconds": 240,
              "text": "prior to Python 3, in order to get the traceback"
            },
            {
              "seconds": 243,
              "text": "you had to import the sys module and try and pull the traceback off of that."
            },
            {
              "seconds": 248,
              "text": "In Python 3, they're just going to give it to you"
            },
            {
              "seconds": 250,
              "text": "so we can look at the traceback by just inspecting the __traceback__ attribute if we need to."
            },
            {
              "seconds": 256,
              "text": "This might be useful for low-level logging or figuring out what your issues are,"
            },
            {
              "seconds": 260,
              "text": "if you need to dig into them."
            },
            {
              "seconds": 263,
              "text": "One thing to note is that because the exception contains the traceback"
            },
            {
              "seconds": 267,
              "text": "and that can have variable state in Python 3, there is an explicit decision"
            },
            {
              "seconds": 270,
              "text": "to actually remove exception variables following the exception block."
            },
            {
              "seconds": 277,
              "text": "So here's the exception block in here and in Python 3"
            },
            {
              "seconds": 280,
              "text": "we have access to the e variable inside of that."
            },
            {
              "seconds": 284,
              "text": "In Python 2, the e variable sits around afterwards."
            },
            {
              "seconds": 287,
              "text": "But in Python 3, if we try to inspect that e following our exception block, that indented block"
            },
            {
              "seconds": 294,
              "text": "we will not have it anymore, so this is cleaned up to not leak information."
            },
            {
              "seconds": 297,
              "text": "Just one thing to be aware of."
            },
            {
              "seconds": 299,
              "text": "Let's look at some suggestions for exception handling."
            },
            {
              "seconds": 302,
              "text": "Mistake one suggestion is to make your own specific exceptions"
            },
            {
              "seconds": 305,
              "text": "and this just helps readability and discoverability"
            },
            {
              "seconds": 308,
              "text": "rather than gripping through a code base with a lot of key error or index error."
            },
            {
              "seconds": 313,
              "text": "If you have something that's specific to your code and is named specifically,"
            },
            {
              "seconds": 318,
              "text": "it makes it easier to find and easier to debug."
            },
            {
              "seconds": 321,
              "text": "Another suggestion is to be specific about what exceptions you handle."
            },
            {
              "seconds": 325,
              "text": "So if you've got to try statement don't just put any exception after it"
            },
            {
              "seconds": 329,
              "text": "be very specific about the exceptions you handle."
            },
            {
              "seconds": 331,
              "text": "A general rule of thumb in Python is we want to only handle exceptions"
            },
            {
              "seconds": 336,
              "text": "that we know that we can recover from"
            },
            {
              "seconds": 338,
              "text": "and so these two sort of go hand-in-hand"
            },
            {
              "seconds": 340,
              "text": "if we can only recover from certain exceptions, just catch those exceptions."
            },
            {
              "seconds": 344,
              "text": "don't be general and catch any exception."
            },
            {
              "seconds": 346,
              "text": "So to summarize, exceptions are made a little bit nicer in Python."
            },
            {
              "seconds": 350,
              "text": "You can raise exceptions from other ones."
            },
            {
              "seconds": 353,
              "text": "You have the context of where the exception happened, and again in Python,"
            },
            {
              "seconds": 357,
              "text": "we want to be very specific and only handle what we can"
            },
            {
              "seconds": 360,
              "text": "so we've got a couple suggestions for best practices for exception handling."
            },
            {
              "seconds": 364,
              "text": "Hopefully, this helps you be better"
            },
            {
              "seconds": 366,
              "text": "and make your code a little bit more clear and more robust to failures."
            }
          ]
        },
        {
          "lecture_id": 121002,
          "lecture_title": "Walk-through: Exceptions",
          "vimeo_id": 7111936806400671,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video, we're going to look at exception test, open that up in an editor."
            },
            {
              "seconds": 4,
              "text": "Let's read about the problem, the first part says"
            },
            {
              "seconds": 7,
              "text": "define a customized exception color error that subclasses runtime error."
            },
            {
              "seconds": 11,
              "text": "This is pretty straightforward, we just make a new class"
            },
            {
              "seconds": 16,
              "text": "called color error and we're going to subclass runtime error."
            },
            {
              "seconds": 20,
              "text": "We don't have to do anything else, we can just pass for the body of that."
            },
            {
              "seconds": 23,
              "text": "The reason why one might want to define their own class of exceptions"
            },
            {
              "seconds": 27,
              "text": "is so that they can handle those in a special way in their application"
            },
            {
              "seconds": 31,
              "text": "and it makes looking for them and their application a lot easier."
            },
            {
              "seconds": 35,
              "text": "The next part says create a function err_wrap that takes a function fn *args and **kwargs."
            },
            {
              "seconds": 42,
              "text": "It should call and return the result of invoking the function"
            },
            {
              "seconds": 45,
              "text": "with the arguments and the keyword arguments"
            },
            {
              "seconds": 47,
              "text": "if an exception is raised it will use the raise from exception chaining"
            },
            {
              "seconds": 51,
              "text": "to wrap the error with a color error."
            },
            {
              "seconds": 54,
              "text": "Okay, so this is taking advantage of higher order functions in Python"
            },
            {
              "seconds": 57,
              "text": "and we can pass functions in as parameters to other functions"
            },
            {
              "seconds": 61,
              "text": "we're going to say def err_wrap and it's going to take a function."
            },
            {
              "seconds": 65,
              "text": "It's going to take variable positional arguments,"
            },
            {
              "seconds": 67,
              "text": "so *args and **kwargs and we're going to return the result"
            },
            {
              "seconds": 71,
              "text": "of calling function *args with **kwargs here,"
            },
            {
              "seconds": 76,
              "text": "but we don't just want to return this"
            },
            {
              "seconds": 78,
              "text": "we want to wrap it and make sure that if there is an exception in here"
            },
            {
              "seconds": 81,
              "text": "that we catch that exception,"
            },
            {
              "seconds": 83,
              "text": "so I'm just going to say try except exception as e"
            },
            {
              "seconds": 87,
              "text": "and then if I actually got an exception in here"
            },
            {
              "seconds": 90,
              "text": "rather than raising that exception I'm going to wrap it."
            },
            {
              "seconds": 93,
              "text": "So I'm going to say raise color error from e,"
            },
            {
              "seconds": 97,
              "text": "what that will do is it will wrap color error from e"
            },
            {
              "seconds": 101,
              "text": "and there will be a context in there that will point to the original exception"
            },
            {
              "seconds": 105,
              "text": "so we can run this and see if it works."
            },
            {
              "seconds": 112,
              "text": "It looks like it works, let's take a brief moment to look at the code"
            },
            {
              "seconds": 115,
              "text": "and see what it is actually testing."
            },
            {
              "seconds": 118,
              "text": "Here we're calling err wrap with the lambda that simply adds to numbers"
            },
            {
              "seconds": 122,
              "text": "and it asserts that that result works."
            },
            {
              "seconds": 125,
              "text": "Here we're calling err wrap with a lambda that divides twonumbers"
            },
            {
              "seconds": 128,
              "text": "and it's doing division by 0 and it's asserting the it raises a color error"
            },
            {
              "seconds": 133,
              "text": "and then later on the context, the context manager object here"
            },
            {
              "seconds": 139,
              "text": "has a value attribute which is the actual error"
            },
            {
              "seconds": 141,
              "text": "and on that there is a context which is zero division error."
            },
            {
              "seconds": 145,
              "text": "So the real error was the zero division error,"
            },
            {
              "seconds": 147,
              "text": "but it got wrapped with color error."
            },
            {
              "seconds": 150,
              "text": "Same thing down here below."
            },
            {
              "seconds": 152,
              "text": "We're making a function called raise 2 that just raises a key error,"
            },
            {
              "seconds": 155,
              "text": "and we're calling raise 2 and we're asserting that color error is raised"
            },
            {
              "seconds": 160,
              "text": "but inside the wrapped context is key error,"
            },
            {
              "seconds": 164,
              "text": "so hopefully this gives you some insight into how to do wrapping in Python 3."
            },
            {
              "seconds": 170,
              "text": "This will help finding errors a little bit easier"
            },
            {
              "seconds": 174,
              "text": "and you can make them specific to your code if you'd like to."
            }
          ]
        },
        {
          "lecture_id": 121003,
          "lecture_title": "Extended Unpacking",
          "vimeo_id": 7111651321251242,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video we'll talk about extended iterable unpacking,"
            },
            {
              "seconds": 3,
              "text": "it came about in Python 3, this is a nice feature."
            },
            {
              "seconds": 6,
              "text": "Let's dive into what that means"
            },
            {
              "seconds": 9,
              "text": "because extended iterable unpacking is quite a mouthful."
            },
            {
              "seconds": 11,
              "text": "Here's a simple motivation from the pep"
            },
            {
              "seconds": 14,
              "text": "if I have an iterable here, range 5"
            },
            {
              "seconds": 18,
              "text": "and we know in Python 3 that range 5 is lazy,"
            },
            {
              "seconds": 22,
              "text": "it only gives us values as we iterate over it"
            },
            {
              "seconds": 25,
              "text": "unlike in Python 2 where it returns a list."
            },
            {
              "seconds": 28,
              "text": "I might want to say, I want the first and last value"
            },
            {
              "seconds": 31,
              "text": "but I don't care about the middle values"
            },
            {
              "seconds": 34,
              "text": "or I want what's in between the first and last values,"
            },
            {
              "seconds": 36,
              "text": "this pep allows us to do that,"
            },
            {
              "seconds": 38,
              "text": "I can say a,* b and then c"
            },
            {
              "seconds": 44,
              "text": "what this is going to do is it's going to say a gets the first value 0,"
            },
            {
              "seconds": 47,
              "text": "c is going to get the last value and *b gets what's ever left over,"
            },
            {
              "seconds": 53,
              "text": "it unpacks those and note that this type here is a list,"
            },
            {
              "seconds": 57,
              "text": "it's going to put those into a list."
            },
            {
              "seconds": 60,
              "text": "A couple of notes here, this catch-all or starred expression is a list, it's not a tuple"
            },
            {
              "seconds": 65,
              "text": "if you're familiar with *args, when you're invoking functions"
            },
            {
              "seconds": 69,
              "text": "and you look at the value of your args inside of your functions,"
            },
            {
              "seconds": 74,
              "text": "it's going to be a tuple, in this case, it's a list."
            },
            {
              "seconds": 77,
              "text": "You can only have one starred expression,"
            },
            {
              "seconds": 80,
              "text": "if you don't have these guys nested, so it's possible to nest them,"
            },
            {
              "seconds": 83,
              "text": "and then in this little nested guy you can have a starred expression"
            },
            {
              "seconds": 86,
              "text": "but you can't have a *b *c and then d because it's ambiguous to Python"
            },
            {
              "seconds": 92,
              "text": "and Python wants us to be explicit."
            },
            {
              "seconds": 94,
              "text": "Another thing to note is that this deals with the left side of assignment."
            },
            {
              "seconds": 98,
              "text": "So this is unpacking and unpacking tuples or sequences"
            },
            {
              "seconds": 102,
              "text": "deals with the left side of assignment typically."
            },
            {
              "seconds": 104,
              "text": "Let's do a quick unpacking review,"
            },
            {
              "seconds": 106,
              "text": "if you're not familiar with unpacking"
            },
            {
              "seconds": 110,
              "text": "or this feature that's in Python, that's pretty cool."
            },
            {
              "seconds": 112,
              "text": "This is all Python 2 compliant as well, so all this code works in Python 2 on this slide"
            },
            {
              "seconds": 116,
              "text": "if I've got a variable a and a variable b,"
            },
            {
              "seconds": 118,
              "text": "you may or may not know that I can swap them easily simply by doing this,"
            },
            {
              "seconds": 124,
              "text": "a,b = b,a. What that's doing under the covers is it is saying"
            },
            {
              "seconds": 128,
              "text": "on this side here, I'm actually making a tuple here"
            },
            {
              "seconds": 131,
              "text": "and I'm doing an unpacking operation here and I'm saying"
            },
            {
              "seconds": 134,
              "text": "take the variable a and make it point to whatever the value of b was in this tuple"
            },
            {
              "seconds": 139,
              "text": "and make d point to whatever a is in this tuple."
            },
            {
              "seconds": 143,
              "text": "Now, it might seem confusing, how does it keep track of that,"
            },
            {
              "seconds": 145,
              "text": "but under the covers what's happening is"
            },
            {
              "seconds": 148,
              "text": "this tuple has references to the values of b and a, not the actual variables."
            },
            {
              "seconds": 153,
              "text": "So it has references to those values"
            },
            {
              "seconds": 155,
              "text": "and then you're just pulling those out into new variables. Pretty cool."
            },
            {
              "seconds": 159,
              "text": "Okay, this next example here,"
            },
            {
              "seconds": 162,
              "text": "I have a list of names fred, george, luna and harry"
            },
            {
              "seconds": 166,
              "text": "and I can do something like this where I say"
            },
            {
              "seconds": 168,
              "text": "first, rest is equal to names 0 and names 1:"
            },
            {
              "seconds": 173,
              "text": "and this slice at the end here gives me names from index position 1 to the end."
            },
            {
              "seconds": 180,
              "text": "When we look at first and rest we'll know that this first guy is a scalar."
            },
            {
              "seconds": 184,
              "text": "he's the fred guy, but the second guy here"
            },
            {
              "seconds": 188,
              "text": "is a list of those names or the sub guys there."
            },
            {
              "seconds": 192,
              "text": "This third example here in person,"
            },
            {
              "seconds": 194,
              "text": "we have a tuple that has a nested tuple in it."
            },
            {
              "seconds": 197,
              "text": "So it's got a name and age, some location"
            },
            {
              "seconds": 199,
              "text": "and then it's got a tuple that presumably is dad and mom"
            },
            {
              "seconds": 204,
              "text": "so we can do something like this where we do an unpacking on the left hand side"
            },
            {
              "seconds": 208,
              "text": "where we say name, age, location and then in parentheses here"
            },
            {
              "seconds": 211,
              "text": "dad mom is equal to person."
            },
            {
              "seconds": 214,
              "text": "What that will do is it will create a variable for each of those guys"
            },
            {
              "seconds": 216,
              "text": "and it will understand because dad and mom is in parentheses there"
            },
            {
              "seconds": 220,
              "text": "it wants us to unpack that tuple of Arthur and Molly"
            },
            {
              "seconds": 225,
              "text": "and pull those into the variable dad and mom."
            },
            {
              "seconds": 227,
              "text": "Here below, you'll see that I have name and dad"
            },
            {
              "seconds": 230,
              "text": "and this is actually a tuple because it's got a comma between those"
            },
            {
              "seconds": 233,
              "text": "and so we see that we have those values pulled out."
            },
            {
              "seconds": 237,
              "text": "So that's unpacking, this works in Python 2 and 3."
            },
            {
              "seconds": 240,
              "text": "Here's another example of unpacking, this would work in Python 2"
            },
            {
              "seconds": 244,
              "text": "were it not for this fstring here, but I can do the same thing"
            },
            {
              "seconds": 247,
              "text": "you may or may not know that if I'm in a for loop, a for loop creates variables,"
            },
            {
              "seconds": 251,
              "text": "and in this case, I'm unpacking those variables because I'm using enumerate,"
            },
            {
              "seconds": 256,
              "text": "enumerate returns the index position and the items of enumeration."
            },
            {
              "seconds": 259,
              "text": "In this case, the items of enumeration are tuples"
            },
            {
              "seconds": 263,
              "text": "fred and age and george and the age,"
            },
            {
              "seconds": 265,
              "text": "and so if I want to unpack fred and the age,"
            },
            {
              "seconds": 268,
              "text": "I need to put parentheses around those guys to pull them out as variables."
            },
            {
              "seconds": 273,
              "text": "So inside of my for loop here, I have a variable called i that points to the index."
            },
            {
              "seconds": 279,
              "text": "And in this case, I told it to start at 1 rather than the default of 0"
            },
            {
              "seconds": 282,
              "text": "and I also have a variable called name and age"
            },
            {
              "seconds": 285,
              "text": "and so I'm just going to print those out,"
            },
            {
              "seconds": 287,
              "text": "I'm going to print out the index, the name, intense basis and the age here."
            },
            {
              "seconds": 292,
              "text": "Okay, so this is the Python 3 stuff that's new."
            },
            {
              "seconds": 295,
              "text": "We've got some names again and I'm going to say first"
            },
            {
              "seconds": 298,
              "text": "and then I'm going to say *rest, so what that does here"
            },
            {
              "seconds": 302,
              "text": "is it says I want first to unpack the value at the start"
            },
            {
              "seconds": 306,
              "text": "and star rest to take a list of everything else that's on the end"
            },
            {
              "seconds": 310,
              "text": "and we'll see that it's putting that into a list here."
            },
            {
              "seconds": 313,
              "text": "Again, this is Python 3 syntax,"
            },
            {
              "seconds": 315,
              "text": "alternatively if I've got this nested tuple like I had before"
            },
            {
              "seconds": 318,
              "text": "with fred 20 England and then the nested tuple of Arthur and Molly"
            },
            {
              "seconds": 323,
              "text": "I can say *ignore, I want to ignore or put everything at the front"
            },
            {
              "seconds": 327,
              "text": "in this ignore list here and then I'm going to unpack dad and mom there,"
            },
            {
              "seconds": 333,
              "text": "that will give me a variable called dad and mom"
            },
            {
              "seconds": 335,
              "text": "and we'll actually create a variable called ignore that has the rest in it."
            },
            {
              "seconds": 338,
              "text": "I can also use multiple stars here if were nested, like I said here"
            },
            {
              "seconds": 342,
              "text": "so I'm going to say ignore everything at the start,"
            },
            {
              "seconds": 345,
              "text": "except I'm going to have some thing at the end which is this tuple,"
            },
            {
              "seconds": 349,
              "text": "note that what's inside of this tuple here is two strings"
            },
            {
              "seconds": 354,
              "text": "and in Python, strings are sliceable, and so I can say d first,*d"
            },
            {
              "seconds": 361,
              "text": "and that's going to take Arthur here"
            },
            {
              "seconds": 363,
              "text": "and it's going to pull off the first thing of Arthur which is a,"
            },
            {
              "seconds": 367,
              "text": "so d first, the value of d first is a,"
            },
            {
              "seconds": 370,
              "text": "d is going to be a list with r t h u r in it,"
            },
            {
              "seconds": 375,
              "text": "m first is going to be the same, the first letter of Molly,"
            },
            {
              "seconds": 378,
              "text": "capital M and the *m will be a list with the rest of that in there."
            },
            {
              "seconds": 382,
              "text": "One thing that might bite you, you need to be aware of"
            },
            {
              "seconds": 385,
              "text": "you can't just have a star in front of a variable by itself."
            },
            {
              "seconds": 388,
              "text": "You're going to get an error that looks like this"
            },
            {
              "seconds": 390,
              "text": "that says syntax error, starred assignment,"
            },
            {
              "seconds": 392,
              "text": "target must be in a list or a tuple."
            },
            {
              "seconds": 395,
              "text": "A fix for that is easy, you can just put a comma at the end there"
            },
            {
              "seconds": 399,
              "text": "and in this case, this is sort of a no op here,"
            },
            {
              "seconds": 401,
              "text": "but if you wanted to do that you could"
            },
            {
              "seconds": 404,
              "text": "or if you had something over here that's iterable"
            },
            {
              "seconds": 406,
              "text": "that isn't already a list, you could create a list easily by doing that."
            },
            {
              "seconds": 411,
              "text": "Of course, I would want to be a little bit more explicit"
            },
            {
              "seconds": 414,
              "text": "if I was doing this, I would say people is equal to list of names."
            },
            {
              "seconds": 420,
              "text": "To me that's more explicit and easier to read,"
            },
            {
              "seconds": 424,
              "text": "but you could do this if you wanted to."
            },
            {
              "seconds": 426,
              "text": "We've talked in this video about this new unpacking syntax"
            },
            {
              "seconds": 430,
              "text": "that allows you to put stars in the left hand side of an unpacked operation,"
            },
            {
              "seconds": 435,
              "text": "it's pretty cool and allows you to basically clob what's in a sequence into a list. 07:22 Hopefully this is useful to you and you can find places"
            },
            {
              "seconds": 445,
              "text": "where this will make your code easier to read and use."
            }
          ]
        },
        {
          "lecture_id": 121004,
          "lecture_title": "Walk-through: Extended Unpacking",
          "vimeo_id": 7111273059021015,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at the unpack test assignment."
            },
            {
              "seconds": 3,
              "text": "I'm using PyCharm so I'm going to expand my directory here"
            },
            {
              "seconds": 6,
              "text": "and click on unpack test."
            },
            {
              "seconds": 10,
              "text": "We can see at the bottom here that when we execute this file,"
            },
            {
              "seconds": 13,
              "text": "it will try and run pytest against it"
            },
            {
              "seconds": 15,
              "text": "and we can see that PyCharm is complaining about various names that are missing."
            },
            {
              "seconds": 19,
              "text": "Let's read the assignment and see what we need to do."
            },
            {
              "seconds": 21,
              "text": "It says given the tuple person, which is defined right here,"
            },
            {
              "seconds": 25,
              "text": "unpack the values into name, age and country."
            },
            {
              "seconds": 28,
              "text": "So person is a tuple with a string which appears to be the name"
            },
            {
              "seconds": 33,
              "text": "a number which looks like it's the age"
            },
            {
              "seconds": 36,
              "text": "and a string which appears to be a country."
            },
            {
              "seconds": 39,
              "text": "One way to do this would be to say name is equal to person 0, index position 0"
            },
            {
              "seconds": 44,
              "text": "and age is equal to person 1, and country is equal to person 2."
            },
            {
              "seconds": 52,
              "text": "Let's run and make sure it works,"
            },
            {
              "seconds": 54,
              "text": "note that because I just opened this and I had previously run vm.test"
            },
            {
              "seconds": 57,
              "text": "If I say run here, it's not going to run this file"
            },
            {
              "seconds": 60,
              "text": "a couple things I can do, I can right click here and say run unpack test."
            },
            {
              "seconds": 64,
              "text": "I can also run it from over here by right clicking on the file"
            },
            {
              "seconds": 68,
              "text": "and running it over there."
            },
            {
              "seconds": 70,
              "text": "There's also a command line shortcut, it's control shift F10."
            },
            {
              "seconds": 73,
              "text": "Let's try and do that and see what happens when we run this."
            },
            {
              "seconds": 75,
              "text": "Okay, so it appears that I got to line 21."
            },
            {
              "seconds": 82,
              "text": "There is one failure pytest ran and so it appeared"
            },
            {
              "seconds": 86,
              "text": "that we made this first part work."
            },
            {
              "seconds": 88,
              "text": "Now, we really didn't do an unpack operation"
            },
            {
              "seconds": 91,
              "text": "what an unpack operation does is it says"
            },
            {
              "seconds": 93,
              "text": "I know that a sequence contains a certain amount of items"
            },
            {
              "seconds": 96,
              "text": "and I want to in a single assignment"
            },
            {
              "seconds": 99,
              "text": "with commas in between the variable names pull those out."
            },
            {
              "seconds": 102,
              "text": "So this is how we would do the unpack here."
            },
            {
              "seconds": 105,
              "text": "We would say name, age, country is equal to person,"
            },
            {
              "seconds": 111,
              "text": "let's just run that again to make sure it still works."
            },
            {
              "seconds": 113,
              "text": "Okay, we still get the name around the next part."
            },
            {
              "seconds": 116,
              "text": "So that's how we do basic unpacking and this works in Python 2 & 3."
            },
            {
              "seconds": 119,
              "text": "Let's look at extended unpacking,"
            },
            {
              "seconds": 121,
              "text": "extended unpacking remember is where we put a star in front of a variable."
            },
            {
              "seconds": 125,
              "text": "So it says use unpacking to get the first letter of the name, store the result in first."
            },
            {
              "seconds": 130,
              "text": "So one way to do this is just to say name is a string"
            },
            {
              "seconds": 134,
              "text": "and let's pull off the first character, first is equal to that."
            },
            {
              "seconds": 136,
              "text": "If we want to do this using unpacking though or extended unpacking,"
            },
            {
              "seconds": 140,
              "text": "one way would be to say first, second, third"
            },
            {
              "seconds": 147,
              "text": "but we don't know how many, perhaps we don't know,"
            },
            {
              "seconds": 150,
              "text": "in this case we do know how many characters there are"
            },
            {
              "seconds": 152,
              "text": "but it'd be kind of annoying to type all those out"
            },
            {
              "seconds": 154,
              "text": "and if the length is dynamic, it's not going to work."
            },
            {
              "seconds": 158,
              "text": "What Python allows us to do is put a little star in front of the next variable"
            },
            {
              "seconds": 161,
              "text": "and just say something like rest"
            },
            {
              "seconds": 163,
              "text": "and what's going to happen here is first will be the first item of the sequence"
            },
            {
              "seconds": 167,
              "text": "and rest will be a list containing the rest of the items."
            },
            {
              "seconds": 170,
              "text": "I'm going to use a feature of PyCharm here to just put a breakpoint in here"
            },
            {
              "seconds": 177,
              "text": "and now I'm going to click the bug up here and let's inspect what's going on."
            },
            {
              "seconds": 181,
              "text": "I want to look at rest and it looks like rest is a list and it has a length of 0."
            },
            {
              "seconds": 193,
              "text": "Let's see what name is or first, first is c."
            },
            {
              "seconds": 198,
              "text": "Okay, so it looked like it didn't pull out rest"
            },
            {
              "seconds": 203,
              "text": "or PyCharm thinks that it's an empty list, which is interesting."
            },
            {
              "seconds": 207,
              "text": "Oh, that's because I have an error."
            },
            {
              "seconds": 210,
              "text": "I'm going to hit play and just fix my error here."
            },
            {
              "seconds": 213,
              "text": "The problem is because I gave it a list of length 1 because I left the 0 up here."
            },
            {
              "seconds": 218,
              "text": "Let's get rid of that and let's debug it again."
            },
            {
              "seconds": 223,
              "text": "Okay, in this case now rest is a list"
            },
            {
              "seconds": 225,
              "text": "and it has each of the characters in there."
            },
            {
              "seconds": 228,
              "text": "So when you put a star in front of it, that's just going to make a list"
            },
            {
              "seconds": 231,
              "text": "and put the remaining items in there."
            },
            {
              "seconds": 233,
              "text": "And because a list can be variable length in Python"
            },
            {
              "seconds": 236,
              "text": "this will support arbitrary length of names there."
            },
            {
              "seconds": 240,
              "text": "Okay the final assignment here is"
            },
            {
              "seconds": 245,
              "text": "unpack the characters from name into a list called letters."
            },
            {
              "seconds": 250,
              "text": "So one way to do this, you could say letters is equal to list of name"
            },
            {
              "seconds": 254,
              "text": "and that should work."
            },
            {
              "seconds": 260,
              "text": "It appears to work, but we want to use unpacking to this,"
            },
            {
              "seconds": 264,
              "text": "in particular, we want to use extended unpacking."
            },
            {
              "seconds": 266,
              "text": "So let's try and do it extended unpacking has remember that little star in front of it"
            },
            {
              "seconds": 271,
              "text": "*letters is equal to name."
            },
            {
              "seconds": 275,
              "text": "Let's run that and see what happens."
            },
            {
              "seconds": 279,
              "text": "I get a syntax error starred assignment target must be in a list or a tuple."
            },
            {
              "seconds": 284,
              "text": "So what that means is that I can't have a standalone variable with a star in front of it,"
            },
            {
              "seconds": 289,
              "text": "Python 3 requires that I put that comma right there"
            },
            {
              "seconds": 292,
              "text": "to indicate that we're going to unpack this into a list."
            },
            {
              "seconds": 297,
              "text": "Let's try it now and it looks like we get the right thing."
            },
            {
              "seconds": 300,
              "text": "So hopefully you've learned a little bit about unpacking"
            },
            {
              "seconds": 306,
              "text": "and extended unpacking in Python 3."
            },
            {
              "seconds": 308,
              "text": "This is a great way to pull out either the first or the last of a sequence."
            },
            {
              "seconds": 312,
              "text": "Remember that when you use the extended unpacking"
            },
            {
              "seconds": 315,
              "text": "with a star in front of something,"
            },
            {
              "seconds": 317,
              "text": "there has to be at least more than one variable"
            },
            {
              "seconds": 320,
              "text": "or you have to put a comma following it,"
            },
            {
              "seconds": 322,
              "text": "also recall that when you use extended unpacking"
            },
            {
              "seconds": 324,
              "text": "with a star in front of the variable name, that variable will be turned into a list."
            }
          ]
        },
        {
          "lecture_id": 121005,
          "lecture_title": "Unpacking Generalizations",
          "vimeo_id": 7111565192908521,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to talk about additional unpacking generalizations."
            },
            {
              "seconds": 4,
              "text": "This came out in pep 448 which is in Python 3.5."
            },
            {
              "seconds": 8,
              "text": "The pep reads extend usages of the * iterable unpacking operator"
            },
            {
              "seconds": 13,
              "text": "and ** dictionary unpacking operators to allow unpacking"
            },
            {
              "seconds": 16,
              "text": "in more positions an arbitrary number of times."
            },
            {
              "seconds": 20,
              "text": "Let's look at some examples here."
            },
            {
              "seconds": 22,
              "text": "If I had a dictionary and I wanted to merge it with another one"
            },
            {
              "seconds": 26,
              "text": "in Python 2 and prior to Python 3.5 I would have to do something like this."
            },
            {
              "seconds": 32,
              "text": "I would create a dictionary here called thing_colors"
            },
            {
              "seconds": 35,
              "text": "which is mapping some object to the color."
            },
            {
              "seconds": 38,
              "text": "So apple is red, pumpkin is orange."
            },
            {
              "seconds": 40,
              "text": "And if I wanted to merge this into a new dictionary with more colors"
            },
            {
              "seconds": 44,
              "text": "one way I could do it is create the new dictionary here called more_colors"
            },
            {
              "seconds": 48,
              "text": "and then I could say update more colors with thing_colors"
            },
            {
              "seconds": 51,
              "text": "that would insert thing_colors into more colors."
            },
            {
              "seconds": 54,
              "text": "And then I could update more colors with other values there,"
            },
            {
              "seconds": 57,
              "text": "note that in this case apple I'm overriding it with green."
            },
            {
              "seconds": 60,
              "text": "This pep allows us to do something like this"
            },
            {
              "seconds": 63,
              "text": "where I say thing_colors is equal to apples is red and pumpkin is orange"
            },
            {
              "seconds": 68,
              "text": "and more_colors is equal to,"
            },
            {
              "seconds": 70,
              "text": "and then I make a literal dictionary but inside of that I put ** thing_colors in there."
            },
            {
              "seconds": 75,
              "text": "What that does is it unpacks the keys and values from that dictionary"
            },
            {
              "seconds": 78,
              "text": "and copies them into more_colors."
            },
            {
              "seconds": 81,
              "text": "After that, I'm going to insert bike is blue and apple is green,"
            },
            {
              "seconds": 84,
              "text": "note that apple here is a repeated key"
            },
            {
              "seconds": 88,
              "text": "and so because this apple comes after, where after means further to the right"
            },
            {
              "seconds": 94,
              "text": "in my literal dictionary here, then this apple mapping to green"
            },
            {
              "seconds": 98,
              "text": "will overwrite the apple that is red."
            },
            {
              "seconds": 102,
              "text": "But note that in more colors here, I have pumpkin as orange in there."
            },
            {
              "seconds": 107,
              "text": "Also note that Python 3.6 the order of dictionary insertion is remembered"
            },
            {
              "seconds": 112,
              "text": "apple was the first key that I put in followed by pumpkin"
            },
            {
              "seconds": 117,
              "text": "and note that in more colors apple is first, pumpkin is second and then bike is third,"
            },
            {
              "seconds": 121,
              "text": "because this key was already in there, it stayed in the first position,"
            },
            {
              "seconds": 124,
              "text": "even though the value is updated."
            },
            {
              "seconds": 127,
              "text": "So an unpack can be in any location in the dictionary"
            },
            {
              "seconds": 130,
              "text": "in the previous example, it was at the very start"
            },
            {
              "seconds": 132,
              "text": "but it can be at the end or you can have actually multiple unpacks in a dictionary"
            },
            {
              "seconds": 138,
              "text": "Here I say bike is blue, apple is green"
            },
            {
              "seconds": 141,
              "text": "and then we're going to unpack thing_colors in there,"
            },
            {
              "seconds": 144,
              "text": "in this case the apple that's red from there overrides the apple that is green."
            },
            {
              "seconds": 149,
              "text": "But note that bike and apple are in first and second position"
            },
            {
              "seconds": 153,
              "text": "because they were in the original dictionary."
            },
            {
              "seconds": 156,
              "text": "Another nice feature of this change is"
            },
            {
              "seconds": 159,
              "text": "it allows us to have multiple ** operations in function calls here."
            },
            {
              "seconds": 163,
              "text": "Note that here I'm calling this function print args,"
            },
            {
              "seconds": 166,
              "text": "which takes variable number of keyword arguments"
            },
            {
              "seconds": 169,
              "text": "and I'm saying I want to pass in thing_colors"
            },
            {
              "seconds": 173,
              "text": "unpacked and also more_colors unpacked."
            },
            {
              "seconds": 175,
              "text": "This one didn't work prior to Python 3.5,"
            },
            {
              "seconds": 178,
              "text": "but in Python 3.5 and above you can do syntax like this"
            },
            {
              "seconds": 181,
              "text": "and note that I'm putting in another named parameter here"
            },
            {
              "seconds": 185,
              "text": "with a value in between those."
            },
            {
              "seconds": 187,
              "text": "One thing to be aware of though, is that you can't repeat names in a call."
            },
            {
              "seconds": 191,
              "text": "So this might be a gotcha here."
            },
            {
              "seconds": 193,
              "text": "Here I've got thing colors and I've got apple is red here,"
            },
            {
              "seconds": 196,
              "text": "I've also got more colors apple is green"
            },
            {
              "seconds": 199,
              "text": "and if I call this with thing_colors and more_colors with these repeated keys,"
            },
            {
              "seconds": 203,
              "text": "I get a type error. In the prior example on the previous slide,"
            },
            {
              "seconds": 207,
              "text": "I didn't repeat that apple key and so I didn't get this error."
            },
            {
              "seconds": 211,
              "text": "So this is something you might need to be aware of if you're repeating those."
            },
            {
              "seconds": 214,
              "text": "Simple way to get around that is just to merge those dictionaries"
            },
            {
              "seconds": 218,
              "text": "before calling them in there, that's something that might happen."
            },
            {
              "seconds": 221,
              "text": "So that's the ** operation that allows us to unpack into dictionaries"
            },
            {
              "seconds": 226,
              "text": "and also use unpacking and function calls in more than one place if we want to."
            },
            {
              "seconds": 231,
              "text": "Let's look at the single star, single star allows us to create tuples."
            },
            {
              "seconds": 235,
              "text": "So here I've got name is equal to Matt."
            },
            {
              "seconds": 238,
              "text": "Remember that the string Matt is a sequence of characters here."
            },
            {
              "seconds": 243,
              "text": "And if I say *name, with a comma at the end here,"
            },
            {
              "seconds": 248,
              "text": "it's going to give me back a tuple."
            },
            {
              "seconds": 250,
              "text": "Note that I'm not doing this extended unpack operation,"
            },
            {
              "seconds": 253,
              "text": "there's no assignment here, so this is slightly different than the prior examples"
            },
            {
              "seconds": 258,
              "text": "where I would get back a list,"
            },
            {
              "seconds": 260,
              "text": "but this is saying I want you to take what's in the sequence and stick it into a tuple."
            },
            {
              "seconds": 264,
              "text": "This is also a case where you might need a comma"
            },
            {
              "seconds": 267,
              "text": "if I have name is equal to Matt and I just say *name on itself,"
            },
            {
              "seconds": 271,
              "text": "I get this error here, syntax error, can't use a star expression here."
            },
            {
              "seconds": 275,
              "text": "Here, I've got some examples of various ways we can use star expressions"
            },
            {
              "seconds": 279,
              "text": "and know that by default, these return a tuple"
            },
            {
              "seconds": 283,
              "text": "and I can actually string these together by putting a comma"
            },
            {
              "seconds": 286,
              "text": "and use multiple of them and here I have a tuple,"
            },
            {
              "seconds": 289,
              "text": "note that there's parentheses here"
            },
            {
              "seconds": 292,
              "text": "with all of the characters from name and last in there,"
            },
            {
              "seconds": 295,
              "text": "if I wanted to put those into a list,"
            },
            {
              "seconds": 298,
              "text": "I just put square brackets around those and that puts it into a list."
            },
            {
              "seconds": 303,
              "text": "Similarly, I can put it into a set, note that a set is not ordered,"
            },
            {
              "seconds": 306,
              "text": "so the order comes out a little different than what the order is in name and last."
            },
            {
              "seconds": 312,
              "text": "Here I've got a little function called summer"
            },
            {
              "seconds": 314,
              "text": "that just takes variable arguments and variable keyword arguments"
            },
            {
              "seconds": 317,
              "text": "and it's going to sum all the arguments that are passed in in positional locations"
            },
            {
              "seconds": 322,
              "text": "and it's also going to sum all the values"
            },
            {
              "seconds": 324,
              "text": "so it's not doing very much, it just accepts arbitrary number of arguments"
            },
            {
              "seconds": 327,
              "text": "and sums them if they are positional or values in keyword arguments,"
            },
            {
              "seconds": 333,
              "text": "let's look at some examples of calling this,"
            },
            {
              "seconds": 336,
              "text": "I can call it with 1, 2, 3, any number of positional arguments and it gives me 6."
            },
            {
              "seconds": 340,
              "text": "I can also call it with star list here and then a three following that,"
            },
            {
              "seconds": 345,
              "text": "and that's fine, Python 3.5 and above doesn't complain about that."
            },
            {
              "seconds": 350,
              "text": "Note that I can also have multiple stars here and this can be a list here,"
            },
            {
              "seconds": 354,
              "text": "it can be any sequence here, and I can have"
            },
            {
              "seconds": 358,
              "text": "however many stars I want to in that, if I want to,"
            },
            {
              "seconds": 360,
              "text": "and here I'm calling it with a star, a positional parameter"
            },
            {
              "seconds": 363,
              "text": "unpacking a dictionary here, a keyword parameter here"
            },
            {
              "seconds": 368,
              "text": "and another unpacked dictionary over here and that works as well."
            },
            {
              "seconds": 373,
              "text": "Little bit of the difference between this syntax"
            },
            {
              "seconds": 375,
              "text": "and the extended unpacking that we showed in another video,"
            },
            {
              "seconds": 379,
              "text": "here I've got name is equal to the string Matt."
            },
            {
              "seconds": 381,
              "text": "I can do the extended unpacking by doing an assignment here on the left-hand side"
            },
            {
              "seconds": 386,
              "text": "by saying *letters, I need the comma at the end there is equal to name"
            },
            {
              "seconds": 391,
              "text": "that makes a new variable called letters"
            },
            {
              "seconds": 393,
              "text": "and it is a list with the individual characters in it."
            },
            {
              "seconds": 396,
              "text": "Note that in this unpacking generalization,"
            },
            {
              "seconds": 399,
              "text": "which is different than the extended unpacking defined in this pep here,"
            },
            {
              "seconds": 403,
              "text": "I am not putting this on the left-hand side,"
            },
            {
              "seconds": 405,
              "text": "I need to put it on the right hand-side,"
            },
            {
              "seconds": 407,
              "text": "I put a star in front of it, a comma at the end"
            },
            {
              "seconds": 410,
              "text": "and I assign it to a variable and it gives me back a tuple here."
            },
            {
              "seconds": 414,
              "text": "So a little bit of a difference between those two,"
            },
            {
              "seconds": 416,
              "text": "if you need to create a list you can use this extended unpacking."
            },
            {
              "seconds": 421,
              "text": "Note that if I simply put square brackets around that"
            },
            {
              "seconds": 424,
              "text": "I will also get a list on the second example."
            },
            {
              "seconds": 428,
              "text": "This video talked about additional unpacking generalizations, which is pretty cool."
            },
            {
              "seconds": 433,
              "text": "If you want to create dictionaries from other dictionaries"
            },
            {
              "seconds": 437,
              "text": "or merge dictionaries or create tuples or lists or sets from sequences,"
            },
            {
              "seconds": 441,
              "text": "you can easily do this with this new syntax."
            },
            {
              "seconds": 444,
              "text": "You can also pass in multiple unpacking operations into function calls,"
            },
            {
              "seconds": 449,
              "text": "which is cool as well."
            }
          ]
        },
        {
          "lecture_id": 121006,
          "lecture_title": "Walk-through: Unpacking Generalizations",
          "vimeo_id": 7111125860689589,
          "subtitles": [
            {
              "seconds": 0,
              "text": "In this video, we're going to look at gen unpack test, so open that up in your editor."
            },
            {
              "seconds": 5,
              "text": "The first part says merging dictionaries given the coin value dictionary"
            },
            {
              "seconds": 10,
              "text": "create a new dictionary, new value, that has the coin value values"
            },
            {
              "seconds": 14,
              "text": "and has the following keys and values, so BCH entry and ETH entry,"
            },
            {
              "seconds": 18,
              "text": "use extended unpacking no dictionary methods or inserts."
            },
            {
              "seconds": 23,
              "text": "So I've got coin value right here,"
            },
            {
              "seconds": 25,
              "text": "it wants me to make a new dictionary below it called new value"
            },
            {
              "seconds": 31,
              "text": "and it needs to be a dictionary that has these new keys and also has the original keys."
            },
            {
              "seconds": 39,
              "text": "So in order to get the original keys without calling a dictionary method or using an insert"
            },
            {
              "seconds": 44,
              "text": "I can do this extended unpacking here"
            },
            {
              "seconds": 47,
              "text": "and I can just say coin value right there with the ** in front of it,"
            },
            {
              "seconds": 51,
              "text": "that's going to unpack the dictionary into this other dictionary"
            },
            {
              "seconds": 55,
              "text": "and then I can say BCH is 1650 and ETH is 1055."
            },
            {
              "seconds": 68,
              "text": "Let's give this a run see if it works."
            },
            {
              "seconds": 75,
              "text": "Okay, so I'm on the next one, so it looks like that worked there."
            },
            {
              "seconds": 79,
              "text": "So again, this is a nice way to unpack dictionaries into other dictionaries."
            },
            {
              "seconds": 84,
              "text": "And if you have multiple dictionaries, you can use multiple dictionaries here,"
            },
            {
              "seconds": 88,
              "text": "it's not limited to just one."
            },
            {
              "seconds": 90,
              "text": "Okay, the next part is create a set of the keys from new value by unpacking."
            },
            {
              "seconds": 95,
              "text": "Put the result in coins."
            },
            {
              "seconds": 99,
              "text": "So we want the keys of the new value guy in this coins guy,"
            },
            {
              "seconds": 104,
              "text": "so in order to get the keys of this we can use this extended unpacking operator"
            },
            {
              "seconds": 110,
              "text": "and just say I want * of new value"
            },
            {
              "seconds": 114,
              "text": "if we treat new value as a sequence, Python treats a dictionary as a sequence of keys."
            },
            {
              "seconds": 120,
              "text": "This should give us the keys."
            },
            {
              "seconds": 123,
              "text": "Let's run it and see if it works."
            },
            {
              "seconds": 132,
              "text": "Okay, it says I can't use a starred expression here."
            },
            {
              "seconds": 135,
              "text": "That's because I can't have a star by itself, I need to put a comma there at the end."
            },
            {
              "seconds": 138,
              "text": "Let's run it again."
            },
            {
              "seconds": 141,
              "text": "Okay, and now I got an error where it said the assertion failed"
            },
            {
              "seconds": 144,
              "text": "because I've got a tuple that's not equal to a set."
            },
            {
              "seconds": 147,
              "text": "Apparently I didn't read well enough that said create a set of the keys."
            },
            {
              "seconds": 151,
              "text": "So one way to create a set of them is to put this into a set."
            },
            {
              "seconds": 156,
              "text": "Let's try and run this and see if it works."
            },
            {
              "seconds": 162,
              "text": "Okay, the next part says create a list of the keys from the new value"
            },
            {
              "seconds": 167,
              "text": "and the other coins tuple, put the result in all coins."
            },
            {
              "seconds": 171,
              "text": "So we want to make a new variable called all coins"
            },
            {
              "seconds": 174,
              "text": "and it should have the keys from new value"
            },
            {
              "seconds": 178,
              "text": "and it should have the other coins tuple, what's in other coins, so here's new value"
            },
            {
              "seconds": 186,
              "text": "if we want the keys from that, we can just do that star to get the keys from the new value"
            },
            {
              "seconds": 191,
              "text": "and it wants it in the list, so we're going to say * new value,"
            },
            {
              "seconds": 200,
              "text": "and the other coins tuple."
            },
            {
              "seconds": 202,
              "text": "The other coins tuple is defined right here,"
            },
            {
              "seconds": 204,
              "text": "and if we just want to include that in here, we can just say"
            },
            {
              "seconds": 207,
              "text": "I'm going to start other coins include that as well."
            },
            {
              "seconds": 210,
              "text": "So again, this is a nice little syntax here."
            },
            {
              "seconds": 213,
              "text": "I'm saying in my list, I want to include this sequence here."
            },
            {
              "seconds": 217,
              "text": "And this is a dictionary, but we're pulling out the keys"
            },
            {
              "seconds": 220,
              "text": "and we're also including the sequence here unpacking it."
            },
            {
              "seconds": 224,
              "text": "This happens to be a tuple but we're going to pull out those guys"
            },
            {
              "seconds": 226,
              "text": "and insert them into our list."
            },
            {
              "seconds": 228,
              "text": "Let's run it and make sure it works."
            },
            {
              "seconds": 234,
              "text": "Okay, so we get no failures here."
            }
          ]
        },
        {
          "lecture_id": 121007,
          "lecture_title": "More laziness",
          "vimeo_id": 7111202655952659,
          "subtitles": [
            {
              "seconds": 1,
              "text": "One of the general themes of Python 3 is laziness"
            },
            {
              "seconds": 3,
              "text": "and so a lot of functions that returned lists in Python 2"
            },
            {
              "seconds": 7,
              "text": "are now lazy and behave as iterators,"
            },
            {
              "seconds": 11,
              "text": "either returning generators or views or something that is iterable."
            },
            {
              "seconds": 15,
              "text": "So map, filter and zip, and range are all examples of this."
            },
            {
              "seconds": 20,
              "text": "In Python 2, these returned lists, that is no longer the case,"
            },
            {
              "seconds": 23,
              "text": "they don't return lists anymore,"
            },
            {
              "seconds": 26,
              "text": "they are iterables that you can loop over."
            },
            {
              "seconds": 28,
              "text": "Similarly, a dictionary in Python 3 has keys, items and views,"
            },
            {
              "seconds": 34,
              "text": "these same methods existed in Python 2"
            },
            {
              "seconds": 36,
              "text": "but in Python 2 these returned lists of what was in there."
            },
            {
              "seconds": 40,
              "text": "These are now views, views are slightly special"
            },
            {
              "seconds": 43,
              "text": "in that they reflect any updates that are made to the dictionaries."
            },
            {
              "seconds": 46,
              "text": "So if you're looping over it and it's been updated in the meantime,"
            },
            {
              "seconds": 50,
              "text": "you should get some values that update as well."
            }
          ]
        },
        {
          "lecture_id": 121008,
          "lecture_title": "Strict ordering",
          "vimeo_id": 7111358924988233,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Another thing to be aware of is how Python handles comparisons in Python 3."
            },
            {
              "seconds": 5,
              "text": "In Python 2 you could compare an integer and a string"
            },
            {
              "seconds": 9,
              "text": "and Python would have some arbitrary, well, not arbitrary"
            },
            {
              "seconds": 12,
              "text": "but to humans perhaps seemingly arbitrary or confusing ordering for those."
            },
            {
              "seconds": 18,
              "text": "In Python 3 we're a little bit more strict"
            },
            {
              "seconds": 21,
              "text": "and Python is going to complain about those"
            },
            {
              "seconds": 23,
              "text": "if I try and compare those we'll get a type error"
            },
            {
              "seconds": 25,
              "text": "and it says that that operation is not supported between those two."
            },
            {
              "seconds": 28,
              "text": "So if you've got something that you need to compare"
            },
            {
              "seconds": 31,
              "text": "typically you'll use the sorted function and you'd pass a key function in there"
            },
            {
              "seconds": 37,
              "text": "and the key function would do some conversion"
            },
            {
              "seconds": 41,
              "text": "to another type that would allow you to compare these"
            },
            {
              "seconds": 44,
              "text": "so I could compare these as integers, I could also compare them as floats."
            },
            {
              "seconds": 47,
              "text": "I could compare them as string, that sort of thing."
            },
            {
              "seconds": 50,
              "text": "In this course, we've talked about dictionary ordering"
            },
            {
              "seconds": 53,
              "text": "and how in Python 3.6 as an implementation detail in the CPython interpreter"
            },
            {
              "seconds": 58,
              "text": "dictionaries maintain the key insertion order."
            },
            {
              "seconds": 61,
              "text": "In Python 3.7 this is actually going to be part of the language"
            },
            {
              "seconds": 65,
              "text": "what that means is that any other implementations of the interpreter"
            },
            {
              "seconds": 69,
              "text": "should follow suit and also sort keys as well."
            },
            {
              "seconds": 72,
              "text": "In Python 3.6 they don't necessarily have to"
            },
            {
              "seconds": 75,
              "text": "but people are taking advantage of that."
            },
            {
              "seconds": 77,
              "text": "They like the functionality so that, they like the functionality."
            },
            {
              "seconds": 79,
              "text": "In Python 3.7 this will be part of the language proper."
            },
            {
              "seconds": 82,
              "text": "We just got an example here of a dictionary that has name, age and address in there"
            },
            {
              "seconds": 85,
              "text": "note that name came in first and age and address"
            },
            {
              "seconds": 88,
              "text": "and we would print out the dictionary or if we loop over the keys,"
            },
            {
              "seconds": 91,
              "text": "we will get them back in the same order of that insertion."
            }
          ]
        },
        {
          "lecture_id": 121009,
          "lecture_title": "No more name leakage",
          "vimeo_id": 7111631230294463,
          "subtitles": [
            {
              "seconds": 0,
              "text": "Another thing that Python 3 gave us"
            },
            {
              "seconds": 2,
              "text": "is the lack of name leakage in comprehensions."
            },
            {
              "seconds": 6,
              "text": "This is something you may not be aware of"
            },
            {
              "seconds": 9,
              "text": "but variables were created during comprehension creation in Python 2"
            },
            {
              "seconds": 13,
              "text": "so an example shown here is I've got a variable called x"
            },
            {
              "seconds": 18,
              "text": "and I am looping over range 5 in a list comprehension"
            },
            {
              "seconds": 21,
              "text": "using that same variable name x."
            },
            {
              "seconds": 23,
              "text": "In Python 2, x after that list comprehension"
            },
            {
              "seconds": 28,
              "text": "would be the last value of the iteration."
            },
            {
              "seconds": 31,
              "text": "In Python 3 that's no longer the case,"
            },
            {
              "seconds": 33,
              "text": "these variables used in list comprehensions"
            },
            {
              "seconds": 36,
              "text": "don't go into your local or global name space,"
            },
            {
              "seconds": 39,
              "text": "they stay isolated in your list comprehension."
            },
            {
              "seconds": 42,
              "text": "So x will stay 10 in Python 3, a slight difference there."
            },
            {
              "seconds": 46,
              "text": "Okay, that wraps up most of the changes,"
            },
            {
              "seconds": 48,
              "text": "we've seen in bunch of the other videos in this course,"
            },
            {
              "seconds": 51,
              "text": "a bunch of the new features and functionalities of Python 3,"
            },
            {
              "seconds": 54,
              "text": "I just wanted to make sure that we talked about some of the other changes"
            },
            {
              "seconds": 57,
              "text": "that weren't easily found in peps or whatnot,"
            },
            {
              "seconds": 61,
              "text": "but are some things that you should be aware of."
            }
          ]
        },
        {
          "lecture_id": 121010,
          "lecture_title": "Walk-through: Other Changes",
          "vimeo_id": 7111433246559114,
          "subtitles": [
            {
              "seconds": 1,
              "text": "In this video we're going to look at other test.py."
            },
            {
              "seconds": 3,
              "text": "Open it up in your editor, let's run it and make sure that it runs."
            },
            {
              "seconds": 10,
              "text": "Okay, it looks like there's one failure,"
            },
            {
              "seconds": 13,
              "text": "that's because there's one test function, cool."
            },
            {
              "seconds": 15,
              "text": "Let's go through it. Lazy range, get the 100th item"
            },
            {
              "seconds": 19,
              "text": "from the vals variable, store it in the variable named hun."
            },
            {
              "seconds": 23,
              "text": "So we have a vals variable here"
            },
            {
              "seconds": 25,
              "text": "and it's range from 42 up to but not including two million"
            },
            {
              "seconds": 29,
              "text": "jumping by 32 and we want the 100th item here,"
            },
            {
              "seconds": 33,
              "text": "let's try and see if we can slice it off"
            },
            {
              "seconds": 36,
              "text": "hun is equal to vals 100, let's run that and see if it works."
            },
            {
              "seconds": 42,
              "text": "Okay, it looks like that worked,"
            },
            {
              "seconds": 45,
              "text": "so the range function even though it's lazy in Python 3,"
            },
            {
              "seconds": 49,
              "text": "allows you to do some slicing off of it,"
            },
            {
              "seconds": 52,
              "text": "let's do a map, find the 100th item from mapping fn,"
            },
            {
              "seconds": 56,
              "text": "which is this function right up here, to vals using the map function"
            },
            {
              "seconds": 61,
              "text": "store the result in hun function."
            },
            {
              "seconds": 63,
              "text": "So we say map we're going to map a function fn to vals."
            },
            {
              "seconds": 69,
              "text": "And we want the hundredth guy from that."
            },
            {
              "seconds": 72,
              "text": "So hun_fn is equal to that and let's see if we can slice off the hundredth guy."
            },
            {
              "seconds": 78,
              "text": "We'll run it and we get an error, map is not subscriptable."
            },
            {
              "seconds": 83,
              "text": "So even though range is lazy, map is also lazy,"
            },
            {
              "seconds": 88,
              "text": "but map doesn't support this index operation,"
            },
            {
              "seconds": 94,
              "text": "so what we would need to do to get the hundredth item"
            },
            {
              "seconds": 98,
              "text": "is do something like this,"
            },
            {
              "seconds": 103,
              "text": "seq is equal to the map of that,"
            },
            {
              "seconds": 107,
              "text": "and then for i in range 100 hun_fn equals next seq"
            },
            {
              "seconds": 121,
              "text": "let's see if that works"
            },
            {
              "seconds": 125,
              "text": "and I have a typo here let's change that and run it again."
            },
            {
              "seconds": 129,
              "text": "Okay, and so it looks like that works"
            },
            {
              "seconds": 132,
              "text": "so this just shows you something that you may need to do"
            },
            {
              "seconds": 135,
              "text": "in this case I need to jump through a little hoop"
            },
            {
              "seconds": 137,
              "text": "and call next 100 times to get this item from my sequence here"
            },
            {
              "seconds": 143,
              "text": "because it's lazy."
            },
            {
              "seconds": 145,
              "text": "Now there are pluses and minuses to this,"
            },
            {
              "seconds": 147,
              "text": "in Python 2 map materialized the list for you and you can slice a list"
            },
            {
              "seconds": 152,
              "text": "but if you have an arbitrary long list it might take a bunch of memory"
            },
            {
              "seconds": 154,
              "text": "so there are tradeoffs depending on what behavior"
            },
            {
              "seconds": 157,
              "text": "also I could course this into a list and do that"
            },
            {
              "seconds": 161,
              "text": "but again, we're going from 42 to 2 million"
            },
            {
              "seconds": 165,
              "text": "so this is pretty big I might not want to do that."
            },
            {
              "seconds": 169,
              "text": "Sorting, sort the nums list as if they were integers"
            },
            {
              "seconds": 173,
              "text": "store the result in ordered, hint look at the sorted and the keys parameter"
            },
            {
              "seconds": 178,
              "text": "look at sorted and the keys parameter,"
            },
            {
              "seconds": 180,
              "text": "so there's a built in function called sorted and it has a keys parameter."
            },
            {
              "seconds": 184,
              "text": "Okay, so in Python 2, Python 2 would allow us to sort lists with arbitrary types"
            },
            {
              "seconds": 191,
              "text": "and a Python 3 wants to be a little bit more explicit."
            },
            {
              "seconds": 193,
              "text": "So if we just say ordered = sorted nums, let's run that and see what happens"
            },
            {
              "seconds": 205,
              "text": "I get a type error, less than operation is not supported"
            },
            {
              "seconds": 208,
              "text": "between instances of string and int"
            },
            {
              "seconds": 211,
              "text": "that's because I've got a string in here and I've also got integers in here."
            },
            {
              "seconds": 214,
              "text": "So it wants me to sort these as if they were integers"
            },
            {
              "seconds": 218,
              "text": "so one thing we can do is we can cast them to integers"
            },
            {
              "seconds": 221,
              "text": "so we could make a little for loop or do a list comprehension and cast them to integers."
            },
            {
              "seconds": 227,
              "text": "But they key parameter in the sorted function"
            },
            {
              "seconds": 230,
              "text": "will allow us to apply an arbitrary function to an item that needs to be sorted"
            },
            {
              "seconds": 238,
              "text": "and will sort based on that."
            },
            {
              "seconds": 241,
              "text": "And this gives us the original ordered will now give us back the original list"
            },
            {
              "seconds": 245,
              "text": "but sorted as if they were integers."
            },
            {
              "seconds": 248,
              "text": "So let's run and see if it works."
            },
            {
              "seconds": 252,
              "text": "Okay, it looks like that worked."
            },
            {
              "seconds": 255,
              "text": "So this is sorting that list as if they were integers."
            },
            {
              "seconds": 258,
              "text": "Name leakage, sum the square of the numbers in nums,"
            },
            {
              "seconds": 263,
              "text": "store the result in square sum"
            },
            {
              "seconds": 266,
              "text": "so I'm going to put them right here in this space"
            },
            {
              "seconds": 269,
              "text": "and note that I've got some variables here that are just floating around"
            },
            {
              "seconds": 273,
              "text": "that maybe someone created or maybe I created if I'm typing code"
            },
            {
              "seconds": 278,
              "text": "and if I want to square a bunch of numbers and I've got them in sequence,"
            },
            {
              "seconds": 283,
              "text": "one way to do that is to use a list comprehension,"
            },
            {
              "seconds": 286,
              "text": "I can say nums is equal to, or I've already got nums,"
            },
            {
              "seconds": 292,
              "text": "so maybe sq is equal to num squared for num in nums."
            },
            {
              "seconds": 301,
              "text": "And then I want to sum that,"
            },
            {
              "seconds": 304,
              "text": "and so I'm going to say sq.sum is equal to the sum of this whole guy here."
            },
            {
              "seconds": 313,
              "text": "Let's run that see if it works."
            },
            {
              "seconds": 317,
              "text": "Okay, I got an error here, unsupported operand for ** a string and an int,"
            },
            {
              "seconds": 325,
              "text": "again I've got this string in here, so maybe I want to corse these to ints."
            },
            {
              "seconds": 330,
              "text": "Let's corse them to ints, and then do that see if that works."
            },
            {
              "seconds": 337,
              "text": "Okay, it looks like it worked this might just seem like a silly thing"
            },
            {
              "seconds": 341,
              "text": "but you'll note that in this case I used num"
            },
            {
              "seconds": 346,
              "text": "as my variable in my list comprehension here"
            },
            {
              "seconds": 350,
              "text": "and in Python 2 if I used num here when I get out of this list comprehension"
            },
            {
              "seconds": 355,
              "text": "the value of no will be the last value of this list comprehension."
            },
            {
              "seconds": 358,
              "text": "In Python 3 that behavior is changed and there is no \"leakage\""
            },
            {
              "seconds": 362,
              "text": "of this variable into the surrounding scope here"
            },
            {
              "seconds": 366,
              "text": "so num stays at 42."
            },
            {
              "seconds": 369,
              "text": "So I put an X in here and a num in here"
            },
            {
              "seconds": 372,
              "text": "in case you used those in a list comprehension."
            },
            {
              "seconds": 374,
              "text": "Now if you did these in another way, if you made a for loop and used num in there"
            },
            {
              "seconds": 378,
              "text": "then you would overwrite this num guy"
            },
            {
              "seconds": 381,
              "text": "so it's just something to be aware of if you're not familiar with that"
            },
            {
              "seconds": 384,
              "text": "in Python 2 on list comprehensions,"
            },
            {
              "seconds": 387,
              "text": "note that generator expressions and set and dictionary comprehensions"
            },
            {
              "seconds": 392,
              "text": "behave as in Python 3, there's no leakage there"
            },
            {
              "seconds": 395,
              "text": "but in the list comprehension there is."
            },
            {
              "seconds": 398,
              "text": "So this video showed some of the things that changed in Python 3,"
            },
            {
              "seconds": 403,
              "text": "we have laziness as a general theme"
            },
            {
              "seconds": 405,
              "text": "so range and map are both lazy"
            },
            {
              "seconds": 409,
              "text": "they support somewhat different interface so be aware of that."
            },
            {
              "seconds": 413,
              "text": "Sorting, when you sort different types, you need to be specific"
            },
            {
              "seconds": 418,
              "text": "and make sure that they support sorting"
            },
            {
              "seconds": 420,
              "text": "and so we can use the key parameter of the sorted function to help enable that"
            },
            {
              "seconds": 425,
              "text": "and there's no name leakage in list comprehensions now."
            }
          ]
        }
      ]
    },
    {
      "chapter_id": 12011,
      "chapter_title": "Conclusion and wrap up",
      "lectures": [
        {
          "lecture_id": 121101,
          "lecture_title": "Conclusion",
          "vimeo_id": 7111699876850199,
          "subtitles": [
            {
              "seconds": 1,
              "text": "Thanks for watching this course on Illustrated Python 3."
            },
            {
              "seconds": 4,
              "text": "I hope you've come to understand a little bit of the new features in Python 3"
            },
            {
              "seconds": 7,
              "text": "and are looking forward to using them in your work."
            },
            {
              "seconds": 11,
              "text": "Again, Python 3 has awesome features, asynchronous features,"
            },
            {
              "seconds": 15,
              "text": "the ability to do annotations, keyword only arguments,"
            },
            {
              "seconds": 18,
              "text": "unicode, these are all great features in Python 3"
            },
            {
              "seconds": 22,
              "text": "and you should be using them where you can."
            },
            {
              "seconds": 25,
              "text": "I'd love your feedback, if you have any questions or concerns,"
            },
            {
              "seconds": 28,
              "text": "again, my twitter handle is @__mharrison__"
            },
            {
              "seconds": 31,
              "text": "thanks for watching and best of luck in your future Python endeavors."
            }
          ]
        }
      ]
    }
  ]
}